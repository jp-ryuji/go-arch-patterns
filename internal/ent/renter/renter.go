// Code generated by ent, DO NOT EDIT.

package renter

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the renter type in the database.
	Label = "renter"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRenterEntityID holds the string denoting the renter_entity_id field in the database.
	FieldRenterEntityID = "renter_entity_id"
	// FieldRenterEntityType holds the string denoting the renter_entity_type field in the database.
	FieldRenterEntityType = "renter_entity_type"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeRentals holds the string denoting the rentals edge name in mutations.
	EdgeRentals = "rentals"
	// EdgeCompany holds the string denoting the company edge name in mutations.
	EdgeCompany = "company"
	// EdgeIndividual holds the string denoting the individual edge name in mutations.
	EdgeIndividual = "individual"
	// Table holds the table name of the renter in the database.
	Table = "renters"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "renters"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// RentalsTable is the table that holds the rentals relation/edge.
	RentalsTable = "rentals"
	// RentalsInverseTable is the table name for the Rental entity.
	// It exists in this package in order to avoid circular dependency with the "rental" package.
	RentalsInverseTable = "rentals"
	// RentalsColumn is the table column denoting the rentals relation/edge.
	RentalsColumn = "renter_id"
	// CompanyTable is the table that holds the company relation/edge.
	CompanyTable = "renters"
	// CompanyInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompanyInverseTable = "companies"
	// CompanyColumn is the table column denoting the company relation/edge.
	CompanyColumn = "renter_entity_id"
	// IndividualTable is the table that holds the individual relation/edge.
	IndividualTable = "renters"
	// IndividualInverseTable is the table name for the Individual entity.
	// It exists in this package in order to avoid circular dependency with the "individual" package.
	IndividualInverseTable = "individuals"
	// IndividualColumn is the table column denoting the individual relation/edge.
	IndividualColumn = "renter_entity_id"
)

// Columns holds all SQL columns for renter fields.
var Columns = []string{
	FieldID,
	FieldRenterEntityID,
	FieldRenterEntityType,
	FieldTenantID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Renter queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRenterEntityID orders the results by the renter_entity_id field.
func ByRenterEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenterEntityID, opts...).ToFunc()
}

// ByRenterEntityType orders the results by the renter_entity_type field.
func ByRenterEntityType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenterEntityType, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByRentalsCount orders the results by rentals count.
func ByRentalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRentalsStep(), opts...)
	}
}

// ByRentals orders the results by rentals terms.
func ByRentals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRentalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompanyField orders the results by company field.
func ByCompanyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompanyStep(), sql.OrderByField(field, opts...))
	}
}

// ByIndividualField orders the results by individual field.
func ByIndividualField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIndividualStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newRentalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RentalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RentalsTable, RentalsColumn),
	)
}
func newCompanyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompanyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CompanyTable, CompanyColumn),
	)
}
func newIndividualStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IndividualInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, IndividualTable, IndividualColumn),
	)
}
