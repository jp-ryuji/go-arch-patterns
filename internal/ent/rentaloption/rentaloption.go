// Code generated by ent, DO NOT EDIT.

package rentaloption

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rentaloption type in the database.
	Label = "rental_option"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldRentalID holds the string denoting the rental_id field in the database.
	FieldRentalID = "rental_id"
	// FieldOptionID holds the string denoting the option_id field in the database.
	FieldOptionID = "option_id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeRental holds the string denoting the rental edge name in mutations.
	EdgeRental = "rental"
	// EdgeOption holds the string denoting the option edge name in mutations.
	EdgeOption = "option"
	// Table holds the table name of the rentaloption in the database.
	Table = "rental_options"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "rental_options"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// RentalTable is the table that holds the rental relation/edge.
	RentalTable = "rental_options"
	// RentalInverseTable is the table name for the Rental entity.
	// It exists in this package in order to avoid circular dependency with the "rental" package.
	RentalInverseTable = "rentals"
	// RentalColumn is the table column denoting the rental relation/edge.
	RentalColumn = "rental_id"
	// OptionTable is the table that holds the option relation/edge.
	OptionTable = "rental_options"
	// OptionInverseTable is the table name for the CarOption entity.
	// It exists in this package in order to avoid circular dependency with the "caroption" package.
	OptionInverseTable = "car_options"
	// OptionColumn is the table column denoting the option relation/edge.
	OptionColumn = "option_id"
)

// Columns holds all SQL columns for rentaloption fields.
var Columns = []string{
	FieldID,
	FieldCount,
	FieldRentalID,
	FieldOptionID,
	FieldTenantID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the RentalOption queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCount orders the results by the count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByRentalID orders the results by the rental_id field.
func ByRentalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRentalID, opts...).ToFunc()
}

// ByOptionID orders the results by the option_id field.
func ByOptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOptionID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByRentalField orders the results by rental field.
func ByRentalField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRentalStep(), sql.OrderByField(field, opts...))
	}
}

// ByOptionField orders the results by option field.
func ByOptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOptionStep(), sql.OrderByField(field, opts...))
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TenantTable, TenantColumn),
	)
}
func newRentalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RentalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RentalTable, RentalColumn),
	)
}
func newOptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, OptionTable, OptionColumn),
	)
}
