// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/jp-ryuji/go-sample/internal/ent/car"
	"github.com/jp-ryuji/go-sample/internal/ent/caroption"
	"github.com/jp-ryuji/go-sample/internal/ent/company"
	"github.com/jp-ryuji/go-sample/internal/ent/individual"
	"github.com/jp-ryuji/go-sample/internal/ent/rental"
	"github.com/jp-ryuji/go-sample/internal/ent/rentaloption"
	"github.com/jp-ryuji/go-sample/internal/ent/renter"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[string]
	PageInfo       = entgql.PageInfo[string]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// CarEdge is the edge representation of Car.
type CarEdge struct {
	Node   *Car   `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// CarConnection is the connection containing edges to Car.
type CarConnection struct {
	Edges      []*CarEdge `json:"edges"`
	PageInfo   PageInfo   `json:"pageInfo"`
	TotalCount int        `json:"totalCount"`
}

func (c *CarConnection) build(nodes []*Car, pager *carPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Car
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Car {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Car {
			return nodes[i]
		}
	}
	c.Edges = make([]*CarEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CarEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CarPaginateOption enables pagination customization.
type CarPaginateOption func(*carPager) error

// WithCarOrder configures pagination ordering.
func WithCarOrder(order *CarOrder) CarPaginateOption {
	if order == nil {
		order = DefaultCarOrder
	}
	o := *order
	return func(pager *carPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCarOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCarFilter configures pagination filter.
func WithCarFilter(filter func(*CarQuery) (*CarQuery, error)) CarPaginateOption {
	return func(pager *carPager) error {
		if filter == nil {
			return errors.New("CarQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type carPager struct {
	reverse bool
	order   *CarOrder
	filter  func(*CarQuery) (*CarQuery, error)
}

func newCarPager(opts []CarPaginateOption, reverse bool) (*carPager, error) {
	pager := &carPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCarOrder
	}
	return pager, nil
}

func (p *carPager) applyFilter(query *CarQuery) (*CarQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *carPager) toCursor(_m *Car) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *carPager) applyCursors(query *CarQuery, after, before *Cursor) (*CarQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCarOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *carPager) applyOrder(query *CarQuery) *CarQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCarOrder.Field {
		query = query.Order(DefaultCarOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *carPager) orderExpr(query *CarQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCarOrder.Field {
			b.Comma().Ident(DefaultCarOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Car.
func (_m *CarQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CarPaginateOption,
) (*CarConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCarPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &CarConnection{Edges: []*CarEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CarOrderFieldID orders Car by id.
	CarOrderFieldID = &CarOrderField{
		Value: func(_m *Car) (ent.Value, error) {
			return _m.ID, nil
		},
		column: car.FieldID,
		toTerm: car.ByID,
		toCursor: func(_m *Car) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.ID,
			}
		},
	}
	// CarOrderFieldModel orders Car by model.
	CarOrderFieldModel = &CarOrderField{
		Value: func(_m *Car) (ent.Value, error) {
			return _m.Model, nil
		},
		column: car.FieldModel,
		toTerm: car.ByModel,
		toCursor: func(_m *Car) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Model,
			}
		},
	}
	// CarOrderFieldTenantID orders Car by tenant_id.
	CarOrderFieldTenantID = &CarOrderField{
		Value: func(_m *Car) (ent.Value, error) {
			return _m.TenantID, nil
		},
		column: car.FieldTenantID,
		toTerm: car.ByTenantID,
		toCursor: func(_m *Car) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.TenantID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CarOrderField) String() string {
	var str string
	switch f.column {
	case CarOrderFieldID.column:
		str = "ID"
	case CarOrderFieldModel.column:
		str = "MODEL"
	case CarOrderFieldTenantID.column:
		str = "TENANT_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CarOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CarOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CarOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *CarOrderFieldID
	case "MODEL":
		*f = *CarOrderFieldModel
	case "TENANT_ID":
		*f = *CarOrderFieldTenantID
	default:
		return fmt.Errorf("%s is not a valid CarOrderField", str)
	}
	return nil
}

// CarOrderField defines the ordering field of Car.
type CarOrderField struct {
	// Value extracts the ordering value from the given Car.
	Value    func(*Car) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) car.OrderOption
	toCursor func(*Car) Cursor
}

// CarOrder defines the ordering of Car.
type CarOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *CarOrderField `json:"field"`
}

// DefaultCarOrder is the default ordering of Car.
var DefaultCarOrder = &CarOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CarOrderField{
		Value: func(_m *Car) (ent.Value, error) {
			return _m.ID, nil
		},
		column: car.FieldID,
		toTerm: car.ByID,
		toCursor: func(_m *Car) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Car into CarEdge.
func (_m *Car) ToEdge(order *CarOrder) *CarEdge {
	if order == nil {
		order = DefaultCarOrder
	}
	return &CarEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// CarOptionEdge is the edge representation of CarOption.
type CarOptionEdge struct {
	Node   *CarOption `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// CarOptionConnection is the connection containing edges to CarOption.
type CarOptionConnection struct {
	Edges      []*CarOptionEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *CarOptionConnection) build(nodes []*CarOption, pager *caroptionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *CarOption
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *CarOption {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *CarOption {
			return nodes[i]
		}
	}
	c.Edges = make([]*CarOptionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CarOptionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CarOptionPaginateOption enables pagination customization.
type CarOptionPaginateOption func(*caroptionPager) error

// WithCarOptionOrder configures pagination ordering.
func WithCarOptionOrder(order *CarOptionOrder) CarOptionPaginateOption {
	if order == nil {
		order = DefaultCarOptionOrder
	}
	o := *order
	return func(pager *caroptionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCarOptionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCarOptionFilter configures pagination filter.
func WithCarOptionFilter(filter func(*CarOptionQuery) (*CarOptionQuery, error)) CarOptionPaginateOption {
	return func(pager *caroptionPager) error {
		if filter == nil {
			return errors.New("CarOptionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type caroptionPager struct {
	reverse bool
	order   *CarOptionOrder
	filter  func(*CarOptionQuery) (*CarOptionQuery, error)
}

func newCarOptionPager(opts []CarOptionPaginateOption, reverse bool) (*caroptionPager, error) {
	pager := &caroptionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCarOptionOrder
	}
	return pager, nil
}

func (p *caroptionPager) applyFilter(query *CarOptionQuery) (*CarOptionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *caroptionPager) toCursor(_m *CarOption) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *caroptionPager) applyCursors(query *CarOptionQuery, after, before *Cursor) (*CarOptionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCarOptionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *caroptionPager) applyOrder(query *CarOptionQuery) *CarOptionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCarOptionOrder.Field {
		query = query.Order(DefaultCarOptionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *caroptionPager) orderExpr(query *CarOptionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCarOptionOrder.Field {
			b.Comma().Ident(DefaultCarOptionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to CarOption.
func (_m *CarOptionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CarOptionPaginateOption,
) (*CarOptionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCarOptionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &CarOptionConnection{Edges: []*CarOptionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CarOptionOrderFieldID orders CarOption by id.
	CarOptionOrderFieldID = &CarOptionOrderField{
		Value: func(_m *CarOption) (ent.Value, error) {
			return _m.ID, nil
		},
		column: caroption.FieldID,
		toTerm: caroption.ByID,
		toCursor: func(_m *CarOption) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.ID,
			}
		},
	}
	// CarOptionOrderFieldName orders CarOption by name.
	CarOptionOrderFieldName = &CarOptionOrderField{
		Value: func(_m *CarOption) (ent.Value, error) {
			return _m.Name, nil
		},
		column: caroption.FieldName,
		toTerm: caroption.ByName,
		toCursor: func(_m *CarOption) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// CarOptionOrderFieldTenantID orders CarOption by tenant_id.
	CarOptionOrderFieldTenantID = &CarOptionOrderField{
		Value: func(_m *CarOption) (ent.Value, error) {
			return _m.TenantID, nil
		},
		column: caroption.FieldTenantID,
		toTerm: caroption.ByTenantID,
		toCursor: func(_m *CarOption) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.TenantID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CarOptionOrderField) String() string {
	var str string
	switch f.column {
	case CarOptionOrderFieldID.column:
		str = "ID"
	case CarOptionOrderFieldName.column:
		str = "NAME"
	case CarOptionOrderFieldTenantID.column:
		str = "TENANT_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CarOptionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CarOptionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CarOptionOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *CarOptionOrderFieldID
	case "NAME":
		*f = *CarOptionOrderFieldName
	case "TENANT_ID":
		*f = *CarOptionOrderFieldTenantID
	default:
		return fmt.Errorf("%s is not a valid CarOptionOrderField", str)
	}
	return nil
}

// CarOptionOrderField defines the ordering field of CarOption.
type CarOptionOrderField struct {
	// Value extracts the ordering value from the given CarOption.
	Value    func(*CarOption) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) caroption.OrderOption
	toCursor func(*CarOption) Cursor
}

// CarOptionOrder defines the ordering of CarOption.
type CarOptionOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *CarOptionOrderField `json:"field"`
}

// DefaultCarOptionOrder is the default ordering of CarOption.
var DefaultCarOptionOrder = &CarOptionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CarOptionOrderField{
		Value: func(_m *CarOption) (ent.Value, error) {
			return _m.ID, nil
		},
		column: caroption.FieldID,
		toTerm: caroption.ByID,
		toCursor: func(_m *CarOption) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts CarOption into CarOptionEdge.
func (_m *CarOption) ToEdge(order *CarOptionOrder) *CarOptionEdge {
	if order == nil {
		order = DefaultCarOptionOrder
	}
	return &CarOptionEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// CompanyEdge is the edge representation of Company.
type CompanyEdge struct {
	Node   *Company `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// CompanyConnection is the connection containing edges to Company.
type CompanyConnection struct {
	Edges      []*CompanyEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *CompanyConnection) build(nodes []*Company, pager *companyPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Company
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Company {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Company {
			return nodes[i]
		}
	}
	c.Edges = make([]*CompanyEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CompanyEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CompanyPaginateOption enables pagination customization.
type CompanyPaginateOption func(*companyPager) error

// WithCompanyOrder configures pagination ordering.
func WithCompanyOrder(order *CompanyOrder) CompanyPaginateOption {
	if order == nil {
		order = DefaultCompanyOrder
	}
	o := *order
	return func(pager *companyPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCompanyOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCompanyFilter configures pagination filter.
func WithCompanyFilter(filter func(*CompanyQuery) (*CompanyQuery, error)) CompanyPaginateOption {
	return func(pager *companyPager) error {
		if filter == nil {
			return errors.New("CompanyQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type companyPager struct {
	reverse bool
	order   *CompanyOrder
	filter  func(*CompanyQuery) (*CompanyQuery, error)
}

func newCompanyPager(opts []CompanyPaginateOption, reverse bool) (*companyPager, error) {
	pager := &companyPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCompanyOrder
	}
	return pager, nil
}

func (p *companyPager) applyFilter(query *CompanyQuery) (*CompanyQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *companyPager) toCursor(_m *Company) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *companyPager) applyCursors(query *CompanyQuery, after, before *Cursor) (*CompanyQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCompanyOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *companyPager) applyOrder(query *CompanyQuery) *CompanyQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCompanyOrder.Field {
		query = query.Order(DefaultCompanyOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *companyPager) orderExpr(query *CompanyQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCompanyOrder.Field {
			b.Comma().Ident(DefaultCompanyOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Company.
func (_m *CompanyQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CompanyPaginateOption,
) (*CompanyConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCompanyPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &CompanyConnection{Edges: []*CompanyEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// CompanyOrderFieldID orders Company by id.
	CompanyOrderFieldID = &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.ID, nil
		},
		column: company.FieldID,
		toTerm: company.ByID,
		toCursor: func(_m *Company) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.ID,
			}
		},
	}
	// CompanyOrderFieldName orders Company by name.
	CompanyOrderFieldName = &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.Name, nil
		},
		column: company.FieldName,
		toTerm: company.ByName,
		toCursor: func(_m *Company) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Name,
			}
		},
	}
	// CompanyOrderFieldCompanySize orders Company by company_size.
	CompanyOrderFieldCompanySize = &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.CompanySize, nil
		},
		column: company.FieldCompanySize,
		toTerm: company.ByCompanySize,
		toCursor: func(_m *Company) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CompanySize,
			}
		},
	}
	// CompanyOrderFieldTenantID orders Company by tenant_id.
	CompanyOrderFieldTenantID = &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.TenantID, nil
		},
		column: company.FieldTenantID,
		toTerm: company.ByTenantID,
		toCursor: func(_m *Company) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.TenantID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f CompanyOrderField) String() string {
	var str string
	switch f.column {
	case CompanyOrderFieldID.column:
		str = "ID"
	case CompanyOrderFieldName.column:
		str = "NAME"
	case CompanyOrderFieldCompanySize.column:
		str = "COMPANY_SIZE"
	case CompanyOrderFieldTenantID.column:
		str = "TENANT_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f CompanyOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *CompanyOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("CompanyOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *CompanyOrderFieldID
	case "NAME":
		*f = *CompanyOrderFieldName
	case "COMPANY_SIZE":
		*f = *CompanyOrderFieldCompanySize
	case "TENANT_ID":
		*f = *CompanyOrderFieldTenantID
	default:
		return fmt.Errorf("%s is not a valid CompanyOrderField", str)
	}
	return nil
}

// CompanyOrderField defines the ordering field of Company.
type CompanyOrderField struct {
	// Value extracts the ordering value from the given Company.
	Value    func(*Company) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) company.OrderOption
	toCursor func(*Company) Cursor
}

// CompanyOrder defines the ordering of Company.
type CompanyOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *CompanyOrderField `json:"field"`
}

// DefaultCompanyOrder is the default ordering of Company.
var DefaultCompanyOrder = &CompanyOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CompanyOrderField{
		Value: func(_m *Company) (ent.Value, error) {
			return _m.ID, nil
		},
		column: company.FieldID,
		toTerm: company.ByID,
		toCursor: func(_m *Company) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Company into CompanyEdge.
func (_m *Company) ToEdge(order *CompanyOrder) *CompanyEdge {
	if order == nil {
		order = DefaultCompanyOrder
	}
	return &CompanyEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// IndividualEdge is the edge representation of Individual.
type IndividualEdge struct {
	Node   *Individual `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// IndividualConnection is the connection containing edges to Individual.
type IndividualConnection struct {
	Edges      []*IndividualEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *IndividualConnection) build(nodes []*Individual, pager *individualPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Individual
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Individual {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Individual {
			return nodes[i]
		}
	}
	c.Edges = make([]*IndividualEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &IndividualEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// IndividualPaginateOption enables pagination customization.
type IndividualPaginateOption func(*individualPager) error

// WithIndividualOrder configures pagination ordering.
func WithIndividualOrder(order *IndividualOrder) IndividualPaginateOption {
	if order == nil {
		order = DefaultIndividualOrder
	}
	o := *order
	return func(pager *individualPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultIndividualOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithIndividualFilter configures pagination filter.
func WithIndividualFilter(filter func(*IndividualQuery) (*IndividualQuery, error)) IndividualPaginateOption {
	return func(pager *individualPager) error {
		if filter == nil {
			return errors.New("IndividualQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type individualPager struct {
	reverse bool
	order   *IndividualOrder
	filter  func(*IndividualQuery) (*IndividualQuery, error)
}

func newIndividualPager(opts []IndividualPaginateOption, reverse bool) (*individualPager, error) {
	pager := &individualPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultIndividualOrder
	}
	return pager, nil
}

func (p *individualPager) applyFilter(query *IndividualQuery) (*IndividualQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *individualPager) toCursor(_m *Individual) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *individualPager) applyCursors(query *IndividualQuery, after, before *Cursor) (*IndividualQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultIndividualOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *individualPager) applyOrder(query *IndividualQuery) *IndividualQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultIndividualOrder.Field {
		query = query.Order(DefaultIndividualOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *individualPager) orderExpr(query *IndividualQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultIndividualOrder.Field {
			b.Comma().Ident(DefaultIndividualOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Individual.
func (_m *IndividualQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...IndividualPaginateOption,
) (*IndividualConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newIndividualPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &IndividualConnection{Edges: []*IndividualEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// IndividualOrderFieldID orders Individual by id.
	IndividualOrderFieldID = &IndividualOrderField{
		Value: func(_m *Individual) (ent.Value, error) {
			return _m.ID, nil
		},
		column: individual.FieldID,
		toTerm: individual.ByID,
		toCursor: func(_m *Individual) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.ID,
			}
		},
	}
	// IndividualOrderFieldEmail orders Individual by email.
	IndividualOrderFieldEmail = &IndividualOrderField{
		Value: func(_m *Individual) (ent.Value, error) {
			return _m.Email, nil
		},
		column: individual.FieldEmail,
		toTerm: individual.ByEmail,
		toCursor: func(_m *Individual) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Email,
			}
		},
	}
	// IndividualOrderFieldFirstName orders Individual by first_name.
	IndividualOrderFieldFirstName = &IndividualOrderField{
		Value: func(_m *Individual) (ent.Value, error) {
			return _m.FirstName, nil
		},
		column: individual.FieldFirstName,
		toTerm: individual.ByFirstName,
		toCursor: func(_m *Individual) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.FirstName,
			}
		},
	}
	// IndividualOrderFieldLastName orders Individual by last_name.
	IndividualOrderFieldLastName = &IndividualOrderField{
		Value: func(_m *Individual) (ent.Value, error) {
			return _m.LastName, nil
		},
		column: individual.FieldLastName,
		toTerm: individual.ByLastName,
		toCursor: func(_m *Individual) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.LastName,
			}
		},
	}
	// IndividualOrderFieldTenantID orders Individual by tenant_id.
	IndividualOrderFieldTenantID = &IndividualOrderField{
		Value: func(_m *Individual) (ent.Value, error) {
			return _m.TenantID, nil
		},
		column: individual.FieldTenantID,
		toTerm: individual.ByTenantID,
		toCursor: func(_m *Individual) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.TenantID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f IndividualOrderField) String() string {
	var str string
	switch f.column {
	case IndividualOrderFieldID.column:
		str = "ID"
	case IndividualOrderFieldEmail.column:
		str = "EMAIL"
	case IndividualOrderFieldFirstName.column:
		str = "FIRST_NAME"
	case IndividualOrderFieldLastName.column:
		str = "LAST_NAME"
	case IndividualOrderFieldTenantID.column:
		str = "TENANT_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f IndividualOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *IndividualOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("IndividualOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *IndividualOrderFieldID
	case "EMAIL":
		*f = *IndividualOrderFieldEmail
	case "FIRST_NAME":
		*f = *IndividualOrderFieldFirstName
	case "LAST_NAME":
		*f = *IndividualOrderFieldLastName
	case "TENANT_ID":
		*f = *IndividualOrderFieldTenantID
	default:
		return fmt.Errorf("%s is not a valid IndividualOrderField", str)
	}
	return nil
}

// IndividualOrderField defines the ordering field of Individual.
type IndividualOrderField struct {
	// Value extracts the ordering value from the given Individual.
	Value    func(*Individual) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) individual.OrderOption
	toCursor func(*Individual) Cursor
}

// IndividualOrder defines the ordering of Individual.
type IndividualOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *IndividualOrderField `json:"field"`
}

// DefaultIndividualOrder is the default ordering of Individual.
var DefaultIndividualOrder = &IndividualOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &IndividualOrderField{
		Value: func(_m *Individual) (ent.Value, error) {
			return _m.ID, nil
		},
		column: individual.FieldID,
		toTerm: individual.ByID,
		toCursor: func(_m *Individual) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Individual into IndividualEdge.
func (_m *Individual) ToEdge(order *IndividualOrder) *IndividualEdge {
	if order == nil {
		order = DefaultIndividualOrder
	}
	return &IndividualEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// RentalEdge is the edge representation of Rental.
type RentalEdge struct {
	Node   *Rental `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// RentalConnection is the connection containing edges to Rental.
type RentalConnection struct {
	Edges      []*RentalEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *RentalConnection) build(nodes []*Rental, pager *rentalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Rental
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Rental {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Rental {
			return nodes[i]
		}
	}
	c.Edges = make([]*RentalEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RentalEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RentalPaginateOption enables pagination customization.
type RentalPaginateOption func(*rentalPager) error

// WithRentalOrder configures pagination ordering.
func WithRentalOrder(order *RentalOrder) RentalPaginateOption {
	if order == nil {
		order = DefaultRentalOrder
	}
	o := *order
	return func(pager *rentalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRentalOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRentalFilter configures pagination filter.
func WithRentalFilter(filter func(*RentalQuery) (*RentalQuery, error)) RentalPaginateOption {
	return func(pager *rentalPager) error {
		if filter == nil {
			return errors.New("RentalQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type rentalPager struct {
	reverse bool
	order   *RentalOrder
	filter  func(*RentalQuery) (*RentalQuery, error)
}

func newRentalPager(opts []RentalPaginateOption, reverse bool) (*rentalPager, error) {
	pager := &rentalPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRentalOrder
	}
	return pager, nil
}

func (p *rentalPager) applyFilter(query *RentalQuery) (*RentalQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *rentalPager) toCursor(_m *Rental) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *rentalPager) applyCursors(query *RentalQuery, after, before *Cursor) (*RentalQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRentalOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *rentalPager) applyOrder(query *RentalQuery) *RentalQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRentalOrder.Field {
		query = query.Order(DefaultRentalOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *rentalPager) orderExpr(query *RentalQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRentalOrder.Field {
			b.Comma().Ident(DefaultRentalOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Rental.
func (_m *RentalQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RentalPaginateOption,
) (*RentalConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRentalPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &RentalConnection{Edges: []*RentalEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RentalOrderFieldID orders Rental by id.
	RentalOrderFieldID = &RentalOrderField{
		Value: func(_m *Rental) (ent.Value, error) {
			return _m.ID, nil
		},
		column: rental.FieldID,
		toTerm: rental.ByID,
		toCursor: func(_m *Rental) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.ID,
			}
		},
	}
	// RentalOrderFieldStartsAt orders Rental by starts_at.
	RentalOrderFieldStartsAt = &RentalOrderField{
		Value: func(_m *Rental) (ent.Value, error) {
			return _m.StartsAt, nil
		},
		column: rental.FieldStartsAt,
		toTerm: rental.ByStartsAt,
		toCursor: func(_m *Rental) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.StartsAt,
			}
		},
	}
	// RentalOrderFieldEndsAt orders Rental by ends_at.
	RentalOrderFieldEndsAt = &RentalOrderField{
		Value: func(_m *Rental) (ent.Value, error) {
			return _m.EndsAt, nil
		},
		column: rental.FieldEndsAt,
		toTerm: rental.ByEndsAt,
		toCursor: func(_m *Rental) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.EndsAt,
			}
		},
	}
	// RentalOrderFieldCarID orders Rental by car_id.
	RentalOrderFieldCarID = &RentalOrderField{
		Value: func(_m *Rental) (ent.Value, error) {
			return _m.CarID, nil
		},
		column: rental.FieldCarID,
		toTerm: rental.ByCarID,
		toCursor: func(_m *Rental) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.CarID,
			}
		},
	}
	// RentalOrderFieldRenterID orders Rental by renter_id.
	RentalOrderFieldRenterID = &RentalOrderField{
		Value: func(_m *Rental) (ent.Value, error) {
			return _m.RenterID, nil
		},
		column: rental.FieldRenterID,
		toTerm: rental.ByRenterID,
		toCursor: func(_m *Rental) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.RenterID,
			}
		},
	}
	// RentalOrderFieldTenantID orders Rental by tenant_id.
	RentalOrderFieldTenantID = &RentalOrderField{
		Value: func(_m *Rental) (ent.Value, error) {
			return _m.TenantID, nil
		},
		column: rental.FieldTenantID,
		toTerm: rental.ByTenantID,
		toCursor: func(_m *Rental) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.TenantID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RentalOrderField) String() string {
	var str string
	switch f.column {
	case RentalOrderFieldID.column:
		str = "ID"
	case RentalOrderFieldStartsAt.column:
		str = "STARTS_AT"
	case RentalOrderFieldEndsAt.column:
		str = "ENDS_AT"
	case RentalOrderFieldCarID.column:
		str = "CAR_ID"
	case RentalOrderFieldRenterID.column:
		str = "RENTER_ID"
	case RentalOrderFieldTenantID.column:
		str = "TENANT_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RentalOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RentalOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RentalOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *RentalOrderFieldID
	case "STARTS_AT":
		*f = *RentalOrderFieldStartsAt
	case "ENDS_AT":
		*f = *RentalOrderFieldEndsAt
	case "CAR_ID":
		*f = *RentalOrderFieldCarID
	case "RENTER_ID":
		*f = *RentalOrderFieldRenterID
	case "TENANT_ID":
		*f = *RentalOrderFieldTenantID
	default:
		return fmt.Errorf("%s is not a valid RentalOrderField", str)
	}
	return nil
}

// RentalOrderField defines the ordering field of Rental.
type RentalOrderField struct {
	// Value extracts the ordering value from the given Rental.
	Value    func(*Rental) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) rental.OrderOption
	toCursor func(*Rental) Cursor
}

// RentalOrder defines the ordering of Rental.
type RentalOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *RentalOrderField `json:"field"`
}

// DefaultRentalOrder is the default ordering of Rental.
var DefaultRentalOrder = &RentalOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RentalOrderField{
		Value: func(_m *Rental) (ent.Value, error) {
			return _m.ID, nil
		},
		column: rental.FieldID,
		toTerm: rental.ByID,
		toCursor: func(_m *Rental) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Rental into RentalEdge.
func (_m *Rental) ToEdge(order *RentalOrder) *RentalEdge {
	if order == nil {
		order = DefaultRentalOrder
	}
	return &RentalEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// RentalOptionEdge is the edge representation of RentalOption.
type RentalOptionEdge struct {
	Node   *RentalOption `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// RentalOptionConnection is the connection containing edges to RentalOption.
type RentalOptionConnection struct {
	Edges      []*RentalOptionEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *RentalOptionConnection) build(nodes []*RentalOption, pager *rentaloptionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *RentalOption
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *RentalOption {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *RentalOption {
			return nodes[i]
		}
	}
	c.Edges = make([]*RentalOptionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RentalOptionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RentalOptionPaginateOption enables pagination customization.
type RentalOptionPaginateOption func(*rentaloptionPager) error

// WithRentalOptionOrder configures pagination ordering.
func WithRentalOptionOrder(order *RentalOptionOrder) RentalOptionPaginateOption {
	if order == nil {
		order = DefaultRentalOptionOrder
	}
	o := *order
	return func(pager *rentaloptionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRentalOptionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRentalOptionFilter configures pagination filter.
func WithRentalOptionFilter(filter func(*RentalOptionQuery) (*RentalOptionQuery, error)) RentalOptionPaginateOption {
	return func(pager *rentaloptionPager) error {
		if filter == nil {
			return errors.New("RentalOptionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type rentaloptionPager struct {
	reverse bool
	order   *RentalOptionOrder
	filter  func(*RentalOptionQuery) (*RentalOptionQuery, error)
}

func newRentalOptionPager(opts []RentalOptionPaginateOption, reverse bool) (*rentaloptionPager, error) {
	pager := &rentaloptionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRentalOptionOrder
	}
	return pager, nil
}

func (p *rentaloptionPager) applyFilter(query *RentalOptionQuery) (*RentalOptionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *rentaloptionPager) toCursor(_m *RentalOption) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *rentaloptionPager) applyCursors(query *RentalOptionQuery, after, before *Cursor) (*RentalOptionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRentalOptionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *rentaloptionPager) applyOrder(query *RentalOptionQuery) *RentalOptionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRentalOptionOrder.Field {
		query = query.Order(DefaultRentalOptionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *rentaloptionPager) orderExpr(query *RentalOptionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRentalOptionOrder.Field {
			b.Comma().Ident(DefaultRentalOptionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to RentalOption.
func (_m *RentalOptionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RentalOptionPaginateOption,
) (*RentalOptionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRentalOptionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &RentalOptionConnection{Edges: []*RentalOptionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RentalOptionOrderFieldID orders RentalOption by id.
	RentalOptionOrderFieldID = &RentalOptionOrderField{
		Value: func(_m *RentalOption) (ent.Value, error) {
			return _m.ID, nil
		},
		column: rentaloption.FieldID,
		toTerm: rentaloption.ByID,
		toCursor: func(_m *RentalOption) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.ID,
			}
		},
	}
	// RentalOptionOrderFieldCount orders RentalOption by count.
	RentalOptionOrderFieldCount = &RentalOptionOrderField{
		Value: func(_m *RentalOption) (ent.Value, error) {
			return _m.Count, nil
		},
		column: rentaloption.FieldCount,
		toTerm: rentaloption.ByCount,
		toCursor: func(_m *RentalOption) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Count,
			}
		},
	}
	// RentalOptionOrderFieldRentalID orders RentalOption by rental_id.
	RentalOptionOrderFieldRentalID = &RentalOptionOrderField{
		Value: func(_m *RentalOption) (ent.Value, error) {
			return _m.RentalID, nil
		},
		column: rentaloption.FieldRentalID,
		toTerm: rentaloption.ByRentalID,
		toCursor: func(_m *RentalOption) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.RentalID,
			}
		},
	}
	// RentalOptionOrderFieldOptionID orders RentalOption by option_id.
	RentalOptionOrderFieldOptionID = &RentalOptionOrderField{
		Value: func(_m *RentalOption) (ent.Value, error) {
			return _m.OptionID, nil
		},
		column: rentaloption.FieldOptionID,
		toTerm: rentaloption.ByOptionID,
		toCursor: func(_m *RentalOption) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.OptionID,
			}
		},
	}
	// RentalOptionOrderFieldTenantID orders RentalOption by tenant_id.
	RentalOptionOrderFieldTenantID = &RentalOptionOrderField{
		Value: func(_m *RentalOption) (ent.Value, error) {
			return _m.TenantID, nil
		},
		column: rentaloption.FieldTenantID,
		toTerm: rentaloption.ByTenantID,
		toCursor: func(_m *RentalOption) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.TenantID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RentalOptionOrderField) String() string {
	var str string
	switch f.column {
	case RentalOptionOrderFieldID.column:
		str = "ID"
	case RentalOptionOrderFieldCount.column:
		str = "COUNT"
	case RentalOptionOrderFieldRentalID.column:
		str = "RENTAL_ID"
	case RentalOptionOrderFieldOptionID.column:
		str = "OPTION_ID"
	case RentalOptionOrderFieldTenantID.column:
		str = "TENANT_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RentalOptionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RentalOptionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RentalOptionOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *RentalOptionOrderFieldID
	case "COUNT":
		*f = *RentalOptionOrderFieldCount
	case "RENTAL_ID":
		*f = *RentalOptionOrderFieldRentalID
	case "OPTION_ID":
		*f = *RentalOptionOrderFieldOptionID
	case "TENANT_ID":
		*f = *RentalOptionOrderFieldTenantID
	default:
		return fmt.Errorf("%s is not a valid RentalOptionOrderField", str)
	}
	return nil
}

// RentalOptionOrderField defines the ordering field of RentalOption.
type RentalOptionOrderField struct {
	// Value extracts the ordering value from the given RentalOption.
	Value    func(*RentalOption) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) rentaloption.OrderOption
	toCursor func(*RentalOption) Cursor
}

// RentalOptionOrder defines the ordering of RentalOption.
type RentalOptionOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *RentalOptionOrderField `json:"field"`
}

// DefaultRentalOptionOrder is the default ordering of RentalOption.
var DefaultRentalOptionOrder = &RentalOptionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RentalOptionOrderField{
		Value: func(_m *RentalOption) (ent.Value, error) {
			return _m.ID, nil
		},
		column: rentaloption.FieldID,
		toTerm: rentaloption.ByID,
		toCursor: func(_m *RentalOption) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts RentalOption into RentalOptionEdge.
func (_m *RentalOption) ToEdge(order *RentalOptionOrder) *RentalOptionEdge {
	if order == nil {
		order = DefaultRentalOptionOrder
	}
	return &RentalOptionEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// RenterEdge is the edge representation of Renter.
type RenterEdge struct {
	Node   *Renter `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// RenterConnection is the connection containing edges to Renter.
type RenterConnection struct {
	Edges      []*RenterEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *RenterConnection) build(nodes []*Renter, pager *renterPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Renter
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Renter {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Renter {
			return nodes[i]
		}
	}
	c.Edges = make([]*RenterEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &RenterEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// RenterPaginateOption enables pagination customization.
type RenterPaginateOption func(*renterPager) error

// WithRenterOrder configures pagination ordering.
func WithRenterOrder(order *RenterOrder) RenterPaginateOption {
	if order == nil {
		order = DefaultRenterOrder
	}
	o := *order
	return func(pager *renterPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultRenterOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithRenterFilter configures pagination filter.
func WithRenterFilter(filter func(*RenterQuery) (*RenterQuery, error)) RenterPaginateOption {
	return func(pager *renterPager) error {
		if filter == nil {
			return errors.New("RenterQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type renterPager struct {
	reverse bool
	order   *RenterOrder
	filter  func(*RenterQuery) (*RenterQuery, error)
}

func newRenterPager(opts []RenterPaginateOption, reverse bool) (*renterPager, error) {
	pager := &renterPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultRenterOrder
	}
	return pager, nil
}

func (p *renterPager) applyFilter(query *RenterQuery) (*RenterQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *renterPager) toCursor(_m *Renter) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *renterPager) applyCursors(query *RenterQuery, after, before *Cursor) (*RenterQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultRenterOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *renterPager) applyOrder(query *RenterQuery) *RenterQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultRenterOrder.Field {
		query = query.Order(DefaultRenterOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *renterPager) orderExpr(query *RenterQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultRenterOrder.Field {
			b.Comma().Ident(DefaultRenterOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Renter.
func (_m *RenterQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...RenterPaginateOption,
) (*RenterConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newRenterPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &RenterConnection{Edges: []*RenterEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// RenterOrderFieldID orders Renter by id.
	RenterOrderFieldID = &RenterOrderField{
		Value: func(_m *Renter) (ent.Value, error) {
			return _m.ID, nil
		},
		column: renter.FieldID,
		toTerm: renter.ByID,
		toCursor: func(_m *Renter) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.ID,
			}
		},
	}
	// RenterOrderFieldRenterEntityID orders Renter by renter_entity_id.
	RenterOrderFieldRenterEntityID = &RenterOrderField{
		Value: func(_m *Renter) (ent.Value, error) {
			return _m.RenterEntityID, nil
		},
		column: renter.FieldRenterEntityID,
		toTerm: renter.ByRenterEntityID,
		toCursor: func(_m *Renter) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.RenterEntityID,
			}
		},
	}
	// RenterOrderFieldRenterEntityType orders Renter by renter_entity_type.
	RenterOrderFieldRenterEntityType = &RenterOrderField{
		Value: func(_m *Renter) (ent.Value, error) {
			return _m.RenterEntityType, nil
		},
		column: renter.FieldRenterEntityType,
		toTerm: renter.ByRenterEntityType,
		toCursor: func(_m *Renter) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.RenterEntityType,
			}
		},
	}
	// RenterOrderFieldTenantID orders Renter by tenant_id.
	RenterOrderFieldTenantID = &RenterOrderField{
		Value: func(_m *Renter) (ent.Value, error) {
			return _m.TenantID, nil
		},
		column: renter.FieldTenantID,
		toTerm: renter.ByTenantID,
		toCursor: func(_m *Renter) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.TenantID,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f RenterOrderField) String() string {
	var str string
	switch f.column {
	case RenterOrderFieldID.column:
		str = "ID"
	case RenterOrderFieldRenterEntityID.column:
		str = "RENTER_ENTITY_ID"
	case RenterOrderFieldRenterEntityType.column:
		str = "RENTER_ENTITY_TYPE"
	case RenterOrderFieldTenantID.column:
		str = "TENANT_ID"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f RenterOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *RenterOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("RenterOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *RenterOrderFieldID
	case "RENTER_ENTITY_ID":
		*f = *RenterOrderFieldRenterEntityID
	case "RENTER_ENTITY_TYPE":
		*f = *RenterOrderFieldRenterEntityType
	case "TENANT_ID":
		*f = *RenterOrderFieldTenantID
	default:
		return fmt.Errorf("%s is not a valid RenterOrderField", str)
	}
	return nil
}

// RenterOrderField defines the ordering field of Renter.
type RenterOrderField struct {
	// Value extracts the ordering value from the given Renter.
	Value    func(*Renter) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) renter.OrderOption
	toCursor func(*Renter) Cursor
}

// RenterOrder defines the ordering of Renter.
type RenterOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *RenterOrderField `json:"field"`
}

// DefaultRenterOrder is the default ordering of Renter.
var DefaultRenterOrder = &RenterOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &RenterOrderField{
		Value: func(_m *Renter) (ent.Value, error) {
			return _m.ID, nil
		},
		column: renter.FieldID,
		toTerm: renter.ByID,
		toCursor: func(_m *Renter) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Renter into RenterEdge.
func (_m *Renter) ToEdge(order *RenterOrder) *RenterEdge {
	if order == nil {
		order = DefaultRenterOrder
	}
	return &RenterEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}

// TenantEdge is the edge representation of Tenant.
type TenantEdge struct {
	Node   *Tenant `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// TenantConnection is the connection containing edges to Tenant.
type TenantConnection struct {
	Edges      []*TenantEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *TenantConnection) build(nodes []*Tenant, pager *tenantPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Tenant
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Tenant {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Tenant {
			return nodes[i]
		}
	}
	c.Edges = make([]*TenantEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TenantEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TenantPaginateOption enables pagination customization.
type TenantPaginateOption func(*tenantPager) error

// WithTenantOrder configures pagination ordering.
func WithTenantOrder(order *TenantOrder) TenantPaginateOption {
	if order == nil {
		order = DefaultTenantOrder
	}
	o := *order
	return func(pager *tenantPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTenantOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTenantFilter configures pagination filter.
func WithTenantFilter(filter func(*TenantQuery) (*TenantQuery, error)) TenantPaginateOption {
	return func(pager *tenantPager) error {
		if filter == nil {
			return errors.New("TenantQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tenantPager struct {
	reverse bool
	order   *TenantOrder
	filter  func(*TenantQuery) (*TenantQuery, error)
}

func newTenantPager(opts []TenantPaginateOption, reverse bool) (*tenantPager, error) {
	pager := &tenantPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTenantOrder
	}
	return pager, nil
}

func (p *tenantPager) applyFilter(query *TenantQuery) (*TenantQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tenantPager) toCursor(_m *Tenant) Cursor {
	return p.order.Field.toCursor(_m)
}

func (p *tenantPager) applyCursors(query *TenantQuery, after, before *Cursor) (*TenantQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTenantOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *tenantPager) applyOrder(query *TenantQuery) *TenantQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTenantOrder.Field {
		query = query.Order(DefaultTenantOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *tenantPager) orderExpr(query *TenantQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTenantOrder.Field {
			b.Comma().Ident(DefaultTenantOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Tenant.
func (_m *TenantQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TenantPaginateOption,
) (*TenantConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTenantPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if _m, err = pager.applyFilter(_m); err != nil {
		return nil, err
	}
	conn := &TenantConnection{Edges: []*TenantEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := _m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if _m, err = pager.applyCursors(_m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		_m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := _m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	_m = pager.applyOrder(_m)
	nodes, err := _m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TenantOrderFieldID orders Tenant by id.
	TenantOrderFieldID = &TenantOrderField{
		Value: func(_m *Tenant) (ent.Value, error) {
			return _m.ID, nil
		},
		column: tenant.FieldID,
		toTerm: tenant.ByID,
		toCursor: func(_m *Tenant) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.ID,
			}
		},
	}
	// TenantOrderFieldCode orders Tenant by code.
	TenantOrderFieldCode = &TenantOrderField{
		Value: func(_m *Tenant) (ent.Value, error) {
			return _m.Code, nil
		},
		column: tenant.FieldCode,
		toTerm: tenant.ByCode,
		toCursor: func(_m *Tenant) Cursor {
			return Cursor{
				ID:    _m.ID,
				Value: _m.Code,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TenantOrderField) String() string {
	var str string
	switch f.column {
	case TenantOrderFieldID.column:
		str = "ID"
	case TenantOrderFieldCode.column:
		str = "CODE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TenantOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TenantOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TenantOrderField %T must be a string", v)
	}
	switch str {
	case "ID":
		*f = *TenantOrderFieldID
	case "CODE":
		*f = *TenantOrderFieldCode
	default:
		return fmt.Errorf("%s is not a valid TenantOrderField", str)
	}
	return nil
}

// TenantOrderField defines the ordering field of Tenant.
type TenantOrderField struct {
	// Value extracts the ordering value from the given Tenant.
	Value    func(*Tenant) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) tenant.OrderOption
	toCursor func(*Tenant) Cursor
}

// TenantOrder defines the ordering of Tenant.
type TenantOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *TenantOrderField `json:"field"`
}

// DefaultTenantOrder is the default ordering of Tenant.
var DefaultTenantOrder = &TenantOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TenantOrderField{
		Value: func(_m *Tenant) (ent.Value, error) {
			return _m.ID, nil
		},
		column: tenant.FieldID,
		toTerm: tenant.ByID,
		toCursor: func(_m *Tenant) Cursor {
			return Cursor{ID: _m.ID}
		},
	},
}

// ToEdge converts Tenant into TenantEdge.
func (_m *Tenant) ToEdge(order *TenantOrder) *TenantEdge {
	if order == nil {
		order = DefaultTenantOrder
	}
	return &TenantEdge{
		Node:   _m,
		Cursor: order.Field.toCursor(_m),
	}
}
