// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-sample/internal/ent/company"
	"github.com/jp-ryuji/go-sample/internal/ent/predicate"
	"github.com/jp-ryuji/go-sample/internal/ent/renter"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
)

// CompanyUpdate is the builder for updating Company entities.
type CompanyUpdate struct {
	config
	hooks    []Hook
	mutation *CompanyMutation
}

// Where appends a list predicates to the CompanyUpdate builder.
func (_u *CompanyUpdate) Where(ps ...predicate.Company) *CompanyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *CompanyUpdate) SetName(v string) *CompanyUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CompanyUpdate) SetNillableName(v *string) *CompanyUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCompanySize sets the "company_size" field.
func (_u *CompanyUpdate) SetCompanySize(v string) *CompanyUpdate {
	_u.mutation.SetCompanySize(v)
	return _u
}

// SetNillableCompanySize sets the "company_size" field if the given value is not nil.
func (_u *CompanyUpdate) SetNillableCompanySize(v *string) *CompanyUpdate {
	if v != nil {
		_u.SetCompanySize(*v)
	}
	return _u
}

// ClearCompanySize clears the value of the "company_size" field.
func (_u *CompanyUpdate) ClearCompanySize() *CompanyUpdate {
	_u.mutation.ClearCompanySize()
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *CompanyUpdate) SetTenantID(v string) *CompanyUpdate {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *CompanyUpdate) SetNillableTenantID(v *string) *CompanyUpdate {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *CompanyUpdate) SetTenant(v *Tenant) *CompanyUpdate {
	return _u.SetTenantID(v.ID)
}

// AddRenterIDs adds the "renters" edge to the Renter entity by IDs.
func (_u *CompanyUpdate) AddRenterIDs(ids ...string) *CompanyUpdate {
	_u.mutation.AddRenterIDs(ids...)
	return _u
}

// AddRenters adds the "renters" edges to the Renter entity.
func (_u *CompanyUpdate) AddRenters(v ...*Renter) *CompanyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRenterIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (_u *CompanyUpdate) Mutation() *CompanyMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *CompanyUpdate) ClearTenant() *CompanyUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// ClearRenters clears all "renters" edges to the Renter entity.
func (_u *CompanyUpdate) ClearRenters() *CompanyUpdate {
	_u.mutation.ClearRenters()
	return _u
}

// RemoveRenterIDs removes the "renters" edge to Renter entities by IDs.
func (_u *CompanyUpdate) RemoveRenterIDs(ids ...string) *CompanyUpdate {
	_u.mutation.RemoveRenterIDs(ids...)
	return _u
}

// RemoveRenters removes "renters" edges to Renter entities.
func (_u *CompanyUpdate) RemoveRenters(v ...*Renter) *CompanyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRenterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CompanyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CompanyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CompanyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CompanyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CompanyUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Company.tenant"`)
	}
	return nil
}

func (_u *CompanyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.CompanySize(); ok {
		_spec.SetField(company.FieldCompanySize, field.TypeString, value)
	}
	if _u.mutation.CompanySizeCleared() {
		_spec.ClearField(company.FieldCompanySize, field.TypeString)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   company.TenantTable,
			Columns: []string{company.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   company.TenantTable,
			Columns: []string{company.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   company.RentersTable,
			Columns: []string{company.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentersIDs(); len(nodes) > 0 && !_u.mutation.RentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   company.RentersTable,
			Columns: []string{company.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   company.RentersTable,
			Columns: []string{company.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CompanyUpdateOne is the builder for updating a single Company entity.
type CompanyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CompanyMutation
}

// SetName sets the "name" field.
func (_u *CompanyUpdateOne) SetName(v string) *CompanyUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CompanyUpdateOne) SetNillableName(v *string) *CompanyUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetCompanySize sets the "company_size" field.
func (_u *CompanyUpdateOne) SetCompanySize(v string) *CompanyUpdateOne {
	_u.mutation.SetCompanySize(v)
	return _u
}

// SetNillableCompanySize sets the "company_size" field if the given value is not nil.
func (_u *CompanyUpdateOne) SetNillableCompanySize(v *string) *CompanyUpdateOne {
	if v != nil {
		_u.SetCompanySize(*v)
	}
	return _u
}

// ClearCompanySize clears the value of the "company_size" field.
func (_u *CompanyUpdateOne) ClearCompanySize() *CompanyUpdateOne {
	_u.mutation.ClearCompanySize()
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *CompanyUpdateOne) SetTenantID(v string) *CompanyUpdateOne {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *CompanyUpdateOne) SetNillableTenantID(v *string) *CompanyUpdateOne {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *CompanyUpdateOne) SetTenant(v *Tenant) *CompanyUpdateOne {
	return _u.SetTenantID(v.ID)
}

// AddRenterIDs adds the "renters" edge to the Renter entity by IDs.
func (_u *CompanyUpdateOne) AddRenterIDs(ids ...string) *CompanyUpdateOne {
	_u.mutation.AddRenterIDs(ids...)
	return _u
}

// AddRenters adds the "renters" edges to the Renter entity.
func (_u *CompanyUpdateOne) AddRenters(v ...*Renter) *CompanyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRenterIDs(ids...)
}

// Mutation returns the CompanyMutation object of the builder.
func (_u *CompanyUpdateOne) Mutation() *CompanyMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *CompanyUpdateOne) ClearTenant() *CompanyUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// ClearRenters clears all "renters" edges to the Renter entity.
func (_u *CompanyUpdateOne) ClearRenters() *CompanyUpdateOne {
	_u.mutation.ClearRenters()
	return _u
}

// RemoveRenterIDs removes the "renters" edge to Renter entities by IDs.
func (_u *CompanyUpdateOne) RemoveRenterIDs(ids ...string) *CompanyUpdateOne {
	_u.mutation.RemoveRenterIDs(ids...)
	return _u
}

// RemoveRenters removes "renters" edges to Renter entities.
func (_u *CompanyUpdateOne) RemoveRenters(v ...*Renter) *CompanyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRenterIDs(ids...)
}

// Where appends a list predicates to the CompanyUpdate builder.
func (_u *CompanyUpdateOne) Where(ps ...predicate.Company) *CompanyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CompanyUpdateOne) Select(field string, fields ...string) *CompanyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Company entity.
func (_u *CompanyUpdateOne) Save(ctx context.Context) (*Company, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CompanyUpdateOne) SaveX(ctx context.Context) *Company {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CompanyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CompanyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CompanyUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := company.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Company.name": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Company.tenant"`)
	}
	return nil
}

func (_u *CompanyUpdateOne) sqlSave(ctx context.Context) (_node *Company, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(company.Table, company.Columns, sqlgraph.NewFieldSpec(company.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Company.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, company.FieldID)
		for _, f := range fields {
			if !company.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != company.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(company.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.CompanySize(); ok {
		_spec.SetField(company.FieldCompanySize, field.TypeString, value)
	}
	if _u.mutation.CompanySizeCleared() {
		_spec.ClearField(company.FieldCompanySize, field.TypeString)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   company.TenantTable,
			Columns: []string{company.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   company.TenantTable,
			Columns: []string{company.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   company.RentersTable,
			Columns: []string{company.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentersIDs(); len(nodes) > 0 && !_u.mutation.RentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   company.RentersTable,
			Columns: []string{company.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   company.RentersTable,
			Columns: []string{company.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Company{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{company.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
