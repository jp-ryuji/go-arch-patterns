// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-sample/internal/ent/car"
	"github.com/jp-ryuji/go-sample/internal/ent/rental"
	"github.com/jp-ryuji/go-sample/internal/ent/rentaloption"
	"github.com/jp-ryuji/go-sample/internal/ent/renter"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
)

// RentalCreate is the builder for creating a Rental entity.
type RentalCreate struct {
	config
	mutation *RentalMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStartsAt sets the "starts_at" field.
func (_c *RentalCreate) SetStartsAt(v time.Time) *RentalCreate {
	_c.mutation.SetStartsAt(v)
	return _c
}

// SetEndsAt sets the "ends_at" field.
func (_c *RentalCreate) SetEndsAt(v time.Time) *RentalCreate {
	_c.mutation.SetEndsAt(v)
	return _c
}

// SetCarID sets the "car_id" field.
func (_c *RentalCreate) SetCarID(v string) *RentalCreate {
	_c.mutation.SetCarID(v)
	return _c
}

// SetRenterID sets the "renter_id" field.
func (_c *RentalCreate) SetRenterID(v string) *RentalCreate {
	_c.mutation.SetRenterID(v)
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *RentalCreate) SetTenantID(v string) *RentalCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *RentalCreate) SetID(v string) *RentalCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_c *RentalCreate) SetTenant(v *Tenant) *RentalCreate {
	return _c.SetTenantID(v.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (_c *RentalCreate) SetCar(v *Car) *RentalCreate {
	return _c.SetCarID(v.ID)
}

// SetRenter sets the "renter" edge to the Renter entity.
func (_c *RentalCreate) SetRenter(v *Renter) *RentalCreate {
	return _c.SetRenterID(v.ID)
}

// AddRentalOptionIDs adds the "rental_options" edge to the RentalOption entity by IDs.
func (_c *RentalCreate) AddRentalOptionIDs(ids ...string) *RentalCreate {
	_c.mutation.AddRentalOptionIDs(ids...)
	return _c
}

// AddRentalOptions adds the "rental_options" edges to the RentalOption entity.
func (_c *RentalCreate) AddRentalOptions(v ...*RentalOption) *RentalCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRentalOptionIDs(ids...)
}

// Mutation returns the RentalMutation object of the builder.
func (_c *RentalCreate) Mutation() *RentalMutation {
	return _c.mutation
}

// Save creates the Rental in the database.
func (_c *RentalCreate) Save(ctx context.Context) (*Rental, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RentalCreate) SaveX(ctx context.Context) *Rental {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RentalCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RentalCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RentalCreate) check() error {
	if _, ok := _c.mutation.StartsAt(); !ok {
		return &ValidationError{Name: "starts_at", err: errors.New(`ent: missing required field "Rental.starts_at"`)}
	}
	if _, ok := _c.mutation.EndsAt(); !ok {
		return &ValidationError{Name: "ends_at", err: errors.New(`ent: missing required field "Rental.ends_at"`)}
	}
	if _, ok := _c.mutation.CarID(); !ok {
		return &ValidationError{Name: "car_id", err: errors.New(`ent: missing required field "Rental.car_id"`)}
	}
	if _, ok := _c.mutation.RenterID(); !ok {
		return &ValidationError{Name: "renter_id", err: errors.New(`ent: missing required field "Rental.renter_id"`)}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Rental.tenant_id"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := rental.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Rental.id": %w`, err)}
		}
	}
	if len(_c.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Rental.tenant"`)}
	}
	if len(_c.mutation.CarIDs()) == 0 {
		return &ValidationError{Name: "car", err: errors.New(`ent: missing required edge "Rental.car"`)}
	}
	if len(_c.mutation.RenterIDs()) == 0 {
		return &ValidationError{Name: "renter", err: errors.New(`ent: missing required edge "Rental.renter"`)}
	}
	return nil
}

func (_c *RentalCreate) sqlSave(ctx context.Context) (*Rental, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Rental.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RentalCreate) createSpec() (*Rental, *sqlgraph.CreateSpec) {
	var (
		_node = &Rental{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(rental.Table, sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.StartsAt(); ok {
		_spec.SetField(rental.FieldStartsAt, field.TypeTime, value)
		_node.StartsAt = value
	}
	if value, ok := _c.mutation.EndsAt(); ok {
		_spec.SetField(rental.FieldEndsAt, field.TypeTime, value)
		_node.EndsAt = value
	}
	if nodes := _c.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.TenantTable,
			Columns: []string{rental.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.CarTable,
			Columns: []string{rental.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CarID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.RenterTable,
			Columns: []string{rental.RenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RenterID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RentalOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rental.RentalOptionsTable,
			Columns: []string{rental.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rental.Create().
//		SetStartsAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RentalUpsert) {
//			SetStartsAt(v+v).
//		}).
//		Exec(ctx)
func (_c *RentalCreate) OnConflict(opts ...sql.ConflictOption) *RentalUpsertOne {
	_c.conflict = opts
	return &RentalUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RentalCreate) OnConflictColumns(columns ...string) *RentalUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RentalUpsertOne{
		create: _c,
	}
}

type (
	// RentalUpsertOne is the builder for "upsert"-ing
	//  one Rental node.
	RentalUpsertOne struct {
		create *RentalCreate
	}

	// RentalUpsert is the "OnConflict" setter.
	RentalUpsert struct {
		*sql.UpdateSet
	}
)

// SetStartsAt sets the "starts_at" field.
func (u *RentalUpsert) SetStartsAt(v time.Time) *RentalUpsert {
	u.Set(rental.FieldStartsAt, v)
	return u
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *RentalUpsert) UpdateStartsAt() *RentalUpsert {
	u.SetExcluded(rental.FieldStartsAt)
	return u
}

// SetEndsAt sets the "ends_at" field.
func (u *RentalUpsert) SetEndsAt(v time.Time) *RentalUpsert {
	u.Set(rental.FieldEndsAt, v)
	return u
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *RentalUpsert) UpdateEndsAt() *RentalUpsert {
	u.SetExcluded(rental.FieldEndsAt)
	return u
}

// SetCarID sets the "car_id" field.
func (u *RentalUpsert) SetCarID(v string) *RentalUpsert {
	u.Set(rental.FieldCarID, v)
	return u
}

// UpdateCarID sets the "car_id" field to the value that was provided on create.
func (u *RentalUpsert) UpdateCarID() *RentalUpsert {
	u.SetExcluded(rental.FieldCarID)
	return u
}

// SetRenterID sets the "renter_id" field.
func (u *RentalUpsert) SetRenterID(v string) *RentalUpsert {
	u.Set(rental.FieldRenterID, v)
	return u
}

// UpdateRenterID sets the "renter_id" field to the value that was provided on create.
func (u *RentalUpsert) UpdateRenterID() *RentalUpsert {
	u.SetExcluded(rental.FieldRenterID)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *RentalUpsert) SetTenantID(v string) *RentalUpsert {
	u.Set(rental.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *RentalUpsert) UpdateTenantID() *RentalUpsert {
	u.SetExcluded(rental.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Rental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rental.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RentalUpsertOne) UpdateNewValues() *RentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(rental.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rental.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RentalUpsertOne) Ignore() *RentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RentalUpsertOne) DoNothing() *RentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RentalCreate.OnConflict
// documentation for more info.
func (u *RentalUpsertOne) Update(set func(*RentalUpsert)) *RentalUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetStartsAt sets the "starts_at" field.
func (u *RentalUpsertOne) SetStartsAt(v time.Time) *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.SetStartsAt(v)
	})
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *RentalUpsertOne) UpdateStartsAt() *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateStartsAt()
	})
}

// SetEndsAt sets the "ends_at" field.
func (u *RentalUpsertOne) SetEndsAt(v time.Time) *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.SetEndsAt(v)
	})
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *RentalUpsertOne) UpdateEndsAt() *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateEndsAt()
	})
}

// SetCarID sets the "car_id" field.
func (u *RentalUpsertOne) SetCarID(v string) *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.SetCarID(v)
	})
}

// UpdateCarID sets the "car_id" field to the value that was provided on create.
func (u *RentalUpsertOne) UpdateCarID() *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateCarID()
	})
}

// SetRenterID sets the "renter_id" field.
func (u *RentalUpsertOne) SetRenterID(v string) *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.SetRenterID(v)
	})
}

// UpdateRenterID sets the "renter_id" field to the value that was provided on create.
func (u *RentalUpsertOne) UpdateRenterID() *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateRenterID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *RentalUpsertOne) SetTenantID(v string) *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *RentalUpsertOne) UpdateTenantID() *RentalUpsertOne {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *RentalUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RentalCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RentalUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RentalUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RentalUpsertOne.ID is not supported by MySQL driver. Use RentalUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RentalUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RentalCreateBulk is the builder for creating many Rental entities in bulk.
type RentalCreateBulk struct {
	config
	err      error
	builders []*RentalCreate
	conflict []sql.ConflictOption
}

// Save creates the Rental entities in the database.
func (_c *RentalCreateBulk) Save(ctx context.Context) ([]*Rental, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Rental, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RentalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RentalCreateBulk) SaveX(ctx context.Context) []*Rental {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RentalCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RentalCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rental.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RentalUpsert) {
//			SetStartsAt(v+v).
//		}).
//		Exec(ctx)
func (_c *RentalCreateBulk) OnConflict(opts ...sql.ConflictOption) *RentalUpsertBulk {
	_c.conflict = opts
	return &RentalUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rental.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RentalCreateBulk) OnConflictColumns(columns ...string) *RentalUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RentalUpsertBulk{
		create: _c,
	}
}

// RentalUpsertBulk is the builder for "upsert"-ing
// a bulk of Rental nodes.
type RentalUpsertBulk struct {
	create *RentalCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Rental.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(rental.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RentalUpsertBulk) UpdateNewValues() *RentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(rental.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rental.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RentalUpsertBulk) Ignore() *RentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RentalUpsertBulk) DoNothing() *RentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RentalCreateBulk.OnConflict
// documentation for more info.
func (u *RentalUpsertBulk) Update(set func(*RentalUpsert)) *RentalUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RentalUpsert{UpdateSet: update})
	}))
	return u
}

// SetStartsAt sets the "starts_at" field.
func (u *RentalUpsertBulk) SetStartsAt(v time.Time) *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.SetStartsAt(v)
	})
}

// UpdateStartsAt sets the "starts_at" field to the value that was provided on create.
func (u *RentalUpsertBulk) UpdateStartsAt() *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateStartsAt()
	})
}

// SetEndsAt sets the "ends_at" field.
func (u *RentalUpsertBulk) SetEndsAt(v time.Time) *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.SetEndsAt(v)
	})
}

// UpdateEndsAt sets the "ends_at" field to the value that was provided on create.
func (u *RentalUpsertBulk) UpdateEndsAt() *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateEndsAt()
	})
}

// SetCarID sets the "car_id" field.
func (u *RentalUpsertBulk) SetCarID(v string) *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.SetCarID(v)
	})
}

// UpdateCarID sets the "car_id" field to the value that was provided on create.
func (u *RentalUpsertBulk) UpdateCarID() *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateCarID()
	})
}

// SetRenterID sets the "renter_id" field.
func (u *RentalUpsertBulk) SetRenterID(v string) *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.SetRenterID(v)
	})
}

// UpdateRenterID sets the "renter_id" field to the value that was provided on create.
func (u *RentalUpsertBulk) UpdateRenterID() *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateRenterID()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *RentalUpsertBulk) SetTenantID(v string) *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *RentalUpsertBulk) UpdateTenantID() *RentalUpsertBulk {
	return u.Update(func(s *RentalUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *RentalUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RentalCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RentalCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RentalUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
