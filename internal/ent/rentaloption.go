// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jp-ryuji/go-sample/internal/ent/caroption"
	"github.com/jp-ryuji/go-sample/internal/ent/rental"
	"github.com/jp-ryuji/go-sample/internal/ent/rentaloption"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
)

// RentalOption is the model entity for the RentalOption schema.
type RentalOption struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Count holds the value of the "count" field.
	Count int `json:"count,omitempty"`
	// RentalID holds the value of the "rental_id" field.
	RentalID string `json:"rental_id,omitempty"`
	// OptionID holds the value of the "option_id" field.
	OptionID string `json:"option_id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RentalOptionQuery when eager-loading is set.
	Edges        RentalOptionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RentalOptionEdges holds the relations/edges for other nodes in the graph.
type RentalOptionEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Rental holds the value of the rental edge.
	Rental *Rental `json:"rental,omitempty"`
	// Option holds the value of the option edge.
	Option *CarOption `json:"option,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentalOptionEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RentalOrErr returns the Rental value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentalOptionEdges) RentalOrErr() (*Rental, error) {
	if e.Rental != nil {
		return e.Rental, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: rental.Label}
	}
	return nil, &NotLoadedError{edge: "rental"}
}

// OptionOrErr returns the Option value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentalOptionEdges) OptionOrErr() (*CarOption, error) {
	if e.Option != nil {
		return e.Option, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: caroption.Label}
	}
	return nil, &NotLoadedError{edge: "option"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RentalOption) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rentaloption.FieldCount:
			values[i] = new(sql.NullInt64)
		case rentaloption.FieldID, rentaloption.FieldRentalID, rentaloption.FieldOptionID, rentaloption.FieldTenantID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RentalOption fields.
func (_m *RentalOption) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rentaloption.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case rentaloption.FieldCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field count", values[i])
			} else if value.Valid {
				_m.Count = int(value.Int64)
			}
		case rentaloption.FieldRentalID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rental_id", values[i])
			} else if value.Valid {
				_m.RentalID = value.String
			}
		case rentaloption.FieldOptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field option_id", values[i])
			} else if value.Valid {
				_m.OptionID = value.String
			}
		case rentaloption.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RentalOption.
// This includes values selected through modifiers, order, etc.
func (_m *RentalOption) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the RentalOption entity.
func (_m *RentalOption) QueryTenant() *TenantQuery {
	return NewRentalOptionClient(_m.config).QueryTenant(_m)
}

// QueryRental queries the "rental" edge of the RentalOption entity.
func (_m *RentalOption) QueryRental() *RentalQuery {
	return NewRentalOptionClient(_m.config).QueryRental(_m)
}

// QueryOption queries the "option" edge of the RentalOption entity.
func (_m *RentalOption) QueryOption() *CarOptionQuery {
	return NewRentalOptionClient(_m.config).QueryOption(_m)
}

// Update returns a builder for updating this RentalOption.
// Note that you need to call RentalOption.Unwrap() before calling this method if this RentalOption
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *RentalOption) Update() *RentalOptionUpdateOne {
	return NewRentalOptionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the RentalOption entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *RentalOption) Unwrap() *RentalOption {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: RentalOption is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *RentalOption) String() string {
	var builder strings.Builder
	builder.WriteString("RentalOption(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("count=")
	builder.WriteString(fmt.Sprintf("%v", _m.Count))
	builder.WriteString(", ")
	builder.WriteString("rental_id=")
	builder.WriteString(_m.RentalID)
	builder.WriteString(", ")
	builder.WriteString("option_id=")
	builder.WriteString(_m.OptionID)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteByte(')')
	return builder.String()
}

// RentalOptions is a parsable slice of RentalOption.
type RentalOptions []*RentalOption
