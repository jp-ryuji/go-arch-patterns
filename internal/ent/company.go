// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jp-ryuji/go-sample/internal/ent/company"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
)

// Company is the model entity for the Company schema.
type Company struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CompanySize holds the value of the "company_size" field.
	CompanySize string `json:"company_size,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CompanyQuery when eager-loading is set.
	Edges        CompanyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CompanyEdges holds the relations/edges for other nodes in the graph.
type CompanyEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Renters holds the value of the renters edge.
	Renters []*Renter `json:"renters,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedRenters map[string][]*Renter
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CompanyEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RentersOrErr returns the Renters value or an error if the edge
// was not loaded in eager-loading.
func (e CompanyEdges) RentersOrErr() ([]*Renter, error) {
	if e.loadedTypes[1] {
		return e.Renters, nil
	}
	return nil, &NotLoadedError{edge: "renters"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Company) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case company.FieldID, company.FieldName, company.FieldCompanySize, company.FieldTenantID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Company fields.
func (_m *Company) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case company.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case company.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case company.FieldCompanySize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_size", values[i])
			} else if value.Valid {
				_m.CompanySize = value.String
			}
		case company.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Company.
// This includes values selected through modifiers, order, etc.
func (_m *Company) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Company entity.
func (_m *Company) QueryTenant() *TenantQuery {
	return NewCompanyClient(_m.config).QueryTenant(_m)
}

// QueryRenters queries the "renters" edge of the Company entity.
func (_m *Company) QueryRenters() *RenterQuery {
	return NewCompanyClient(_m.config).QueryRenters(_m)
}

// Update returns a builder for updating this Company.
// Note that you need to call Company.Unwrap() before calling this method if this Company
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Company) Update() *CompanyUpdateOne {
	return NewCompanyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Company entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Company) Unwrap() *Company {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Company is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Company) String() string {
	var builder strings.Builder
	builder.WriteString("Company(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("company_size=")
	builder.WriteString(_m.CompanySize)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedRenters returns the Renters named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Company) NamedRenters(name string) ([]*Renter, error) {
	if _m.Edges.namedRenters == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedRenters[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Company) appendNamedRenters(name string, edges ...*Renter) {
	if _m.Edges.namedRenters == nil {
		_m.Edges.namedRenters = make(map[string][]*Renter)
	}
	if len(edges) == 0 {
		_m.Edges.namedRenters[name] = []*Renter{}
	} else {
		_m.Edges.namedRenters[name] = append(_m.Edges.namedRenters[name], edges...)
	}
}

// Companies is a parsable slice of Company.
type Companies []*Company
