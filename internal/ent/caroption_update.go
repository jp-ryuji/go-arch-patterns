// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-sample/internal/ent/caroption"
	"github.com/jp-ryuji/go-sample/internal/ent/predicate"
	"github.com/jp-ryuji/go-sample/internal/ent/rentaloption"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
)

// CarOptionUpdate is the builder for updating CarOption entities.
type CarOptionUpdate struct {
	config
	hooks    []Hook
	mutation *CarOptionMutation
}

// Where appends a list predicates to the CarOptionUpdate builder.
func (_u *CarOptionUpdate) Where(ps ...predicate.CarOption) *CarOptionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *CarOptionUpdate) SetName(v string) *CarOptionUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CarOptionUpdate) SetNillableName(v *string) *CarOptionUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *CarOptionUpdate) SetTenantID(v string) *CarOptionUpdate {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *CarOptionUpdate) SetNillableTenantID(v *string) *CarOptionUpdate {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *CarOptionUpdate) SetTenant(v *Tenant) *CarOptionUpdate {
	return _u.SetTenantID(v.ID)
}

// AddRentalOptionIDs adds the "rental_options" edge to the RentalOption entity by IDs.
func (_u *CarOptionUpdate) AddRentalOptionIDs(ids ...string) *CarOptionUpdate {
	_u.mutation.AddRentalOptionIDs(ids...)
	return _u
}

// AddRentalOptions adds the "rental_options" edges to the RentalOption entity.
func (_u *CarOptionUpdate) AddRentalOptions(v ...*RentalOption) *CarOptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalOptionIDs(ids...)
}

// Mutation returns the CarOptionMutation object of the builder.
func (_u *CarOptionUpdate) Mutation() *CarOptionMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *CarOptionUpdate) ClearTenant() *CarOptionUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// ClearRentalOptions clears all "rental_options" edges to the RentalOption entity.
func (_u *CarOptionUpdate) ClearRentalOptions() *CarOptionUpdate {
	_u.mutation.ClearRentalOptions()
	return _u
}

// RemoveRentalOptionIDs removes the "rental_options" edge to RentalOption entities by IDs.
func (_u *CarOptionUpdate) RemoveRentalOptionIDs(ids ...string) *CarOptionUpdate {
	_u.mutation.RemoveRentalOptionIDs(ids...)
	return _u
}

// RemoveRentalOptions removes "rental_options" edges to RentalOption entities.
func (_u *CarOptionUpdate) RemoveRentalOptions(v ...*RentalOption) *CarOptionUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CarOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CarOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CarOptionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CarOptionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CarOptionUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := caroption.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CarOption.name": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarOption.tenant"`)
	}
	return nil
}

func (_u *CarOptionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(caroption.Table, caroption.Columns, sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(caroption.FieldName, field.TypeString, value)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   caroption.TenantTable,
			Columns: []string{caroption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   caroption.TenantTable,
			Columns: []string{caroption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   caroption.RentalOptionsTable,
			Columns: []string{caroption.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalOptionsIDs(); len(nodes) > 0 && !_u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   caroption.RentalOptionsTable,
			Columns: []string{caroption.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   caroption.RentalOptionsTable,
			Columns: []string{caroption.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caroption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CarOptionUpdateOne is the builder for updating a single CarOption entity.
type CarOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CarOptionMutation
}

// SetName sets the "name" field.
func (_u *CarOptionUpdateOne) SetName(v string) *CarOptionUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *CarOptionUpdateOne) SetNillableName(v *string) *CarOptionUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *CarOptionUpdateOne) SetTenantID(v string) *CarOptionUpdateOne {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *CarOptionUpdateOne) SetNillableTenantID(v *string) *CarOptionUpdateOne {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *CarOptionUpdateOne) SetTenant(v *Tenant) *CarOptionUpdateOne {
	return _u.SetTenantID(v.ID)
}

// AddRentalOptionIDs adds the "rental_options" edge to the RentalOption entity by IDs.
func (_u *CarOptionUpdateOne) AddRentalOptionIDs(ids ...string) *CarOptionUpdateOne {
	_u.mutation.AddRentalOptionIDs(ids...)
	return _u
}

// AddRentalOptions adds the "rental_options" edges to the RentalOption entity.
func (_u *CarOptionUpdateOne) AddRentalOptions(v ...*RentalOption) *CarOptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalOptionIDs(ids...)
}

// Mutation returns the CarOptionMutation object of the builder.
func (_u *CarOptionUpdateOne) Mutation() *CarOptionMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *CarOptionUpdateOne) ClearTenant() *CarOptionUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// ClearRentalOptions clears all "rental_options" edges to the RentalOption entity.
func (_u *CarOptionUpdateOne) ClearRentalOptions() *CarOptionUpdateOne {
	_u.mutation.ClearRentalOptions()
	return _u
}

// RemoveRentalOptionIDs removes the "rental_options" edge to RentalOption entities by IDs.
func (_u *CarOptionUpdateOne) RemoveRentalOptionIDs(ids ...string) *CarOptionUpdateOne {
	_u.mutation.RemoveRentalOptionIDs(ids...)
	return _u
}

// RemoveRentalOptions removes "rental_options" edges to RentalOption entities.
func (_u *CarOptionUpdateOne) RemoveRentalOptions(v ...*RentalOption) *CarOptionUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalOptionIDs(ids...)
}

// Where appends a list predicates to the CarOptionUpdate builder.
func (_u *CarOptionUpdateOne) Where(ps ...predicate.CarOption) *CarOptionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CarOptionUpdateOne) Select(field string, fields ...string) *CarOptionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CarOption entity.
func (_u *CarOptionUpdateOne) Save(ctx context.Context) (*CarOption, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CarOptionUpdateOne) SaveX(ctx context.Context) *CarOption {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CarOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CarOptionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *CarOptionUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := caroption.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "CarOption.name": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "CarOption.tenant"`)
	}
	return nil
}

func (_u *CarOptionUpdateOne) sqlSave(ctx context.Context) (_node *CarOption, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(caroption.Table, caroption.Columns, sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CarOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, caroption.FieldID)
		for _, f := range fields {
			if !caroption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != caroption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(caroption.FieldName, field.TypeString, value)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   caroption.TenantTable,
			Columns: []string{caroption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   caroption.TenantTable,
			Columns: []string{caroption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   caroption.RentalOptionsTable,
			Columns: []string{caroption.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalOptionsIDs(); len(nodes) > 0 && !_u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   caroption.RentalOptionsTable,
			Columns: []string{caroption.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   caroption.RentalOptionsTable,
			Columns: []string{caroption.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CarOption{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{caroption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
