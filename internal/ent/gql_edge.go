// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (_m *Car) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Car) Rentals(ctx context.Context) (result []*Rental, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedRentals(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RentalsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryRentals().All(ctx)
	}
	return result, err
}

func (_m *CarOption) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *CarOption) RentalOptions(ctx context.Context) (result []*RentalOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedRentalOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RentalOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryRentalOptions().All(ctx)
	}
	return result, err
}

func (_m *Company) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Company) Renters(ctx context.Context) (result []*Renter, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedRenters(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RentersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryRenters().All(ctx)
	}
	return result, err
}

func (_m *Individual) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Individual) Renters(ctx context.Context) (result []*Renter, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedRenters(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RentersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryRenters().All(ctx)
	}
	return result, err
}

func (_m *Rental) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Rental) Car(ctx context.Context) (*Car, error) {
	result, err := _m.Edges.CarOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryCar().Only(ctx)
	}
	return result, err
}

func (_m *Rental) Renter(ctx context.Context) (*Renter, error) {
	result, err := _m.Edges.RenterOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryRenter().Only(ctx)
	}
	return result, err
}

func (_m *Rental) RentalOptions(ctx context.Context) (result []*RentalOption, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedRentalOptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RentalOptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryRentalOptions().All(ctx)
	}
	return result, err
}

func (_m *RentalOption) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *RentalOption) Rental(ctx context.Context) (*Rental, error) {
	result, err := _m.Edges.RentalOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryRental().Only(ctx)
	}
	return result, err
}

func (_m *RentalOption) Option(ctx context.Context) (*CarOption, error) {
	result, err := _m.Edges.OptionOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryOption().Only(ctx)
	}
	return result, err
}

func (_m *Renter) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := _m.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryTenant().Only(ctx)
	}
	return result, err
}

func (_m *Renter) Rentals(ctx context.Context) (result []*Rental, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = _m.NamedRentals(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = _m.Edges.RentalsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = _m.QueryRentals().All(ctx)
	}
	return result, err
}

func (_m *Renter) Company(ctx context.Context) (*Company, error) {
	result, err := _m.Edges.CompanyOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryCompany().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (_m *Renter) Individual(ctx context.Context) (*Individual, error) {
	result, err := _m.Edges.IndividualOrErr()
	if IsNotLoaded(err) {
		result, err = _m.QueryIndividual().Only(ctx)
	}
	return result, MaskNotFound(err)
}
