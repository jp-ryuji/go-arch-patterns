// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-sample/internal/ent/company"
	"github.com/jp-ryuji/go-sample/internal/ent/individual"
	"github.com/jp-ryuji/go-sample/internal/ent/rental"
	"github.com/jp-ryuji/go-sample/internal/ent/renter"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
)

// RenterCreate is the builder for creating a Renter entity.
type RenterCreate struct {
	config
	mutation *RenterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetRenterEntityID sets the "renter_entity_id" field.
func (_c *RenterCreate) SetRenterEntityID(v string) *RenterCreate {
	_c.mutation.SetRenterEntityID(v)
	return _c
}

// SetNillableRenterEntityID sets the "renter_entity_id" field if the given value is not nil.
func (_c *RenterCreate) SetNillableRenterEntityID(v *string) *RenterCreate {
	if v != nil {
		_c.SetRenterEntityID(*v)
	}
	return _c
}

// SetRenterEntityType sets the "renter_entity_type" field.
func (_c *RenterCreate) SetRenterEntityType(v string) *RenterCreate {
	_c.mutation.SetRenterEntityType(v)
	return _c
}

// SetNillableRenterEntityType sets the "renter_entity_type" field if the given value is not nil.
func (_c *RenterCreate) SetNillableRenterEntityType(v *string) *RenterCreate {
	if v != nil {
		_c.SetRenterEntityType(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *RenterCreate) SetTenantID(v string) *RenterCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *RenterCreate) SetID(v string) *RenterCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_c *RenterCreate) SetTenant(v *Tenant) *RenterCreate {
	return _c.SetTenantID(v.ID)
}

// AddRentalIDs adds the "rentals" edge to the Rental entity by IDs.
func (_c *RenterCreate) AddRentalIDs(ids ...string) *RenterCreate {
	_c.mutation.AddRentalIDs(ids...)
	return _c
}

// AddRentals adds the "rentals" edges to the Rental entity.
func (_c *RenterCreate) AddRentals(v ...*Rental) *RenterCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRentalIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (_c *RenterCreate) SetCompanyID(id string) *RenterCreate {
	_c.mutation.SetCompanyID(id)
	return _c
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (_c *RenterCreate) SetNillableCompanyID(id *string) *RenterCreate {
	if id != nil {
		_c = _c.SetCompanyID(*id)
	}
	return _c
}

// SetCompany sets the "company" edge to the Company entity.
func (_c *RenterCreate) SetCompany(v *Company) *RenterCreate {
	return _c.SetCompanyID(v.ID)
}

// SetIndividualID sets the "individual" edge to the Individual entity by ID.
func (_c *RenterCreate) SetIndividualID(id string) *RenterCreate {
	_c.mutation.SetIndividualID(id)
	return _c
}

// SetNillableIndividualID sets the "individual" edge to the Individual entity by ID if the given value is not nil.
func (_c *RenterCreate) SetNillableIndividualID(id *string) *RenterCreate {
	if id != nil {
		_c = _c.SetIndividualID(*id)
	}
	return _c
}

// SetIndividual sets the "individual" edge to the Individual entity.
func (_c *RenterCreate) SetIndividual(v *Individual) *RenterCreate {
	return _c.SetIndividualID(v.ID)
}

// Mutation returns the RenterMutation object of the builder.
func (_c *RenterCreate) Mutation() *RenterMutation {
	return _c.mutation
}

// Save creates the Renter in the database.
func (_c *RenterCreate) Save(ctx context.Context) (*Renter, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RenterCreate) SaveX(ctx context.Context) *Renter {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RenterCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RenterCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RenterCreate) check() error {
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "Renter.tenant_id"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := renter.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Renter.id": %w`, err)}
		}
	}
	if len(_c.mutation.TenantIDs()) == 0 {
		return &ValidationError{Name: "tenant", err: errors.New(`ent: missing required edge "Renter.tenant"`)}
	}
	return nil
}

func (_c *RenterCreate) sqlSave(ctx context.Context) (*Renter, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Renter.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RenterCreate) createSpec() (*Renter, *sqlgraph.CreateSpec) {
	var (
		_node = &Renter{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(renter.Table, sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.RenterEntityType(); ok {
		_spec.SetField(renter.FieldRenterEntityType, field.TypeString, value)
		_node.RenterEntityType = value
	}
	if nodes := _c.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.TenantTable,
			Columns: []string{renter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TenantID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RentalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   renter.RentalsTable,
			Columns: []string{renter.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.CompanyTable,
			Columns: []string{renter.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RenterEntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.IndividualIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.IndividualTable,
			Columns: []string{renter.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RenterEntityID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Renter.Create().
//		SetRenterEntityID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RenterUpsert) {
//			SetRenterEntityID(v+v).
//		}).
//		Exec(ctx)
func (_c *RenterCreate) OnConflict(opts ...sql.ConflictOption) *RenterUpsertOne {
	_c.conflict = opts
	return &RenterUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Renter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RenterCreate) OnConflictColumns(columns ...string) *RenterUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RenterUpsertOne{
		create: _c,
	}
}

type (
	// RenterUpsertOne is the builder for "upsert"-ing
	//  one Renter node.
	RenterUpsertOne struct {
		create *RenterCreate
	}

	// RenterUpsert is the "OnConflict" setter.
	RenterUpsert struct {
		*sql.UpdateSet
	}
)

// SetRenterEntityID sets the "renter_entity_id" field.
func (u *RenterUpsert) SetRenterEntityID(v string) *RenterUpsert {
	u.Set(renter.FieldRenterEntityID, v)
	return u
}

// UpdateRenterEntityID sets the "renter_entity_id" field to the value that was provided on create.
func (u *RenterUpsert) UpdateRenterEntityID() *RenterUpsert {
	u.SetExcluded(renter.FieldRenterEntityID)
	return u
}

// ClearRenterEntityID clears the value of the "renter_entity_id" field.
func (u *RenterUpsert) ClearRenterEntityID() *RenterUpsert {
	u.SetNull(renter.FieldRenterEntityID)
	return u
}

// SetRenterEntityType sets the "renter_entity_type" field.
func (u *RenterUpsert) SetRenterEntityType(v string) *RenterUpsert {
	u.Set(renter.FieldRenterEntityType, v)
	return u
}

// UpdateRenterEntityType sets the "renter_entity_type" field to the value that was provided on create.
func (u *RenterUpsert) UpdateRenterEntityType() *RenterUpsert {
	u.SetExcluded(renter.FieldRenterEntityType)
	return u
}

// ClearRenterEntityType clears the value of the "renter_entity_type" field.
func (u *RenterUpsert) ClearRenterEntityType() *RenterUpsert {
	u.SetNull(renter.FieldRenterEntityType)
	return u
}

// SetTenantID sets the "tenant_id" field.
func (u *RenterUpsert) SetTenantID(v string) *RenterUpsert {
	u.Set(renter.FieldTenantID, v)
	return u
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *RenterUpsert) UpdateTenantID() *RenterUpsert {
	u.SetExcluded(renter.FieldTenantID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Renter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(renter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RenterUpsertOne) UpdateNewValues() *RenterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(renter.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Renter.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RenterUpsertOne) Ignore() *RenterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RenterUpsertOne) DoNothing() *RenterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RenterCreate.OnConflict
// documentation for more info.
func (u *RenterUpsertOne) Update(set func(*RenterUpsert)) *RenterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RenterUpsert{UpdateSet: update})
	}))
	return u
}

// SetRenterEntityID sets the "renter_entity_id" field.
func (u *RenterUpsertOne) SetRenterEntityID(v string) *RenterUpsertOne {
	return u.Update(func(s *RenterUpsert) {
		s.SetRenterEntityID(v)
	})
}

// UpdateRenterEntityID sets the "renter_entity_id" field to the value that was provided on create.
func (u *RenterUpsertOne) UpdateRenterEntityID() *RenterUpsertOne {
	return u.Update(func(s *RenterUpsert) {
		s.UpdateRenterEntityID()
	})
}

// ClearRenterEntityID clears the value of the "renter_entity_id" field.
func (u *RenterUpsertOne) ClearRenterEntityID() *RenterUpsertOne {
	return u.Update(func(s *RenterUpsert) {
		s.ClearRenterEntityID()
	})
}

// SetRenterEntityType sets the "renter_entity_type" field.
func (u *RenterUpsertOne) SetRenterEntityType(v string) *RenterUpsertOne {
	return u.Update(func(s *RenterUpsert) {
		s.SetRenterEntityType(v)
	})
}

// UpdateRenterEntityType sets the "renter_entity_type" field to the value that was provided on create.
func (u *RenterUpsertOne) UpdateRenterEntityType() *RenterUpsertOne {
	return u.Update(func(s *RenterUpsert) {
		s.UpdateRenterEntityType()
	})
}

// ClearRenterEntityType clears the value of the "renter_entity_type" field.
func (u *RenterUpsertOne) ClearRenterEntityType() *RenterUpsertOne {
	return u.Update(func(s *RenterUpsert) {
		s.ClearRenterEntityType()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *RenterUpsertOne) SetTenantID(v string) *RenterUpsertOne {
	return u.Update(func(s *RenterUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *RenterUpsertOne) UpdateTenantID() *RenterUpsertOne {
	return u.Update(func(s *RenterUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *RenterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RenterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RenterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RenterUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: RenterUpsertOne.ID is not supported by MySQL driver. Use RenterUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RenterUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RenterCreateBulk is the builder for creating many Renter entities in bulk.
type RenterCreateBulk struct {
	config
	err      error
	builders []*RenterCreate
	conflict []sql.ConflictOption
}

// Save creates the Renter entities in the database.
func (_c *RenterCreateBulk) Save(ctx context.Context) ([]*Renter, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Renter, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RenterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RenterCreateBulk) SaveX(ctx context.Context) []*Renter {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RenterCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RenterCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Renter.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RenterUpsert) {
//			SetRenterEntityID(v+v).
//		}).
//		Exec(ctx)
func (_c *RenterCreateBulk) OnConflict(opts ...sql.ConflictOption) *RenterUpsertBulk {
	_c.conflict = opts
	return &RenterUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Renter.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *RenterCreateBulk) OnConflictColumns(columns ...string) *RenterUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &RenterUpsertBulk{
		create: _c,
	}
}

// RenterUpsertBulk is the builder for "upsert"-ing
// a bulk of Renter nodes.
type RenterUpsertBulk struct {
	create *RenterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Renter.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(renter.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RenterUpsertBulk) UpdateNewValues() *RenterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(renter.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Renter.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RenterUpsertBulk) Ignore() *RenterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RenterUpsertBulk) DoNothing() *RenterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RenterCreateBulk.OnConflict
// documentation for more info.
func (u *RenterUpsertBulk) Update(set func(*RenterUpsert)) *RenterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RenterUpsert{UpdateSet: update})
	}))
	return u
}

// SetRenterEntityID sets the "renter_entity_id" field.
func (u *RenterUpsertBulk) SetRenterEntityID(v string) *RenterUpsertBulk {
	return u.Update(func(s *RenterUpsert) {
		s.SetRenterEntityID(v)
	})
}

// UpdateRenterEntityID sets the "renter_entity_id" field to the value that was provided on create.
func (u *RenterUpsertBulk) UpdateRenterEntityID() *RenterUpsertBulk {
	return u.Update(func(s *RenterUpsert) {
		s.UpdateRenterEntityID()
	})
}

// ClearRenterEntityID clears the value of the "renter_entity_id" field.
func (u *RenterUpsertBulk) ClearRenterEntityID() *RenterUpsertBulk {
	return u.Update(func(s *RenterUpsert) {
		s.ClearRenterEntityID()
	})
}

// SetRenterEntityType sets the "renter_entity_type" field.
func (u *RenterUpsertBulk) SetRenterEntityType(v string) *RenterUpsertBulk {
	return u.Update(func(s *RenterUpsert) {
		s.SetRenterEntityType(v)
	})
}

// UpdateRenterEntityType sets the "renter_entity_type" field to the value that was provided on create.
func (u *RenterUpsertBulk) UpdateRenterEntityType() *RenterUpsertBulk {
	return u.Update(func(s *RenterUpsert) {
		s.UpdateRenterEntityType()
	})
}

// ClearRenterEntityType clears the value of the "renter_entity_type" field.
func (u *RenterUpsertBulk) ClearRenterEntityType() *RenterUpsertBulk {
	return u.Update(func(s *RenterUpsert) {
		s.ClearRenterEntityType()
	})
}

// SetTenantID sets the "tenant_id" field.
func (u *RenterUpsertBulk) SetTenantID(v string) *RenterUpsertBulk {
	return u.Update(func(s *RenterUpsert) {
		s.SetTenantID(v)
	})
}

// UpdateTenantID sets the "tenant_id" field to the value that was provided on create.
func (u *RenterUpsertBulk) UpdateTenantID() *RenterUpsertBulk {
	return u.Update(func(s *RenterUpsert) {
		s.UpdateTenantID()
	})
}

// Exec executes the query.
func (u *RenterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RenterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RenterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RenterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
