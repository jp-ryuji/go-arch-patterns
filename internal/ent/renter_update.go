// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-sample/internal/ent/company"
	"github.com/jp-ryuji/go-sample/internal/ent/individual"
	"github.com/jp-ryuji/go-sample/internal/ent/predicate"
	"github.com/jp-ryuji/go-sample/internal/ent/rental"
	"github.com/jp-ryuji/go-sample/internal/ent/renter"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
)

// RenterUpdate is the builder for updating Renter entities.
type RenterUpdate struct {
	config
	hooks    []Hook
	mutation *RenterMutation
}

// Where appends a list predicates to the RenterUpdate builder.
func (_u *RenterUpdate) Where(ps ...predicate.Renter) *RenterUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetRenterEntityID sets the "renter_entity_id" field.
func (_u *RenterUpdate) SetRenterEntityID(v string) *RenterUpdate {
	_u.mutation.SetRenterEntityID(v)
	return _u
}

// SetNillableRenterEntityID sets the "renter_entity_id" field if the given value is not nil.
func (_u *RenterUpdate) SetNillableRenterEntityID(v *string) *RenterUpdate {
	if v != nil {
		_u.SetRenterEntityID(*v)
	}
	return _u
}

// ClearRenterEntityID clears the value of the "renter_entity_id" field.
func (_u *RenterUpdate) ClearRenterEntityID() *RenterUpdate {
	_u.mutation.ClearRenterEntityID()
	return _u
}

// SetRenterEntityType sets the "renter_entity_type" field.
func (_u *RenterUpdate) SetRenterEntityType(v string) *RenterUpdate {
	_u.mutation.SetRenterEntityType(v)
	return _u
}

// SetNillableRenterEntityType sets the "renter_entity_type" field if the given value is not nil.
func (_u *RenterUpdate) SetNillableRenterEntityType(v *string) *RenterUpdate {
	if v != nil {
		_u.SetRenterEntityType(*v)
	}
	return _u
}

// ClearRenterEntityType clears the value of the "renter_entity_type" field.
func (_u *RenterUpdate) ClearRenterEntityType() *RenterUpdate {
	_u.mutation.ClearRenterEntityType()
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *RenterUpdate) SetTenantID(v string) *RenterUpdate {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *RenterUpdate) SetNillableTenantID(v *string) *RenterUpdate {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *RenterUpdate) SetTenant(v *Tenant) *RenterUpdate {
	return _u.SetTenantID(v.ID)
}

// AddRentalIDs adds the "rentals" edge to the Rental entity by IDs.
func (_u *RenterUpdate) AddRentalIDs(ids ...string) *RenterUpdate {
	_u.mutation.AddRentalIDs(ids...)
	return _u
}

// AddRentals adds the "rentals" edges to the Rental entity.
func (_u *RenterUpdate) AddRentals(v ...*Rental) *RenterUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (_u *RenterUpdate) SetCompanyID(id string) *RenterUpdate {
	_u.mutation.SetCompanyID(id)
	return _u
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (_u *RenterUpdate) SetNillableCompanyID(id *string) *RenterUpdate {
	if id != nil {
		_u = _u.SetCompanyID(*id)
	}
	return _u
}

// SetCompany sets the "company" edge to the Company entity.
func (_u *RenterUpdate) SetCompany(v *Company) *RenterUpdate {
	return _u.SetCompanyID(v.ID)
}

// SetIndividualID sets the "individual" edge to the Individual entity by ID.
func (_u *RenterUpdate) SetIndividualID(id string) *RenterUpdate {
	_u.mutation.SetIndividualID(id)
	return _u
}

// SetNillableIndividualID sets the "individual" edge to the Individual entity by ID if the given value is not nil.
func (_u *RenterUpdate) SetNillableIndividualID(id *string) *RenterUpdate {
	if id != nil {
		_u = _u.SetIndividualID(*id)
	}
	return _u
}

// SetIndividual sets the "individual" edge to the Individual entity.
func (_u *RenterUpdate) SetIndividual(v *Individual) *RenterUpdate {
	return _u.SetIndividualID(v.ID)
}

// Mutation returns the RenterMutation object of the builder.
func (_u *RenterUpdate) Mutation() *RenterMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *RenterUpdate) ClearTenant() *RenterUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// ClearRentals clears all "rentals" edges to the Rental entity.
func (_u *RenterUpdate) ClearRentals() *RenterUpdate {
	_u.mutation.ClearRentals()
	return _u
}

// RemoveRentalIDs removes the "rentals" edge to Rental entities by IDs.
func (_u *RenterUpdate) RemoveRentalIDs(ids ...string) *RenterUpdate {
	_u.mutation.RemoveRentalIDs(ids...)
	return _u
}

// RemoveRentals removes "rentals" edges to Rental entities.
func (_u *RenterUpdate) RemoveRentals(v ...*Rental) *RenterUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalIDs(ids...)
}

// ClearCompany clears the "company" edge to the Company entity.
func (_u *RenterUpdate) ClearCompany() *RenterUpdate {
	_u.mutation.ClearCompany()
	return _u
}

// ClearIndividual clears the "individual" edge to the Individual entity.
func (_u *RenterUpdate) ClearIndividual() *RenterUpdate {
	_u.mutation.ClearIndividual()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RenterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RenterUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RenterUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RenterUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RenterUpdate) check() error {
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Renter.tenant"`)
	}
	return nil
}

func (_u *RenterUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(renter.Table, renter.Columns, sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RenterEntityType(); ok {
		_spec.SetField(renter.FieldRenterEntityType, field.TypeString, value)
	}
	if _u.mutation.RenterEntityTypeCleared() {
		_spec.ClearField(renter.FieldRenterEntityType, field.TypeString)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.TenantTable,
			Columns: []string{renter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.TenantTable,
			Columns: []string{renter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   renter.RentalsTable,
			Columns: []string{renter.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalsIDs(); len(nodes) > 0 && !_u.mutation.RentalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   renter.RentalsTable,
			Columns: []string{renter.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   renter.RentalsTable,
			Columns: []string{renter.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.CompanyTable,
			Columns: []string{renter.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.CompanyTable,
			Columns: []string{renter.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IndividualCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.IndividualTable,
			Columns: []string{renter.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IndividualIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.IndividualTable,
			Columns: []string{renter.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{renter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RenterUpdateOne is the builder for updating a single Renter entity.
type RenterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RenterMutation
}

// SetRenterEntityID sets the "renter_entity_id" field.
func (_u *RenterUpdateOne) SetRenterEntityID(v string) *RenterUpdateOne {
	_u.mutation.SetRenterEntityID(v)
	return _u
}

// SetNillableRenterEntityID sets the "renter_entity_id" field if the given value is not nil.
func (_u *RenterUpdateOne) SetNillableRenterEntityID(v *string) *RenterUpdateOne {
	if v != nil {
		_u.SetRenterEntityID(*v)
	}
	return _u
}

// ClearRenterEntityID clears the value of the "renter_entity_id" field.
func (_u *RenterUpdateOne) ClearRenterEntityID() *RenterUpdateOne {
	_u.mutation.ClearRenterEntityID()
	return _u
}

// SetRenterEntityType sets the "renter_entity_type" field.
func (_u *RenterUpdateOne) SetRenterEntityType(v string) *RenterUpdateOne {
	_u.mutation.SetRenterEntityType(v)
	return _u
}

// SetNillableRenterEntityType sets the "renter_entity_type" field if the given value is not nil.
func (_u *RenterUpdateOne) SetNillableRenterEntityType(v *string) *RenterUpdateOne {
	if v != nil {
		_u.SetRenterEntityType(*v)
	}
	return _u
}

// ClearRenterEntityType clears the value of the "renter_entity_type" field.
func (_u *RenterUpdateOne) ClearRenterEntityType() *RenterUpdateOne {
	_u.mutation.ClearRenterEntityType()
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *RenterUpdateOne) SetTenantID(v string) *RenterUpdateOne {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *RenterUpdateOne) SetNillableTenantID(v *string) *RenterUpdateOne {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *RenterUpdateOne) SetTenant(v *Tenant) *RenterUpdateOne {
	return _u.SetTenantID(v.ID)
}

// AddRentalIDs adds the "rentals" edge to the Rental entity by IDs.
func (_u *RenterUpdateOne) AddRentalIDs(ids ...string) *RenterUpdateOne {
	_u.mutation.AddRentalIDs(ids...)
	return _u
}

// AddRentals adds the "rentals" edges to the Rental entity.
func (_u *RenterUpdateOne) AddRentals(v ...*Rental) *RenterUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalIDs(ids...)
}

// SetCompanyID sets the "company" edge to the Company entity by ID.
func (_u *RenterUpdateOne) SetCompanyID(id string) *RenterUpdateOne {
	_u.mutation.SetCompanyID(id)
	return _u
}

// SetNillableCompanyID sets the "company" edge to the Company entity by ID if the given value is not nil.
func (_u *RenterUpdateOne) SetNillableCompanyID(id *string) *RenterUpdateOne {
	if id != nil {
		_u = _u.SetCompanyID(*id)
	}
	return _u
}

// SetCompany sets the "company" edge to the Company entity.
func (_u *RenterUpdateOne) SetCompany(v *Company) *RenterUpdateOne {
	return _u.SetCompanyID(v.ID)
}

// SetIndividualID sets the "individual" edge to the Individual entity by ID.
func (_u *RenterUpdateOne) SetIndividualID(id string) *RenterUpdateOne {
	_u.mutation.SetIndividualID(id)
	return _u
}

// SetNillableIndividualID sets the "individual" edge to the Individual entity by ID if the given value is not nil.
func (_u *RenterUpdateOne) SetNillableIndividualID(id *string) *RenterUpdateOne {
	if id != nil {
		_u = _u.SetIndividualID(*id)
	}
	return _u
}

// SetIndividual sets the "individual" edge to the Individual entity.
func (_u *RenterUpdateOne) SetIndividual(v *Individual) *RenterUpdateOne {
	return _u.SetIndividualID(v.ID)
}

// Mutation returns the RenterMutation object of the builder.
func (_u *RenterUpdateOne) Mutation() *RenterMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *RenterUpdateOne) ClearTenant() *RenterUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// ClearRentals clears all "rentals" edges to the Rental entity.
func (_u *RenterUpdateOne) ClearRentals() *RenterUpdateOne {
	_u.mutation.ClearRentals()
	return _u
}

// RemoveRentalIDs removes the "rentals" edge to Rental entities by IDs.
func (_u *RenterUpdateOne) RemoveRentalIDs(ids ...string) *RenterUpdateOne {
	_u.mutation.RemoveRentalIDs(ids...)
	return _u
}

// RemoveRentals removes "rentals" edges to Rental entities.
func (_u *RenterUpdateOne) RemoveRentals(v ...*Rental) *RenterUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalIDs(ids...)
}

// ClearCompany clears the "company" edge to the Company entity.
func (_u *RenterUpdateOne) ClearCompany() *RenterUpdateOne {
	_u.mutation.ClearCompany()
	return _u
}

// ClearIndividual clears the "individual" edge to the Individual entity.
func (_u *RenterUpdateOne) ClearIndividual() *RenterUpdateOne {
	_u.mutation.ClearIndividual()
	return _u
}

// Where appends a list predicates to the RenterUpdate builder.
func (_u *RenterUpdateOne) Where(ps ...predicate.Renter) *RenterUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RenterUpdateOne) Select(field string, fields ...string) *RenterUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Renter entity.
func (_u *RenterUpdateOne) Save(ctx context.Context) (*Renter, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RenterUpdateOne) SaveX(ctx context.Context) *Renter {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RenterUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RenterUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RenterUpdateOne) check() error {
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Renter.tenant"`)
	}
	return nil
}

func (_u *RenterUpdateOne) sqlSave(ctx context.Context) (_node *Renter, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(renter.Table, renter.Columns, sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Renter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, renter.FieldID)
		for _, f := range fields {
			if !renter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != renter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.RenterEntityType(); ok {
		_spec.SetField(renter.FieldRenterEntityType, field.TypeString, value)
	}
	if _u.mutation.RenterEntityTypeCleared() {
		_spec.ClearField(renter.FieldRenterEntityType, field.TypeString)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.TenantTable,
			Columns: []string{renter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.TenantTable,
			Columns: []string{renter.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   renter.RentalsTable,
			Columns: []string{renter.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalsIDs(); len(nodes) > 0 && !_u.mutation.RentalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   renter.RentalsTable,
			Columns: []string{renter.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   renter.RentalsTable,
			Columns: []string{renter.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CompanyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.CompanyTable,
			Columns: []string{renter.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CompanyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.CompanyTable,
			Columns: []string{renter.CompanyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IndividualCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.IndividualTable,
			Columns: []string{renter.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IndividualIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   renter.IndividualTable,
			Columns: []string{renter.IndividualColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Renter{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{renter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
