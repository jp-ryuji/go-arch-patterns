// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-sample/internal/ent/car"
	"github.com/jp-ryuji/go-sample/internal/ent/predicate"
	"github.com/jp-ryuji/go-sample/internal/ent/rental"
	"github.com/jp-ryuji/go-sample/internal/ent/rentaloption"
	"github.com/jp-ryuji/go-sample/internal/ent/renter"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
)

// RentalUpdate is the builder for updating Rental entities.
type RentalUpdate struct {
	config
	hooks    []Hook
	mutation *RentalMutation
}

// Where appends a list predicates to the RentalUpdate builder.
func (_u *RentalUpdate) Where(ps ...predicate.Rental) *RentalUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetStartsAt sets the "starts_at" field.
func (_u *RentalUpdate) SetStartsAt(v time.Time) *RentalUpdate {
	_u.mutation.SetStartsAt(v)
	return _u
}

// SetNillableStartsAt sets the "starts_at" field if the given value is not nil.
func (_u *RentalUpdate) SetNillableStartsAt(v *time.Time) *RentalUpdate {
	if v != nil {
		_u.SetStartsAt(*v)
	}
	return _u
}

// SetEndsAt sets the "ends_at" field.
func (_u *RentalUpdate) SetEndsAt(v time.Time) *RentalUpdate {
	_u.mutation.SetEndsAt(v)
	return _u
}

// SetNillableEndsAt sets the "ends_at" field if the given value is not nil.
func (_u *RentalUpdate) SetNillableEndsAt(v *time.Time) *RentalUpdate {
	if v != nil {
		_u.SetEndsAt(*v)
	}
	return _u
}

// SetCarID sets the "car_id" field.
func (_u *RentalUpdate) SetCarID(v string) *RentalUpdate {
	_u.mutation.SetCarID(v)
	return _u
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (_u *RentalUpdate) SetNillableCarID(v *string) *RentalUpdate {
	if v != nil {
		_u.SetCarID(*v)
	}
	return _u
}

// SetRenterID sets the "renter_id" field.
func (_u *RentalUpdate) SetRenterID(v string) *RentalUpdate {
	_u.mutation.SetRenterID(v)
	return _u
}

// SetNillableRenterID sets the "renter_id" field if the given value is not nil.
func (_u *RentalUpdate) SetNillableRenterID(v *string) *RentalUpdate {
	if v != nil {
		_u.SetRenterID(*v)
	}
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *RentalUpdate) SetTenantID(v string) *RentalUpdate {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *RentalUpdate) SetNillableTenantID(v *string) *RentalUpdate {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *RentalUpdate) SetTenant(v *Tenant) *RentalUpdate {
	return _u.SetTenantID(v.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (_u *RentalUpdate) SetCar(v *Car) *RentalUpdate {
	return _u.SetCarID(v.ID)
}

// SetRenter sets the "renter" edge to the Renter entity.
func (_u *RentalUpdate) SetRenter(v *Renter) *RentalUpdate {
	return _u.SetRenterID(v.ID)
}

// AddRentalOptionIDs adds the "rental_options" edge to the RentalOption entity by IDs.
func (_u *RentalUpdate) AddRentalOptionIDs(ids ...string) *RentalUpdate {
	_u.mutation.AddRentalOptionIDs(ids...)
	return _u
}

// AddRentalOptions adds the "rental_options" edges to the RentalOption entity.
func (_u *RentalUpdate) AddRentalOptions(v ...*RentalOption) *RentalUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalOptionIDs(ids...)
}

// Mutation returns the RentalMutation object of the builder.
func (_u *RentalUpdate) Mutation() *RentalMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *RentalUpdate) ClearTenant() *RentalUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// ClearCar clears the "car" edge to the Car entity.
func (_u *RentalUpdate) ClearCar() *RentalUpdate {
	_u.mutation.ClearCar()
	return _u
}

// ClearRenter clears the "renter" edge to the Renter entity.
func (_u *RentalUpdate) ClearRenter() *RentalUpdate {
	_u.mutation.ClearRenter()
	return _u
}

// ClearRentalOptions clears all "rental_options" edges to the RentalOption entity.
func (_u *RentalUpdate) ClearRentalOptions() *RentalUpdate {
	_u.mutation.ClearRentalOptions()
	return _u
}

// RemoveRentalOptionIDs removes the "rental_options" edge to RentalOption entities by IDs.
func (_u *RentalUpdate) RemoveRentalOptionIDs(ids ...string) *RentalUpdate {
	_u.mutation.RemoveRentalOptionIDs(ids...)
	return _u
}

// RemoveRentalOptions removes "rental_options" edges to RentalOption entities.
func (_u *RentalUpdate) RemoveRentalOptions(v ...*RentalOption) *RentalUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalOptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RentalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RentalUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RentalUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RentalUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RentalUpdate) check() error {
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.tenant"`)
	}
	if _u.mutation.CarCleared() && len(_u.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.car"`)
	}
	if _u.mutation.RenterCleared() && len(_u.mutation.RenterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.renter"`)
	}
	return nil
}

func (_u *RentalUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rental.Table, rental.Columns, sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StartsAt(); ok {
		_spec.SetField(rental.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndsAt(); ok {
		_spec.SetField(rental.FieldEndsAt, field.TypeTime, value)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.TenantTable,
			Columns: []string{rental.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.TenantTable,
			Columns: []string{rental.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.CarTable,
			Columns: []string{rental.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.CarTable,
			Columns: []string{rental.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.RenterTable,
			Columns: []string{rental.RenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.RenterTable,
			Columns: []string{rental.RenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rental.RentalOptionsTable,
			Columns: []string{rental.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalOptionsIDs(); len(nodes) > 0 && !_u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rental.RentalOptionsTable,
			Columns: []string{rental.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rental.RentalOptionsTable,
			Columns: []string{rental.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RentalUpdateOne is the builder for updating a single Rental entity.
type RentalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RentalMutation
}

// SetStartsAt sets the "starts_at" field.
func (_u *RentalUpdateOne) SetStartsAt(v time.Time) *RentalUpdateOne {
	_u.mutation.SetStartsAt(v)
	return _u
}

// SetNillableStartsAt sets the "starts_at" field if the given value is not nil.
func (_u *RentalUpdateOne) SetNillableStartsAt(v *time.Time) *RentalUpdateOne {
	if v != nil {
		_u.SetStartsAt(*v)
	}
	return _u
}

// SetEndsAt sets the "ends_at" field.
func (_u *RentalUpdateOne) SetEndsAt(v time.Time) *RentalUpdateOne {
	_u.mutation.SetEndsAt(v)
	return _u
}

// SetNillableEndsAt sets the "ends_at" field if the given value is not nil.
func (_u *RentalUpdateOne) SetNillableEndsAt(v *time.Time) *RentalUpdateOne {
	if v != nil {
		_u.SetEndsAt(*v)
	}
	return _u
}

// SetCarID sets the "car_id" field.
func (_u *RentalUpdateOne) SetCarID(v string) *RentalUpdateOne {
	_u.mutation.SetCarID(v)
	return _u
}

// SetNillableCarID sets the "car_id" field if the given value is not nil.
func (_u *RentalUpdateOne) SetNillableCarID(v *string) *RentalUpdateOne {
	if v != nil {
		_u.SetCarID(*v)
	}
	return _u
}

// SetRenterID sets the "renter_id" field.
func (_u *RentalUpdateOne) SetRenterID(v string) *RentalUpdateOne {
	_u.mutation.SetRenterID(v)
	return _u
}

// SetNillableRenterID sets the "renter_id" field if the given value is not nil.
func (_u *RentalUpdateOne) SetNillableRenterID(v *string) *RentalUpdateOne {
	if v != nil {
		_u.SetRenterID(*v)
	}
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *RentalUpdateOne) SetTenantID(v string) *RentalUpdateOne {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *RentalUpdateOne) SetNillableTenantID(v *string) *RentalUpdateOne {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *RentalUpdateOne) SetTenant(v *Tenant) *RentalUpdateOne {
	return _u.SetTenantID(v.ID)
}

// SetCar sets the "car" edge to the Car entity.
func (_u *RentalUpdateOne) SetCar(v *Car) *RentalUpdateOne {
	return _u.SetCarID(v.ID)
}

// SetRenter sets the "renter" edge to the Renter entity.
func (_u *RentalUpdateOne) SetRenter(v *Renter) *RentalUpdateOne {
	return _u.SetRenterID(v.ID)
}

// AddRentalOptionIDs adds the "rental_options" edge to the RentalOption entity by IDs.
func (_u *RentalUpdateOne) AddRentalOptionIDs(ids ...string) *RentalUpdateOne {
	_u.mutation.AddRentalOptionIDs(ids...)
	return _u
}

// AddRentalOptions adds the "rental_options" edges to the RentalOption entity.
func (_u *RentalUpdateOne) AddRentalOptions(v ...*RentalOption) *RentalUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalOptionIDs(ids...)
}

// Mutation returns the RentalMutation object of the builder.
func (_u *RentalUpdateOne) Mutation() *RentalMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *RentalUpdateOne) ClearTenant() *RentalUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// ClearCar clears the "car" edge to the Car entity.
func (_u *RentalUpdateOne) ClearCar() *RentalUpdateOne {
	_u.mutation.ClearCar()
	return _u
}

// ClearRenter clears the "renter" edge to the Renter entity.
func (_u *RentalUpdateOne) ClearRenter() *RentalUpdateOne {
	_u.mutation.ClearRenter()
	return _u
}

// ClearRentalOptions clears all "rental_options" edges to the RentalOption entity.
func (_u *RentalUpdateOne) ClearRentalOptions() *RentalUpdateOne {
	_u.mutation.ClearRentalOptions()
	return _u
}

// RemoveRentalOptionIDs removes the "rental_options" edge to RentalOption entities by IDs.
func (_u *RentalUpdateOne) RemoveRentalOptionIDs(ids ...string) *RentalUpdateOne {
	_u.mutation.RemoveRentalOptionIDs(ids...)
	return _u
}

// RemoveRentalOptions removes "rental_options" edges to RentalOption entities.
func (_u *RentalUpdateOne) RemoveRentalOptions(v ...*RentalOption) *RentalUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalOptionIDs(ids...)
}

// Where appends a list predicates to the RentalUpdate builder.
func (_u *RentalUpdateOne) Where(ps ...predicate.Rental) *RentalUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RentalUpdateOne) Select(field string, fields ...string) *RentalUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Rental entity.
func (_u *RentalUpdateOne) Save(ctx context.Context) (*Rental, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RentalUpdateOne) SaveX(ctx context.Context) *Rental {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RentalUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RentalUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RentalUpdateOne) check() error {
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.tenant"`)
	}
	if _u.mutation.CarCleared() && len(_u.mutation.CarIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.car"`)
	}
	if _u.mutation.RenterCleared() && len(_u.mutation.RenterIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Rental.renter"`)
	}
	return nil
}

func (_u *RentalUpdateOne) sqlSave(ctx context.Context) (_node *Rental, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rental.Table, rental.Columns, sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rental.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rental.FieldID)
		for _, f := range fields {
			if !rental.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rental.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.StartsAt(); ok {
		_spec.SetField(rental.FieldStartsAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.EndsAt(); ok {
		_spec.SetField(rental.FieldEndsAt, field.TypeTime, value)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.TenantTable,
			Columns: []string{rental.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.TenantTable,
			Columns: []string{rental.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.CarTable,
			Columns: []string{rental.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.CarTable,
			Columns: []string{rental.CarColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.RenterTable,
			Columns: []string{rental.RenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   rental.RenterTable,
			Columns: []string{rental.RenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rental.RentalOptionsTable,
			Columns: []string{rental.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalOptionsIDs(); len(nodes) > 0 && !_u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rental.RentalOptionsTable,
			Columns: []string{rental.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   rental.RentalOptionsTable,
			Columns: []string{rental.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rental{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rental.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
