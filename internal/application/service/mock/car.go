// Code generated by MockGen. DO NOT EDIT.
// Source: car.go
//
// Generated by this command:
//
//	mockgen -source=car.go -destination=mock/car.go -package=mock_service
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	input "github.com/jp-ryuji/go-arch-patterns/internal/application/input"
	output "github.com/jp-ryuji/go-arch-patterns/internal/application/output"
	entity "github.com/jp-ryuji/go-arch-patterns/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCarService is a mock of CarService interface.
type MockCarService struct {
	ctrl     *gomock.Controller
	recorder *MockCarServiceMockRecorder
	isgomock struct{}
}

// MockCarServiceMockRecorder is the mock recorder for MockCarService.
type MockCarServiceMockRecorder struct {
	mock *MockCarService
}

// NewMockCarService creates a new mock instance.
func NewMockCarService(ctrl *gomock.Controller) *MockCarService {
	mock := &MockCarService{ctrl: ctrl}
	mock.recorder = &MockCarServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarService) EXPECT() *MockCarServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarService) Create(ctx context.Context, arg1 input.CreateCar) (*entity.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, arg1)
	ret0, _ := ret[0].(*entity.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCarServiceMockRecorder) Create(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarService)(nil).Create), ctx, arg1)
}

// GetByID mocks base method.
func (m *MockCarService) GetByID(ctx context.Context, arg1 input.GetCarByID) (*entity.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, arg1)
	ret0, _ := ret[0].(*entity.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCarServiceMockRecorder) GetByID(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCarService)(nil).GetByID), ctx, arg1)
}

// GetByIDWithTenant mocks base method.
func (m *MockCarService) GetByIDWithTenant(ctx context.Context, arg1 input.GetCarByID) (*entity.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithTenant", ctx, arg1)
	ret0, _ := ret[0].(*entity.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithTenant indicates an expected call of GetByIDWithTenant.
func (mr *MockCarServiceMockRecorder) GetByIDWithTenant(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithTenant", reflect.TypeOf((*MockCarService)(nil).GetByIDWithTenant), ctx, arg1)
}

// List mocks base method.
func (m *MockCarService) List(ctx context.Context, arg1 input.ListCars) (*output.ListCars, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, arg1)
	ret0, _ := ret[0].(*output.ListCars)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCarServiceMockRecorder) List(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCarService)(nil).List), ctx, arg1)
}
