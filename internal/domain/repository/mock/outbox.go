// Code generated by MockGen. DO NOT EDIT.
// Source: outbox.go
//
// Generated by this command:
//
//	mockgen -source=outbox.go -destination=mock/outbox.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	time "time"

	entgen "github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen"
	gomock "go.uber.org/mock/gomock"
)

// MockOutboxRepository is a mock of OutboxRepository interface.
type MockOutboxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOutboxRepositoryMockRecorder
	isgomock struct{}
}

// MockOutboxRepositoryMockRecorder is the mock recorder for MockOutboxRepository.
type MockOutboxRepositoryMockRecorder struct {
	mock *MockOutboxRepository
}

// NewMockOutboxRepository creates a new mock instance.
func NewMockOutboxRepository(ctrl *gomock.Controller) *MockOutboxRepository {
	mock := &MockOutboxRepository{ctrl: ctrl}
	mock.recorder = &MockOutboxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutboxRepository) EXPECT() *MockOutboxRepositoryMockRecorder {
	return m.recorder
}

// CleanupProcessedMessages mocks base method.
func (m *MockOutboxRepository) CleanupProcessedMessages(ctx context.Context, olderThan time.Duration) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupProcessedMessages", ctx, olderThan)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupProcessedMessages indicates an expected call of CleanupProcessedMessages.
func (mr *MockOutboxRepositoryMockRecorder) CleanupProcessedMessages(ctx, olderThan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupProcessedMessages", reflect.TypeOf((*MockOutboxRepository)(nil).CleanupProcessedMessages), ctx, olderThan)
}

// Create mocks base method.
func (m *MockOutboxRepository) Create(ctx context.Context, outbox *entgen.Outbox) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, outbox)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOutboxRepositoryMockRecorder) Create(ctx, outbox any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOutboxRepository)(nil).Create), ctx, outbox)
}

// CreateInTx mocks base method.
func (m *MockOutboxRepository) CreateInTx(ctx context.Context, tx *entgen.Tx, outbox *entgen.Outbox) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInTx", ctx, tx, outbox)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInTx indicates an expected call of CreateInTx.
func (mr *MockOutboxRepositoryMockRecorder) CreateInTx(ctx, tx, outbox any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInTx", reflect.TypeOf((*MockOutboxRepository)(nil).CreateInTx), ctx, tx, outbox)
}

// GetFailed mocks base method.
func (m *MockOutboxRepository) GetFailed(ctx context.Context, limit int) ([]*entgen.Outbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFailed", ctx, limit)
	ret0, _ := ret[0].([]*entgen.Outbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFailed indicates an expected call of GetFailed.
func (mr *MockOutboxRepositoryMockRecorder) GetFailed(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFailed", reflect.TypeOf((*MockOutboxRepository)(nil).GetFailed), ctx, limit)
}

// GetPending mocks base method.
func (m *MockOutboxRepository) GetPending(ctx context.Context, limit int) ([]*entgen.Outbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPending", ctx, limit)
	ret0, _ := ret[0].([]*entgen.Outbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPending indicates an expected call of GetPending.
func (mr *MockOutboxRepositoryMockRecorder) GetPending(ctx, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPending", reflect.TypeOf((*MockOutboxRepository)(nil).GetPending), ctx, limit)
}

// GetPendingWithLock mocks base method.
func (m *MockOutboxRepository) GetPendingWithLock(ctx context.Context, limit int, processorID string) ([]*entgen.Outbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingWithLock", ctx, limit, processorID)
	ret0, _ := ret[0].([]*entgen.Outbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingWithLock indicates an expected call of GetPendingWithLock.
func (mr *MockOutboxRepositoryMockRecorder) GetPendingWithLock(ctx, limit, processorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingWithLock", reflect.TypeOf((*MockOutboxRepository)(nil).GetPendingWithLock), ctx, limit, processorID)
}

// MarkAsFailed mocks base method.
func (m *MockOutboxRepository) MarkAsFailed(ctx context.Context, id, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsFailed", ctx, id, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsFailed indicates an expected call of MarkAsFailed.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsFailed(ctx, id, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsFailed", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsFailed), ctx, id, errorMessage)
}

// MarkAsFailedInTx mocks base method.
func (m *MockOutboxRepository) MarkAsFailedInTx(ctx context.Context, tx *entgen.Tx, id, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsFailedInTx", ctx, tx, id, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsFailedInTx indicates an expected call of MarkAsFailedInTx.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsFailedInTx(ctx, tx, id, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsFailedInTx", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsFailedInTx), ctx, tx, id, errorMessage)
}

// MarkAsProcessed mocks base method.
func (m *MockOutboxRepository) MarkAsProcessed(ctx context.Context, id string, processedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsProcessed", ctx, id, processedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsProcessed indicates an expected call of MarkAsProcessed.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsProcessed(ctx, id, processedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsProcessed", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsProcessed), ctx, id, processedAt)
}

// MarkAsProcessedInTx mocks base method.
func (m *MockOutboxRepository) MarkAsProcessedInTx(ctx context.Context, tx *entgen.Tx, id string, processedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsProcessedInTx", ctx, tx, id, processedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsProcessedInTx indicates an expected call of MarkAsProcessedInTx.
func (mr *MockOutboxRepositoryMockRecorder) MarkAsProcessedInTx(ctx, tx, id, processedAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsProcessedInTx", reflect.TypeOf((*MockOutboxRepository)(nil).MarkAsProcessedInTx), ctx, tx, id, processedAt)
}

// UnlockOrphanedMessages mocks base method.
func (m *MockOutboxRepository) UnlockOrphanedMessages(ctx context.Context, olderThan time.Duration) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockOrphanedMessages", ctx, olderThan)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockOrphanedMessages indicates an expected call of UnlockOrphanedMessages.
func (mr *MockOutboxRepositoryMockRecorder) UnlockOrphanedMessages(ctx, olderThan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockOrphanedMessages", reflect.TypeOf((*MockOutboxRepository)(nil).UnlockOrphanedMessages), ctx, olderThan)
}
