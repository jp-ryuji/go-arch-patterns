// Code generated by MockGen. DO NOT EDIT.
// Source: company.go
//
// Generated by this command:
//
//	mockgen -source=company.go -destination=mock/company.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/jp-ryuji/go-arch-patterns/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockCompanyRepository is a mock of CompanyRepository interface.
type MockCompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCompanyRepositoryMockRecorder
	isgomock struct{}
}

// MockCompanyRepositoryMockRecorder is the mock recorder for MockCompanyRepository.
type MockCompanyRepositoryMockRecorder struct {
	mock *MockCompanyRepository
}

// NewMockCompanyRepository creates a new mock instance.
func NewMockCompanyRepository(ctrl *gomock.Controller) *MockCompanyRepository {
	mock := &MockCompanyRepository{ctrl: ctrl}
	mock.recorder = &MockCompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompanyRepository) EXPECT() *MockCompanyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCompanyRepository) Create(ctx context.Context, company *entity.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCompanyRepositoryMockRecorder) Create(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCompanyRepository)(nil).Create), ctx, company)
}

// Delete mocks base method.
func (m *MockCompanyRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCompanyRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCompanyRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockCompanyRepository) GetByID(ctx context.Context, id string) (*entity.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCompanyRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCompanyRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockCompanyRepository) Update(ctx context.Context, company *entity.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCompanyRepositoryMockRecorder) Update(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCompanyRepository)(nil).Update), ctx, company)
}
