// Code generated by MockGen. DO NOT EDIT.
// Source: renter.go
//
// Generated by this command:
//
//	mockgen -source=renter.go -destination=mock/renter.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	entity "github.com/jp-ryuji/go-arch-patterns/internal/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRenterRepository is a mock of RenterRepository interface.
type MockRenterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRenterRepositoryMockRecorder
	isgomock struct{}
}

// MockRenterRepositoryMockRecorder is the mock recorder for MockRenterRepository.
type MockRenterRepositoryMockRecorder struct {
	mock *MockRenterRepository
}

// NewMockRenterRepository creates a new mock instance.
func NewMockRenterRepository(ctrl *gomock.Controller) *MockRenterRepository {
	mock := &MockRenterRepository{ctrl: ctrl}
	mock.recorder = &MockRenterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenterRepository) EXPECT() *MockRenterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRenterRepository) Create(ctx context.Context, renter *entity.Renter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, renter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRenterRepositoryMockRecorder) Create(ctx, renter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRenterRepository)(nil).Create), ctx, renter)
}

// Delete mocks base method.
func (m *MockRenterRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRenterRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRenterRepository)(nil).Delete), ctx, id)
}

// GetByID mocks base method.
func (m *MockRenterRepository) GetByID(ctx context.Context, id string) (*entity.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRenterRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRenterRepository)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockRenterRepository) Update(ctx context.Context, renter *entity.Renter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, renter)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRenterRepositoryMockRecorder) Update(ctx, renter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRenterRepository)(nil).Update), ctx, renter)
}
