// Code generated by MockGen. DO NOT EDIT.
// Source: car.go
//
// Generated by this command:
//
//	mockgen -source=car.go -destination=mock/car.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/jp-ryuji/go-arch-patterns/internal/domain/model"
	entgen "github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen"
	gomock "go.uber.org/mock/gomock"
)

// MockCarRepository is a mock of CarRepository interface.
type MockCarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCarRepositoryMockRecorder
	isgomock struct{}
}

// MockCarRepositoryMockRecorder is the mock recorder for MockCarRepository.
type MockCarRepositoryMockRecorder struct {
	mock *MockCarRepository
}

// NewMockCarRepository creates a new mock instance.
func NewMockCarRepository(ctrl *gomock.Controller) *MockCarRepository {
	mock := &MockCarRepository{ctrl: ctrl}
	mock.recorder = &MockCarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarRepository) EXPECT() *MockCarRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarRepository) Create(ctx context.Context, car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, car)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCarRepositoryMockRecorder) Create(ctx, car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarRepository)(nil).Create), ctx, car)
}

// CreateInTx mocks base method.
func (m *MockCarRepository) CreateInTx(ctx context.Context, tx *entgen.Tx, car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInTx", ctx, tx, car)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInTx indicates an expected call of CreateInTx.
func (mr *MockCarRepositoryMockRecorder) CreateInTx(ctx, tx, car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInTx", reflect.TypeOf((*MockCarRepository)(nil).CreateInTx), ctx, tx, car)
}

// Delete mocks base method.
func (m *MockCarRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCarRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCarRepository)(nil).Delete), ctx, id)
}

// DeleteInTx mocks base method.
func (m *MockCarRepository) DeleteInTx(ctx context.Context, tx *entgen.Tx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInTx", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInTx indicates an expected call of DeleteInTx.
func (mr *MockCarRepositoryMockRecorder) DeleteInTx(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInTx", reflect.TypeOf((*MockCarRepository)(nil).DeleteInTx), ctx, tx, id)
}

// GetByID mocks base method.
func (m *MockCarRepository) GetByID(ctx context.Context, id string) (*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCarRepositoryMockRecorder) GetByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCarRepository)(nil).GetByID), ctx, id)
}

// GetByIDWithTenant mocks base method.
func (m *MockCarRepository) GetByIDWithTenant(ctx context.Context, id string) (*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDWithTenant", ctx, id)
	ret0, _ := ret[0].(*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDWithTenant indicates an expected call of GetByIDWithTenant.
func (mr *MockCarRepositoryMockRecorder) GetByIDWithTenant(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDWithTenant", reflect.TypeOf((*MockCarRepository)(nil).GetByIDWithTenant), ctx, id)
}

// Update mocks base method.
func (m *MockCarRepository) Update(ctx context.Context, car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, car)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCarRepositoryMockRecorder) Update(ctx, car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCarRepository)(nil).Update), ctx, car)
}

// UpdateInTx mocks base method.
func (m *MockCarRepository) UpdateInTx(ctx context.Context, tx *entgen.Tx, car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInTx", ctx, tx, car)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInTx indicates an expected call of UpdateInTx.
func (mr *MockCarRepositoryMockRecorder) UpdateInTx(ctx, tx, car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInTx", reflect.TypeOf((*MockCarRepository)(nil).UpdateInTx), ctx, tx, car)
}
