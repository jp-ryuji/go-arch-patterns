// Code generated by MockGen. DO NOT EDIT.
// Source: opensearch_car.go
//
// Generated by this command:
//
//	mockgen -source=opensearch_car.go -destination=mock/opensearch_car.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/jp-ryuji/go-sample/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockOpenSearchCarRepository is a mock of OpenSearchCarRepository interface.
type MockOpenSearchCarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOpenSearchCarRepositoryMockRecorder
	isgomock struct{}
}

// MockOpenSearchCarRepositoryMockRecorder is the mock recorder for MockOpenSearchCarRepository.
type MockOpenSearchCarRepositoryMockRecorder struct {
	mock *MockOpenSearchCarRepository
}

// NewMockOpenSearchCarRepository creates a new mock instance.
func NewMockOpenSearchCarRepository(ctrl *gomock.Controller) *MockOpenSearchCarRepository {
	mock := &MockOpenSearchCarRepository{ctrl: ctrl}
	mock.recorder = &MockOpenSearchCarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenSearchCarRepository) EXPECT() *MockOpenSearchCarRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOpenSearchCarRepository) Create(ctx context.Context, car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, car)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOpenSearchCarRepositoryMockRecorder) Create(ctx, car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenSearchCarRepository)(nil).Create), ctx, car)
}

// Delete mocks base method.
func (m *MockOpenSearchCarRepository) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOpenSearchCarRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenSearchCarRepository)(nil).Delete), ctx, id)
}

// Update mocks base method.
func (m *MockOpenSearchCarRepository) Update(ctx context.Context, car *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, car)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOpenSearchCarRepositoryMockRecorder) Update(ctx, car any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOpenSearchCarRepository)(nil).Update), ctx, car)
}
