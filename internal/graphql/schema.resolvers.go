package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"

	"github.com/google/uuid"
	"github.com/jp-ryuji/go-sample/internal/ent/car"
	"github.com/jp-ryuji/go-sample/internal/ent/caroption"
	"github.com/jp-ryuji/go-sample/internal/ent/company"
	"github.com/jp-ryuji/go-sample/internal/ent/individual"
	"github.com/jp-ryuji/go-sample/internal/ent/rental"
	"github.com/jp-ryuji/go-sample/internal/ent/rentaloption"
	"github.com/jp-ryuji/go-sample/internal/ent/renter"
	"github.com/jp-ryuji/go-sample/internal/ent/tenant"
	"github.com/jp-ryuji/go-sample/internal/graphql/model"
)

// CreateTenant is the resolver for the createTenant field.
func (r *mutationResolver) CreateTenant(ctx context.Context, input model.CreateTenantInput) (*model.Tenant, error) {
	// Generate a new UUID for the tenant
	id := uuid.New().String()

	// Create the tenant in the database
	t, err := r.client.Tenant.Create().
		SetID(id).
		SetCode(input.Code).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent tenant to the GraphQL model
	return &model.Tenant{
		ID:   t.ID,
		Code: t.Code,
	}, nil
}

// CreateCar is the resolver for the createCar field.
func (r *mutationResolver) CreateCar(ctx context.Context, input model.CreateCarInput) (*model.Car, error) {
	// Generate a new UUID for the car
	id := uuid.New().String()

	// Create the car in the database
	c, err := r.client.Car.Create().
		SetID(id).
		SetModel(input.Model).
		SetTenantID(input.TenantID).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the car
	t, err := c.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent car to the GraphQL model
	return &model.Car{
		ID:     c.ID,
		Model:  c.Model,
		Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// CreateCompany is the resolver for the createCompany field.
func (r *mutationResolver) CreateCompany(ctx context.Context, input model.CreateCompanyInput) (*model.Company, error) {
	// Generate a new UUID for the company
	id := uuid.New().String()

	// Create the company in the database
	c, err := r.client.Company.Create().
		SetID(id).
		SetName(input.Name).
		SetNillableCompanySize(input.CompanySize).
		SetTenantID(input.TenantID).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the company
	t, err := c.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent company to the GraphQL model
	return &model.Company{
		ID:          c.ID,
		Name:        c.Name,
		CompanySize: &c.CompanySize,
		Tenant:      &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// CreateIndividual is the resolver for the createIndividual field.
func (r *mutationResolver) CreateIndividual(ctx context.Context, input model.CreateIndividualInput) (*model.Individual, error) {
	// Generate a new UUID for the individual
	id := uuid.New().String()

	// Create the individual in the database
	i, err := r.client.Individual.Create().
		SetID(id).
		SetEmail(input.Email).
		SetNillableFirstName(input.FirstName).
		SetNillableLastName(input.LastName).
		SetTenantID(input.TenantID).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the individual
	t, err := i.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent individual to the GraphQL model
	return &model.Individual{
		ID:        i.ID,
		Email:     i.Email,
		FirstName: &i.FirstName,
		LastName:  &i.LastName,
		Tenant:    &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// CreateRenter is the resolver for the createRenter field.
func (r *mutationResolver) CreateRenter(ctx context.Context, input model.CreateRenterInput) (*model.Renter, error) {
	// Generate a new UUID for the renter
	id := uuid.New().String()

	// Create the renter in the database
	renter, err := r.client.Renter.Create().
		SetID(id).
		SetTenantID(input.TenantID).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the renter
	t, err := renter.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Create the GraphQL model
	graphqlRenter := &model.Renter{
		ID:     renter.ID,
		Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
	}

	// Handle the renter entity (company or individual)
	// This is a simplified implementation - in a real application, you would need
	// to handle the polymorphic relationship properly
	if input.RenterEntityType == "company" {
		_, err := r.client.Company.Query().
			Where(company.ID(input.RenterEntityID)).
			Only(ctx)
		if err != nil {
			return nil, err
		}

		// In a real implementation, you would link the company to the renter
		// For now, we'll just return the renter with the tenant
	} else if input.RenterEntityType == "individual" {
		_, err := r.client.Individual.Query().
			Where(individual.ID(input.RenterEntityID)).
			Only(ctx)
		if err != nil {
			return nil, err
		}

		// In a real implementation, you would link the individual to the renter
		// For now, we'll just return the renter with the tenant
	}

	return graphqlRenter, nil
}

// CreateRental is the resolver for the createRental field.
func (r *mutationResolver) CreateRental(ctx context.Context, input model.CreateRentalInput) (*model.Rental, error) {
	// Generate a new UUID for the rental
	id := uuid.New().String()

	// Create the rental in the database
	rental, err := r.client.Rental.Create().
		SetID(id).
		SetStartsAt(input.StartsAt).
		SetEndsAt(input.EndsAt).
		SetCarID(input.CarID).
		SetRenterID(input.RenterID).
		SetTenantID(input.TenantID).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// Get the related entities
	t, err := rental.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	c, err := rental.QueryCar().Only(ctx)
	if err != nil {
		return nil, err
	}

	renter, err := rental.QueryRenter().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent rental to the GraphQL model
	return &model.Rental{
		ID:       rental.ID,
		StartsAt: rental.StartsAt,
		EndsAt:   rental.EndsAt,
		Tenant:   &model.Tenant{ID: t.ID, Code: t.Code},
		Car:      &model.Car{ID: c.ID, Model: c.Model},
		Renter:   &model.Renter{ID: renter.ID},
	}, nil
}

// CreateCarOption is the resolver for the createCarOption field.
func (r *mutationResolver) CreateCarOption(ctx context.Context, input model.CreateCarOptionInput) (*model.CarOption, error) {
	// Generate a new UUID for the car option
	id := uuid.New().String()

	// Create the car option in the database
	option, err := r.client.CarOption.Create().
		SetID(id).
		SetName(input.Name).
		SetTenantID(input.TenantID).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the car option
	t, err := option.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent car option to the GraphQL model
	return &model.CarOption{
		ID:     option.ID,
		Name:   option.Name,
		Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// CreateRentalOption is the resolver for the createRentalOption field.
func (r *mutationResolver) CreateRentalOption(ctx context.Context, input model.CreateRentalOptionInput) (*model.RentalOption, error) {
	// Generate a new UUID for the rental option
	id := uuid.New().String()

	// Create the rental option in the database
	option, err := r.client.RentalOption.Create().
		SetID(id).
		SetCount(input.Count).
		SetRentalID(input.RentalID).
		SetOptionID(input.OptionID).
		SetTenantID(input.TenantID).
		Save(ctx)
	if err != nil {
		return nil, err
	}

	// Get the related entities
	t, err := option.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	rental, err := option.QueryRental().Only(ctx)
	if err != nil {
		return nil, err
	}

	carOption, err := option.QueryOption().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent rental option to the GraphQL model
	return &model.RentalOption{
		ID:     option.ID,
		Count:  option.Count,
		Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
		Rental: &model.Rental{ID: rental.ID},
		Option: &model.CarOption{ID: carOption.ID, Name: carOption.Name},
	}, nil
}

// Tenants is the resolver for the tenants field.
func (r *queryResolver) Tenants(ctx context.Context) ([]*model.Tenant, error) {
	// Query all tenants from the database
	ts, err := r.client.Tenant.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent tenants to GraphQL models
	tenants := make([]*model.Tenant, len(ts))
	for i, t := range ts {
		tenants[i] = &model.Tenant{
			ID:   t.ID,
			Code: t.Code,
		}
	}

	return tenants, nil
}

// Tenant is the resolver for the tenant field.
func (r *queryResolver) Tenant(ctx context.Context, id string) (*model.Tenant, error) {
	// Query a specific tenant by ID
	t, err := r.client.Tenant.Query().
		Where(tenant.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent tenant to the GraphQL model
	return &model.Tenant{
		ID:   t.ID,
		Code: t.Code,
	}, nil
}

// Cars is the resolver for the cars field.
func (r *queryResolver) Cars(ctx context.Context) ([]*model.Car, error) {
	// Query all cars from the database
	cs, err := r.client.Car.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent cars to GraphQL models
	cars := make([]*model.Car, len(cs))
	for i, c := range cs {
		// Get the tenant for the car
		t, err := c.QueryTenant().Only(ctx)
		if err != nil {
			return nil, err
		}

		cars[i] = &model.Car{
			ID:     c.ID,
			Model:  c.Model,
			Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
		}
	}

	return cars, nil
}

// Car is the resolver for the car field.
func (r *queryResolver) Car(ctx context.Context, id string) (*model.Car, error) {
	// Query a specific car by ID
	c, err := r.client.Car.Query().
		Where(car.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the car
	t, err := c.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent car to the GraphQL model
	return &model.Car{
		ID:     c.ID,
		Model:  c.Model,
		Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context) ([]*model.Company, error) {
	// Query all companies from the database
	cs, err := r.client.Company.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent companies to GraphQL models
	companies := make([]*model.Company, len(cs))
	for i, c := range cs {
		// Get the tenant for the company
		t, err := c.QueryTenant().Only(ctx)
		if err != nil {
			return nil, err
		}

		companies[i] = &model.Company{
			ID:          c.ID,
			Name:        c.Name,
			CompanySize: &c.CompanySize,
			Tenant:      &model.Tenant{ID: t.ID, Code: t.Code},
		}
	}

	return companies, nil
}

// Company is the resolver for the company field.
func (r *queryResolver) Company(ctx context.Context, id string) (*model.Company, error) {
	// Query a specific company by ID
	c, err := r.client.Company.Query().
		Where(company.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the company
	t, err := c.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent company to the GraphQL model
	return &model.Company{
		ID:          c.ID,
		Name:        c.Name,
		CompanySize: &c.CompanySize,
		Tenant:      &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// Individuals is the resolver for the individuals field.
func (r *queryResolver) Individuals(ctx context.Context) ([]*model.Individual, error) {
	// Query all individuals from the database
	is, err := r.client.Individual.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent individuals to GraphQL models
	individuals := make([]*model.Individual, len(is))
	for i, ind := range is {
		// Get the tenant for the individual
		t, err := ind.QueryTenant().Only(ctx)
		if err != nil {
			return nil, err
		}

		individuals[i] = &model.Individual{
			ID:        ind.ID,
			Email:     ind.Email,
			FirstName: &ind.FirstName,
			LastName:  &ind.LastName,
			Tenant:    &model.Tenant{ID: t.ID, Code: t.Code},
		}
	}

	return individuals, nil
}

// Individual is the resolver for the individual field.
func (r *queryResolver) Individual(ctx context.Context, id string) (*model.Individual, error) {
	// Query a specific individual by ID
	i, err := r.client.Individual.Query().
		Where(individual.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the individual
	t, err := i.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent individual to the GraphQL model
	return &model.Individual{
		ID:        i.ID,
		Email:     i.Email,
		FirstName: &i.FirstName,
		LastName:  &i.LastName,
		Tenant:    &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// Renters is the resolver for the renters field.
func (r *queryResolver) Renters(ctx context.Context) ([]*model.Renter, error) {
	// Query all renters from the database
	rs, err := r.client.Renter.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent renters to GraphQL models
	renters := make([]*model.Renter, len(rs))
	for i, renter := range rs {
		// Get the tenant for the renter
		t, err := renter.QueryTenant().Only(ctx)
		if err != nil {
			return nil, err
		}

		renters[i] = &model.Renter{
			ID:     renter.ID,
			Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
		}
	}

	return renters, nil
}

// Renter is the resolver for the renter field.
func (r *queryResolver) Renter(ctx context.Context, id string) (*model.Renter, error) {
	// Query a specific renter by ID
	renter, err := r.client.Renter.Query().
		Where(renter.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the renter
	t, err := renter.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent renter to the GraphQL model
	return &model.Renter{
		ID:     renter.ID,
		Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// Rentals is the resolver for the rentals field.
func (r *queryResolver) Rentals(ctx context.Context) ([]*model.Rental, error) {
	// Query all rentals from the database
	rs, err := r.client.Rental.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent rentals to GraphQL models
	rentals := make([]*model.Rental, len(rs))
	for i, rental := range rs {
		// Get the related entities
		t, err := rental.QueryTenant().Only(ctx)
		if err != nil {
			return nil, err
		}

		c, err := rental.QueryCar().Only(ctx)
		if err != nil {
			return nil, err
		}

		renter, err := rental.QueryRenter().Only(ctx)
		if err != nil {
			return nil, err
		}

		rentals[i] = &model.Rental{
			ID:       rental.ID,
			StartsAt: rental.StartsAt,
			EndsAt:   rental.EndsAt,
			Tenant:   &model.Tenant{ID: t.ID, Code: t.Code},
			Car:      &model.Car{ID: c.ID, Model: c.Model},
			Renter:   &model.Renter{ID: renter.ID},
		}
	}

	return rentals, nil
}

// Rental is the resolver for the rental field.
func (r *queryResolver) Rental(ctx context.Context, id string) (*model.Rental, error) {
	// Query a specific rental by ID
	rental, err := r.client.Rental.Query().
		Where(rental.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	// Get the related entities
	t, err := rental.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	c, err := rental.QueryCar().Only(ctx)
	if err != nil {
		return nil, err
	}

	renter, err := rental.QueryRenter().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent rental to the GraphQL model
	return &model.Rental{
		ID:       rental.ID,
		StartsAt: rental.StartsAt,
		EndsAt:   rental.EndsAt,
		Tenant:   &model.Tenant{ID: t.ID, Code: t.Code},
		Car:      &model.Car{ID: c.ID, Model: c.Model},
		Renter:   &model.Renter{ID: renter.ID},
	}, nil
}

// CarOptions is the resolver for the carOptions field.
func (r *queryResolver) CarOptions(ctx context.Context) ([]*model.CarOption, error) {
	// Query all car options from the database
	options, err := r.client.CarOption.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent car options to GraphQL models
	carOptions := make([]*model.CarOption, len(options))
	for i, option := range options {
		// Get the tenant for the car option
		t, err := option.QueryTenant().Only(ctx)
		if err != nil {
			return nil, err
		}

		carOptions[i] = &model.CarOption{
			ID:     option.ID,
			Name:   option.Name,
			Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
		}
	}

	return carOptions, nil
}

// CarOption is the resolver for the carOption field.
func (r *queryResolver) CarOption(ctx context.Context, id string) (*model.CarOption, error) {
	// Query a specific car option by ID
	option, err := r.client.CarOption.Query().
		Where(caroption.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	// Get the tenant for the car option
	t, err := option.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent car option to the GraphQL model
	return &model.CarOption{
		ID:     option.ID,
		Name:   option.Name,
		Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
	}, nil
}

// RentalOptions is the resolver for the rentalOptions field.
func (r *queryResolver) RentalOptions(ctx context.Context) ([]*model.RentalOption, error) {
	// Query all rental options from the database
	options, err := r.client.RentalOption.Query().All(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent rental options to GraphQL models
	rentalOptions := make([]*model.RentalOption, len(options))
	for i, option := range options {
		// Get the related entities
		t, err := option.QueryTenant().Only(ctx)
		if err != nil {
			return nil, err
		}

		rental, err := option.QueryRental().Only(ctx)
		if err != nil {
			return nil, err
		}

		carOption, err := option.QueryOption().Only(ctx)
		if err != nil {
			return nil, err
		}

		rentalOptions[i] = &model.RentalOption{
			ID:     option.ID,
			Count:  option.Count,
			Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
			Rental: &model.Rental{ID: rental.ID},
			Option: &model.CarOption{ID: carOption.ID, Name: carOption.Name},
		}
	}

	return rentalOptions, nil
}

// RentalOption is the resolver for the rentalOption field.
func (r *queryResolver) RentalOption(ctx context.Context, id string) (*model.RentalOption, error) {
	// Query a specific rental option by ID
	option, err := r.client.RentalOption.Query().
		Where(rentaloption.ID(id)).
		Only(ctx)
	if err != nil {
		return nil, err
	}

	// Get the related entities
	t, err := option.QueryTenant().Only(ctx)
	if err != nil {
		return nil, err
	}

	rental, err := option.QueryRental().Only(ctx)
	if err != nil {
		return nil, err
	}

	carOption, err := option.QueryOption().Only(ctx)
	if err != nil {
		return nil, err
	}

	// Convert the ent rental option to the GraphQL model
	return &model.RentalOption{
		ID:     option.ID,
		Count:  option.Count,
		Tenant: &model.Tenant{ID: t.ID, Code: t.Code},
		Rental: &model.Rental{ID: rental.ID},
		Option: &model.CarOption{ID: carOption.ID, Name: carOption.Name},
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type (
	mutationResolver struct{ *Resolver }
	queryResolver    struct{ *Resolver }
)
