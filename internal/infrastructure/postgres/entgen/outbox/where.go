// Code generated by ent, DO NOT EDIT.

package outbox

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContainsFold(FieldID, id))
}

// AggregateType applies equality check predicate on the "aggregate_type" field. It's identical to AggregateTypeEQ.
func AggregateType(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldAggregateType, v))
}

// AggregateID applies equality check predicate on the "aggregate_id" field. It's identical to AggregateIDEQ.
func AggregateID(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldAggregateID, v))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldEventType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldCreatedAt, v))
}

// ProcessedAt applies equality check predicate on the "processed_at" field. It's identical to ProcessedAtEQ.
func ProcessedAt(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldProcessedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldStatus, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldErrorMessage, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldVersion, v))
}

// LockedAt applies equality check predicate on the "locked_at" field. It's identical to LockedAtEQ.
func LockedAt(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldLockedAt, v))
}

// LockedBy applies equality check predicate on the "locked_by" field. It's identical to LockedByEQ.
func LockedBy(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldLockedBy, v))
}

// AggregateTypeEQ applies the EQ predicate on the "aggregate_type" field.
func AggregateTypeEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldAggregateType, v))
}

// AggregateTypeNEQ applies the NEQ predicate on the "aggregate_type" field.
func AggregateTypeNEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldAggregateType, v))
}

// AggregateTypeIn applies the In predicate on the "aggregate_type" field.
func AggregateTypeIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldAggregateType, vs...))
}

// AggregateTypeNotIn applies the NotIn predicate on the "aggregate_type" field.
func AggregateTypeNotIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldAggregateType, vs...))
}

// AggregateTypeGT applies the GT predicate on the "aggregate_type" field.
func AggregateTypeGT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldAggregateType, v))
}

// AggregateTypeGTE applies the GTE predicate on the "aggregate_type" field.
func AggregateTypeGTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldAggregateType, v))
}

// AggregateTypeLT applies the LT predicate on the "aggregate_type" field.
func AggregateTypeLT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldAggregateType, v))
}

// AggregateTypeLTE applies the LTE predicate on the "aggregate_type" field.
func AggregateTypeLTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldAggregateType, v))
}

// AggregateTypeContains applies the Contains predicate on the "aggregate_type" field.
func AggregateTypeContains(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContains(FieldAggregateType, v))
}

// AggregateTypeHasPrefix applies the HasPrefix predicate on the "aggregate_type" field.
func AggregateTypeHasPrefix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasPrefix(FieldAggregateType, v))
}

// AggregateTypeHasSuffix applies the HasSuffix predicate on the "aggregate_type" field.
func AggregateTypeHasSuffix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasSuffix(FieldAggregateType, v))
}

// AggregateTypeEqualFold applies the EqualFold predicate on the "aggregate_type" field.
func AggregateTypeEqualFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEqualFold(FieldAggregateType, v))
}

// AggregateTypeContainsFold applies the ContainsFold predicate on the "aggregate_type" field.
func AggregateTypeContainsFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContainsFold(FieldAggregateType, v))
}

// AggregateIDEQ applies the EQ predicate on the "aggregate_id" field.
func AggregateIDEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldAggregateID, v))
}

// AggregateIDNEQ applies the NEQ predicate on the "aggregate_id" field.
func AggregateIDNEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldAggregateID, v))
}

// AggregateIDIn applies the In predicate on the "aggregate_id" field.
func AggregateIDIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldAggregateID, vs...))
}

// AggregateIDNotIn applies the NotIn predicate on the "aggregate_id" field.
func AggregateIDNotIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldAggregateID, vs...))
}

// AggregateIDGT applies the GT predicate on the "aggregate_id" field.
func AggregateIDGT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldAggregateID, v))
}

// AggregateIDGTE applies the GTE predicate on the "aggregate_id" field.
func AggregateIDGTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldAggregateID, v))
}

// AggregateIDLT applies the LT predicate on the "aggregate_id" field.
func AggregateIDLT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldAggregateID, v))
}

// AggregateIDLTE applies the LTE predicate on the "aggregate_id" field.
func AggregateIDLTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldAggregateID, v))
}

// AggregateIDContains applies the Contains predicate on the "aggregate_id" field.
func AggregateIDContains(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContains(FieldAggregateID, v))
}

// AggregateIDHasPrefix applies the HasPrefix predicate on the "aggregate_id" field.
func AggregateIDHasPrefix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasPrefix(FieldAggregateID, v))
}

// AggregateIDHasSuffix applies the HasSuffix predicate on the "aggregate_id" field.
func AggregateIDHasSuffix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasSuffix(FieldAggregateID, v))
}

// AggregateIDEqualFold applies the EqualFold predicate on the "aggregate_id" field.
func AggregateIDEqualFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEqualFold(FieldAggregateID, v))
}

// AggregateIDContainsFold applies the ContainsFold predicate on the "aggregate_id" field.
func AggregateIDContainsFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContainsFold(FieldAggregateID, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContainsFold(FieldEventType, v))
}

// PayloadIsNil applies the IsNil predicate on the "payload" field.
func PayloadIsNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldIsNull(FieldPayload))
}

// PayloadNotNil applies the NotNil predicate on the "payload" field.
func PayloadNotNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldNotNull(FieldPayload))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldNotNull(FieldCreatedAt))
}

// ProcessedAtEQ applies the EQ predicate on the "processed_at" field.
func ProcessedAtEQ(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldProcessedAt, v))
}

// ProcessedAtNEQ applies the NEQ predicate on the "processed_at" field.
func ProcessedAtNEQ(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldProcessedAt, v))
}

// ProcessedAtIn applies the In predicate on the "processed_at" field.
func ProcessedAtIn(vs ...time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldProcessedAt, vs...))
}

// ProcessedAtNotIn applies the NotIn predicate on the "processed_at" field.
func ProcessedAtNotIn(vs ...time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldProcessedAt, vs...))
}

// ProcessedAtGT applies the GT predicate on the "processed_at" field.
func ProcessedAtGT(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldProcessedAt, v))
}

// ProcessedAtGTE applies the GTE predicate on the "processed_at" field.
func ProcessedAtGTE(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldProcessedAt, v))
}

// ProcessedAtLT applies the LT predicate on the "processed_at" field.
func ProcessedAtLT(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldProcessedAt, v))
}

// ProcessedAtLTE applies the LTE predicate on the "processed_at" field.
func ProcessedAtLTE(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldProcessedAt, v))
}

// ProcessedAtIsNil applies the IsNil predicate on the "processed_at" field.
func ProcessedAtIsNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldIsNull(FieldProcessedAt))
}

// ProcessedAtNotNil applies the NotNil predicate on the "processed_at" field.
func ProcessedAtNotNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldNotNull(FieldProcessedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContainsFold(FieldStatus, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContainsFold(FieldErrorMessage, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldVersion, v))
}

// LockedAtEQ applies the EQ predicate on the "locked_at" field.
func LockedAtEQ(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldLockedAt, v))
}

// LockedAtNEQ applies the NEQ predicate on the "locked_at" field.
func LockedAtNEQ(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldLockedAt, v))
}

// LockedAtIn applies the In predicate on the "locked_at" field.
func LockedAtIn(vs ...time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldLockedAt, vs...))
}

// LockedAtNotIn applies the NotIn predicate on the "locked_at" field.
func LockedAtNotIn(vs ...time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldLockedAt, vs...))
}

// LockedAtGT applies the GT predicate on the "locked_at" field.
func LockedAtGT(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldLockedAt, v))
}

// LockedAtGTE applies the GTE predicate on the "locked_at" field.
func LockedAtGTE(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldLockedAt, v))
}

// LockedAtLT applies the LT predicate on the "locked_at" field.
func LockedAtLT(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldLockedAt, v))
}

// LockedAtLTE applies the LTE predicate on the "locked_at" field.
func LockedAtLTE(v time.Time) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldLockedAt, v))
}

// LockedAtIsNil applies the IsNil predicate on the "locked_at" field.
func LockedAtIsNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldIsNull(FieldLockedAt))
}

// LockedAtNotNil applies the NotNil predicate on the "locked_at" field.
func LockedAtNotNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldNotNull(FieldLockedAt))
}

// LockedByEQ applies the EQ predicate on the "locked_by" field.
func LockedByEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEQ(FieldLockedBy, v))
}

// LockedByNEQ applies the NEQ predicate on the "locked_by" field.
func LockedByNEQ(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNEQ(FieldLockedBy, v))
}

// LockedByIn applies the In predicate on the "locked_by" field.
func LockedByIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldIn(FieldLockedBy, vs...))
}

// LockedByNotIn applies the NotIn predicate on the "locked_by" field.
func LockedByNotIn(vs ...string) predicate.Outbox {
	return predicate.Outbox(sql.FieldNotIn(FieldLockedBy, vs...))
}

// LockedByGT applies the GT predicate on the "locked_by" field.
func LockedByGT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGT(FieldLockedBy, v))
}

// LockedByGTE applies the GTE predicate on the "locked_by" field.
func LockedByGTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldGTE(FieldLockedBy, v))
}

// LockedByLT applies the LT predicate on the "locked_by" field.
func LockedByLT(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLT(FieldLockedBy, v))
}

// LockedByLTE applies the LTE predicate on the "locked_by" field.
func LockedByLTE(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldLTE(FieldLockedBy, v))
}

// LockedByContains applies the Contains predicate on the "locked_by" field.
func LockedByContains(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContains(FieldLockedBy, v))
}

// LockedByHasPrefix applies the HasPrefix predicate on the "locked_by" field.
func LockedByHasPrefix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasPrefix(FieldLockedBy, v))
}

// LockedByHasSuffix applies the HasSuffix predicate on the "locked_by" field.
func LockedByHasSuffix(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldHasSuffix(FieldLockedBy, v))
}

// LockedByIsNil applies the IsNil predicate on the "locked_by" field.
func LockedByIsNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldIsNull(FieldLockedBy))
}

// LockedByNotNil applies the NotNil predicate on the "locked_by" field.
func LockedByNotNil() predicate.Outbox {
	return predicate.Outbox(sql.FieldNotNull(FieldLockedBy))
}

// LockedByEqualFold applies the EqualFold predicate on the "locked_by" field.
func LockedByEqualFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldEqualFold(FieldLockedBy, v))
}

// LockedByContainsFold applies the ContainsFold predicate on the "locked_by" field.
func LockedByContainsFold(v string) predicate.Outbox {
	return predicate.Outbox(sql.FieldContainsFold(FieldLockedBy, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Outbox) predicate.Outbox {
	return predicate.Outbox(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Outbox) predicate.Outbox {
	return predicate.Outbox(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Outbox) predicate.Outbox {
	return predicate.Outbox(sql.NotPredicates(p))
}
