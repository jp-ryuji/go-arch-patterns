// Code generated by ent, DO NOT EDIT.

package outbox

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the outbox type in the database.
	Label = "outbox"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAggregateType holds the string denoting the aggregate_type field in the database.
	FieldAggregateType = "aggregate_type"
	// FieldAggregateID holds the string denoting the aggregate_id field in the database.
	FieldAggregateID = "aggregate_id"
	// FieldEventType holds the string denoting the event_type field in the database.
	FieldEventType = "event_type"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldProcessedAt holds the string denoting the processed_at field in the database.
	FieldProcessedAt = "processed_at"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldLockedAt holds the string denoting the locked_at field in the database.
	FieldLockedAt = "locked_at"
	// FieldLockedBy holds the string denoting the locked_by field in the database.
	FieldLockedBy = "locked_by"
	// Table holds the table name of the outbox in the database.
	Table = "outboxes"
)

// Columns holds all SQL columns for outbox fields.
var Columns = []string{
	FieldID,
	FieldAggregateType,
	FieldAggregateID,
	FieldEventType,
	FieldPayload,
	FieldCreatedAt,
	FieldProcessedAt,
	FieldStatus,
	FieldErrorMessage,
	FieldVersion,
	FieldLockedAt,
	FieldLockedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// AggregateTypeValidator is a validator for the "aggregate_type" field. It is called by the builders before save.
	AggregateTypeValidator func(string) error
	// AggregateIDValidator is a validator for the "aggregate_id" field. It is called by the builders before save.
	AggregateIDValidator func(string) error
	// EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	EventTypeValidator func(string) error
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// ErrorMessageValidator is a validator for the "error_message" field. It is called by the builders before save.
	ErrorMessageValidator func(string) error
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion int64
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Outbox queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAggregateType orders the results by the aggregate_type field.
func ByAggregateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAggregateType, opts...).ToFunc()
}

// ByAggregateID orders the results by the aggregate_id field.
func ByAggregateID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAggregateID, opts...).ToFunc()
}

// ByEventType orders the results by the event_type field.
func ByEventType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByProcessedAt orders the results by the processed_at field.
func ByProcessedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcessedAt, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByLockedAt orders the results by the locked_at field.
func ByLockedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedAt, opts...).ToFunc()
}

// ByLockedBy orders the results by the locked_by field.
func ByLockedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLockedBy, opts...).ToFunc()
}
