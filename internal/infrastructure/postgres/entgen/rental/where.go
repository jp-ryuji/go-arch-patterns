// Code generated by ent, DO NOT EDIT.

package rental

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jp-ryuji/go-sample/internal/infrastructure/postgres/entgen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Rental {
	return predicate.Rental(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Rental {
	return predicate.Rental(sql.FieldContainsFold(FieldID, id))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldTenantID, v))
}

// CarID applies equality check predicate on the "car_id" field. It's identical to CarIDEQ.
func CarID(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldCarID, v))
}

// RenterID applies equality check predicate on the "renter_id" field. It's identical to RenterIDEQ.
func RenterID(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldRenterID, v))
}

// StartsAt applies equality check predicate on the "starts_at" field. It's identical to StartsAtEQ.
func StartsAt(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldStartsAt, v))
}

// EndsAt applies equality check predicate on the "ends_at" field. It's identical to EndsAtEQ.
func EndsAt(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldEndsAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldDeletedAt, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.Rental {
	return predicate.Rental(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.Rental {
	return predicate.Rental(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.Rental {
	return predicate.Rental(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.Rental {
	return predicate.Rental(sql.FieldContainsFold(FieldTenantID, v))
}

// CarIDEQ applies the EQ predicate on the "car_id" field.
func CarIDEQ(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldCarID, v))
}

// CarIDNEQ applies the NEQ predicate on the "car_id" field.
func CarIDNEQ(v string) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldCarID, v))
}

// CarIDIn applies the In predicate on the "car_id" field.
func CarIDIn(vs ...string) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldCarID, vs...))
}

// CarIDNotIn applies the NotIn predicate on the "car_id" field.
func CarIDNotIn(vs ...string) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldCarID, vs...))
}

// CarIDGT applies the GT predicate on the "car_id" field.
func CarIDGT(v string) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldCarID, v))
}

// CarIDGTE applies the GTE predicate on the "car_id" field.
func CarIDGTE(v string) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldCarID, v))
}

// CarIDLT applies the LT predicate on the "car_id" field.
func CarIDLT(v string) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldCarID, v))
}

// CarIDLTE applies the LTE predicate on the "car_id" field.
func CarIDLTE(v string) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldCarID, v))
}

// CarIDContains applies the Contains predicate on the "car_id" field.
func CarIDContains(v string) predicate.Rental {
	return predicate.Rental(sql.FieldContains(FieldCarID, v))
}

// CarIDHasPrefix applies the HasPrefix predicate on the "car_id" field.
func CarIDHasPrefix(v string) predicate.Rental {
	return predicate.Rental(sql.FieldHasPrefix(FieldCarID, v))
}

// CarIDHasSuffix applies the HasSuffix predicate on the "car_id" field.
func CarIDHasSuffix(v string) predicate.Rental {
	return predicate.Rental(sql.FieldHasSuffix(FieldCarID, v))
}

// CarIDEqualFold applies the EqualFold predicate on the "car_id" field.
func CarIDEqualFold(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEqualFold(FieldCarID, v))
}

// CarIDContainsFold applies the ContainsFold predicate on the "car_id" field.
func CarIDContainsFold(v string) predicate.Rental {
	return predicate.Rental(sql.FieldContainsFold(FieldCarID, v))
}

// RenterIDEQ applies the EQ predicate on the "renter_id" field.
func RenterIDEQ(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldRenterID, v))
}

// RenterIDNEQ applies the NEQ predicate on the "renter_id" field.
func RenterIDNEQ(v string) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldRenterID, v))
}

// RenterIDIn applies the In predicate on the "renter_id" field.
func RenterIDIn(vs ...string) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldRenterID, vs...))
}

// RenterIDNotIn applies the NotIn predicate on the "renter_id" field.
func RenterIDNotIn(vs ...string) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldRenterID, vs...))
}

// RenterIDGT applies the GT predicate on the "renter_id" field.
func RenterIDGT(v string) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldRenterID, v))
}

// RenterIDGTE applies the GTE predicate on the "renter_id" field.
func RenterIDGTE(v string) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldRenterID, v))
}

// RenterIDLT applies the LT predicate on the "renter_id" field.
func RenterIDLT(v string) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldRenterID, v))
}

// RenterIDLTE applies the LTE predicate on the "renter_id" field.
func RenterIDLTE(v string) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldRenterID, v))
}

// RenterIDContains applies the Contains predicate on the "renter_id" field.
func RenterIDContains(v string) predicate.Rental {
	return predicate.Rental(sql.FieldContains(FieldRenterID, v))
}

// RenterIDHasPrefix applies the HasPrefix predicate on the "renter_id" field.
func RenterIDHasPrefix(v string) predicate.Rental {
	return predicate.Rental(sql.FieldHasPrefix(FieldRenterID, v))
}

// RenterIDHasSuffix applies the HasSuffix predicate on the "renter_id" field.
func RenterIDHasSuffix(v string) predicate.Rental {
	return predicate.Rental(sql.FieldHasSuffix(FieldRenterID, v))
}

// RenterIDEqualFold applies the EqualFold predicate on the "renter_id" field.
func RenterIDEqualFold(v string) predicate.Rental {
	return predicate.Rental(sql.FieldEqualFold(FieldRenterID, v))
}

// RenterIDContainsFold applies the ContainsFold predicate on the "renter_id" field.
func RenterIDContainsFold(v string) predicate.Rental {
	return predicate.Rental(sql.FieldContainsFold(FieldRenterID, v))
}

// StartsAtEQ applies the EQ predicate on the "starts_at" field.
func StartsAtEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldStartsAt, v))
}

// StartsAtNEQ applies the NEQ predicate on the "starts_at" field.
func StartsAtNEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldStartsAt, v))
}

// StartsAtIn applies the In predicate on the "starts_at" field.
func StartsAtIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldStartsAt, vs...))
}

// StartsAtNotIn applies the NotIn predicate on the "starts_at" field.
func StartsAtNotIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldStartsAt, vs...))
}

// StartsAtGT applies the GT predicate on the "starts_at" field.
func StartsAtGT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldStartsAt, v))
}

// StartsAtGTE applies the GTE predicate on the "starts_at" field.
func StartsAtGTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldStartsAt, v))
}

// StartsAtLT applies the LT predicate on the "starts_at" field.
func StartsAtLT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldStartsAt, v))
}

// StartsAtLTE applies the LTE predicate on the "starts_at" field.
func StartsAtLTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldStartsAt, v))
}

// StartsAtIsNil applies the IsNil predicate on the "starts_at" field.
func StartsAtIsNil() predicate.Rental {
	return predicate.Rental(sql.FieldIsNull(FieldStartsAt))
}

// StartsAtNotNil applies the NotNil predicate on the "starts_at" field.
func StartsAtNotNil() predicate.Rental {
	return predicate.Rental(sql.FieldNotNull(FieldStartsAt))
}

// EndsAtEQ applies the EQ predicate on the "ends_at" field.
func EndsAtEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldEndsAt, v))
}

// EndsAtNEQ applies the NEQ predicate on the "ends_at" field.
func EndsAtNEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldEndsAt, v))
}

// EndsAtIn applies the In predicate on the "ends_at" field.
func EndsAtIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldEndsAt, vs...))
}

// EndsAtNotIn applies the NotIn predicate on the "ends_at" field.
func EndsAtNotIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldEndsAt, vs...))
}

// EndsAtGT applies the GT predicate on the "ends_at" field.
func EndsAtGT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldEndsAt, v))
}

// EndsAtGTE applies the GTE predicate on the "ends_at" field.
func EndsAtGTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldEndsAt, v))
}

// EndsAtLT applies the LT predicate on the "ends_at" field.
func EndsAtLT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldEndsAt, v))
}

// EndsAtLTE applies the LTE predicate on the "ends_at" field.
func EndsAtLTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldEndsAt, v))
}

// EndsAtIsNil applies the IsNil predicate on the "ends_at" field.
func EndsAtIsNil() predicate.Rental {
	return predicate.Rental(sql.FieldIsNull(FieldEndsAt))
}

// EndsAtNotNil applies the NotNil predicate on the "ends_at" field.
func EndsAtNotNil() predicate.Rental {
	return predicate.Rental(sql.FieldNotNull(FieldEndsAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Rental {
	return predicate.Rental(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Rental {
	return predicate.Rental(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Rental {
	return predicate.Rental(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Rental {
	return predicate.Rental(sql.FieldNotNull(FieldUpdatedAt))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Rental {
	return predicate.Rental(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Rental {
	return predicate.Rental(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Rental {
	return predicate.Rental(sql.FieldNotNull(FieldDeletedAt))
}

// HasTenant applies the HasEdge predicate on the "tenant" edge.
func HasTenant() predicate.Rental {
	return predicate.Rental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTenantWith applies the HasEdge predicate on the "tenant" edge with a given conditions (other predicates).
func HasTenantWith(preds ...predicate.Tenant) predicate.Rental {
	return predicate.Rental(func(s *sql.Selector) {
		step := newTenantStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCar applies the HasEdge predicate on the "car" edge.
func HasCar() predicate.Rental {
	return predicate.Rental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCarWith applies the HasEdge predicate on the "car" edge with a given conditions (other predicates).
func HasCarWith(preds ...predicate.Car) predicate.Rental {
	return predicate.Rental(func(s *sql.Selector) {
		step := newCarStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRenter applies the HasEdge predicate on the "renter" edge.
func HasRenter() predicate.Rental {
	return predicate.Rental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RenterTable, RenterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRenterWith applies the HasEdge predicate on the "renter" edge with a given conditions (other predicates).
func HasRenterWith(preds ...predicate.Renter) predicate.Rental {
	return predicate.Rental(func(s *sql.Selector) {
		step := newRenterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRentalOptions applies the HasEdge predicate on the "rental_options" edge.
func HasRentalOptions() predicate.Rental {
	return predicate.Rental(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RentalOptionsTable, RentalOptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRentalOptionsWith applies the HasEdge predicate on the "rental_options" edge with a given conditions (other predicates).
func HasRentalOptionsWith(preds ...predicate.RentalOption) predicate.Rental {
	return predicate.Rental(func(s *sql.Selector) {
		step := newRentalOptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rental) predicate.Rental {
	return predicate.Rental(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rental) predicate.Rental {
	return predicate.Rental(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rental) predicate.Rental {
	return predicate.Rental(sql.NotPredicates(p))
}
