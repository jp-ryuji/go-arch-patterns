// Code generated by ent, DO NOT EDIT.

package rental

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rental type in the database.
	Label = "rental"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCarID holds the string denoting the car_id field in the database.
	FieldCarID = "car_id"
	// FieldRenterID holds the string denoting the renter_id field in the database.
	FieldRenterID = "renter_id"
	// FieldStartsAt holds the string denoting the starts_at field in the database.
	FieldStartsAt = "starts_at"
	// FieldEndsAt holds the string denoting the ends_at field in the database.
	FieldEndsAt = "ends_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// EdgeCar holds the string denoting the car edge name in mutations.
	EdgeCar = "car"
	// EdgeRenter holds the string denoting the renter edge name in mutations.
	EdgeRenter = "renter"
	// EdgeRentalOptions holds the string denoting the rental_options edge name in mutations.
	EdgeRentalOptions = "rental_options"
	// Table holds the table name of the rental in the database.
	Table = "rentals"
	// TenantTable is the table that holds the tenant relation/edge.
	TenantTable = "rentals"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
	// TenantColumn is the table column denoting the tenant relation/edge.
	TenantColumn = "tenant_id"
	// CarTable is the table that holds the car relation/edge.
	CarTable = "rentals"
	// CarInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarInverseTable = "cars"
	// CarColumn is the table column denoting the car relation/edge.
	CarColumn = "car_id"
	// RenterTable is the table that holds the renter relation/edge.
	RenterTable = "rentals"
	// RenterInverseTable is the table name for the Renter entity.
	// It exists in this package in order to avoid circular dependency with the "renter" package.
	RenterInverseTable = "renters"
	// RenterColumn is the table column denoting the renter relation/edge.
	RenterColumn = "renter_id"
	// RentalOptionsTable is the table that holds the rental_options relation/edge.
	RentalOptionsTable = "rental_options"
	// RentalOptionsInverseTable is the table name for the RentalOption entity.
	// It exists in this package in order to avoid circular dependency with the "rentaloption" package.
	RentalOptionsInverseTable = "rental_options"
	// RentalOptionsColumn is the table column denoting the rental_options relation/edge.
	RentalOptionsColumn = "rental_id"
)

// Columns holds all SQL columns for rental fields.
var Columns = []string{
	FieldID,
	FieldTenantID,
	FieldCarID,
	FieldRenterID,
	FieldStartsAt,
	FieldEndsAt,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	TenantIDValidator func(string) error
	// CarIDValidator is a validator for the "car_id" field. It is called by the builders before save.
	CarIDValidator func(string) error
	// RenterIDValidator is a validator for the "renter_id" field. It is called by the builders before save.
	RenterIDValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Rental queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCarID orders the results by the car_id field.
func ByCarID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCarID, opts...).ToFunc()
}

// ByRenterID orders the results by the renter_id field.
func ByRenterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRenterID, opts...).ToFunc()
}

// ByStartsAt orders the results by the starts_at field.
func ByStartsAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartsAt, opts...).ToFunc()
}

// ByEndsAt orders the results by the ends_at field.
func ByEndsAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndsAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByTenantField orders the results by tenant field.
func ByTenantField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), sql.OrderByField(field, opts...))
	}
}

// ByCarField orders the results by car field.
func ByCarField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarStep(), sql.OrderByField(field, opts...))
	}
}

// ByRenterField orders the results by renter field.
func ByRenterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRenterStep(), sql.OrderByField(field, opts...))
	}
}

// ByRentalOptionsCount orders the results by rental_options count.
func ByRentalOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRentalOptionsStep(), opts...)
	}
}

// ByRentalOptions orders the results by rental_options terms.
func ByRentalOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRentalOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TenantTable, TenantColumn),
	)
}
func newCarStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CarTable, CarColumn),
	)
}
func newRenterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RenterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RenterTable, RenterColumn),
	)
}
func newRentalOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RentalOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RentalOptionsTable, RentalOptionsColumn),
	)
}
