// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/outbox"
)

// OutboxCreate is the builder for creating a Outbox entity.
type OutboxCreate struct {
	config
	mutation *OutboxMutation
	hooks    []Hook
}

// SetAggregateType sets the "aggregate_type" field.
func (_c *OutboxCreate) SetAggregateType(v string) *OutboxCreate {
	_c.mutation.SetAggregateType(v)
	return _c
}

// SetAggregateID sets the "aggregate_id" field.
func (_c *OutboxCreate) SetAggregateID(v string) *OutboxCreate {
	_c.mutation.SetAggregateID(v)
	return _c
}

// SetEventType sets the "event_type" field.
func (_c *OutboxCreate) SetEventType(v string) *OutboxCreate {
	_c.mutation.SetEventType(v)
	return _c
}

// SetPayload sets the "payload" field.
func (_c *OutboxCreate) SetPayload(v map[string]interface{}) *OutboxCreate {
	_c.mutation.SetPayload(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *OutboxCreate) SetCreatedAt(v time.Time) *OutboxCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OutboxCreate) SetNillableCreatedAt(v *time.Time) *OutboxCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetProcessedAt sets the "processed_at" field.
func (_c *OutboxCreate) SetProcessedAt(v time.Time) *OutboxCreate {
	_c.mutation.SetProcessedAt(v)
	return _c
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (_c *OutboxCreate) SetNillableProcessedAt(v *time.Time) *OutboxCreate {
	if v != nil {
		_c.SetProcessedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *OutboxCreate) SetStatus(v string) *OutboxCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *OutboxCreate) SetNillableStatus(v *string) *OutboxCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetErrorMessage sets the "error_message" field.
func (_c *OutboxCreate) SetErrorMessage(v string) *OutboxCreate {
	_c.mutation.SetErrorMessage(v)
	return _c
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_c *OutboxCreate) SetNillableErrorMessage(v *string) *OutboxCreate {
	if v != nil {
		_c.SetErrorMessage(*v)
	}
	return _c
}

// SetVersion sets the "version" field.
func (_c *OutboxCreate) SetVersion(v int64) *OutboxCreate {
	_c.mutation.SetVersion(v)
	return _c
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_c *OutboxCreate) SetNillableVersion(v *int64) *OutboxCreate {
	if v != nil {
		_c.SetVersion(*v)
	}
	return _c
}

// SetLockedAt sets the "locked_at" field.
func (_c *OutboxCreate) SetLockedAt(v time.Time) *OutboxCreate {
	_c.mutation.SetLockedAt(v)
	return _c
}

// SetNillableLockedAt sets the "locked_at" field if the given value is not nil.
func (_c *OutboxCreate) SetNillableLockedAt(v *time.Time) *OutboxCreate {
	if v != nil {
		_c.SetLockedAt(*v)
	}
	return _c
}

// SetLockedBy sets the "locked_by" field.
func (_c *OutboxCreate) SetLockedBy(v string) *OutboxCreate {
	_c.mutation.SetLockedBy(v)
	return _c
}

// SetNillableLockedBy sets the "locked_by" field if the given value is not nil.
func (_c *OutboxCreate) SetNillableLockedBy(v *string) *OutboxCreate {
	if v != nil {
		_c.SetLockedBy(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OutboxCreate) SetID(v string) *OutboxCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the OutboxMutation object of the builder.
func (_c *OutboxCreate) Mutation() *OutboxMutation {
	return _c.mutation
}

// Save creates the Outbox in the database.
func (_c *OutboxCreate) Save(ctx context.Context) (*Outbox, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OutboxCreate) SaveX(ctx context.Context) *Outbox {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OutboxCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OutboxCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OutboxCreate) defaults() {
	if _, ok := _c.mutation.Status(); !ok {
		v := outbox.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Version(); !ok {
		v := outbox.DefaultVersion
		_c.mutation.SetVersion(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OutboxCreate) check() error {
	if _, ok := _c.mutation.AggregateType(); !ok {
		return &ValidationError{Name: "aggregate_type", err: errors.New(`entgen: missing required field "Outbox.aggregate_type"`)}
	}
	if v, ok := _c.mutation.AggregateType(); ok {
		if err := outbox.AggregateTypeValidator(v); err != nil {
			return &ValidationError{Name: "aggregate_type", err: fmt.Errorf(`entgen: validator failed for field "Outbox.aggregate_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AggregateID(); !ok {
		return &ValidationError{Name: "aggregate_id", err: errors.New(`entgen: missing required field "Outbox.aggregate_id"`)}
	}
	if v, ok := _c.mutation.AggregateID(); ok {
		if err := outbox.AggregateIDValidator(v); err != nil {
			return &ValidationError{Name: "aggregate_id", err: fmt.Errorf(`entgen: validator failed for field "Outbox.aggregate_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.EventType(); !ok {
		return &ValidationError{Name: "event_type", err: errors.New(`entgen: missing required field "Outbox.event_type"`)}
	}
	if v, ok := _c.mutation.EventType(); ok {
		if err := outbox.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`entgen: validator failed for field "Outbox.event_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`entgen: missing required field "Outbox.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := outbox.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entgen: validator failed for field "Outbox.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ErrorMessage(); ok {
		if err := outbox.ErrorMessageValidator(v); err != nil {
			return &ValidationError{Name: "error_message", err: fmt.Errorf(`entgen: validator failed for field "Outbox.error_message": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`entgen: missing required field "Outbox.version"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := outbox.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`entgen: validator failed for field "Outbox.id": %w`, err)}
		}
	}
	return nil
}

func (_c *OutboxCreate) sqlSave(ctx context.Context) (*Outbox, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Outbox.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OutboxCreate) createSpec() (*Outbox, *sqlgraph.CreateSpec) {
	var (
		_node = &Outbox{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(outbox.Table, sqlgraph.NewFieldSpec(outbox.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.AggregateType(); ok {
		_spec.SetField(outbox.FieldAggregateType, field.TypeString, value)
		_node.AggregateType = value
	}
	if value, ok := _c.mutation.AggregateID(); ok {
		_spec.SetField(outbox.FieldAggregateID, field.TypeString, value)
		_node.AggregateID = value
	}
	if value, ok := _c.mutation.EventType(); ok {
		_spec.SetField(outbox.FieldEventType, field.TypeString, value)
		_node.EventType = value
	}
	if value, ok := _c.mutation.Payload(); ok {
		_spec.SetField(outbox.FieldPayload, field.TypeJSON, value)
		_node.Payload = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(outbox.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.ProcessedAt(); ok {
		_spec.SetField(outbox.FieldProcessedAt, field.TypeTime, value)
		_node.ProcessedAt = &value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(outbox.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ErrorMessage(); ok {
		_spec.SetField(outbox.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = &value
	}
	if value, ok := _c.mutation.Version(); ok {
		_spec.SetField(outbox.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := _c.mutation.LockedAt(); ok {
		_spec.SetField(outbox.FieldLockedAt, field.TypeTime, value)
		_node.LockedAt = &value
	}
	if value, ok := _c.mutation.LockedBy(); ok {
		_spec.SetField(outbox.FieldLockedBy, field.TypeString, value)
		_node.LockedBy = &value
	}
	return _node, _spec
}

// OutboxCreateBulk is the builder for creating many Outbox entities in bulk.
type OutboxCreateBulk struct {
	config
	err      error
	builders []*OutboxCreate
}

// Save creates the Outbox entities in the database.
func (_c *OutboxCreateBulk) Save(ctx context.Context) ([]*Outbox, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Outbox, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OutboxMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OutboxCreateBulk) SaveX(ctx context.Context) []*Outbox {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OutboxCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OutboxCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
