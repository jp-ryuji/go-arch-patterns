// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jp-ryuji/go-sample/internal/infrastructure/postgres/entgen/renter"
	"github.com/jp-ryuji/go-sample/internal/infrastructure/postgres/entgen/tenant"
)

// Renter is the model entity for the Renter schema.
type Renter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// RenterEntityID holds the value of the "renter_entity_id" field.
	RenterEntityID string `json:"renter_entity_id,omitempty"`
	// RenterEntityType holds the value of the "renter_entity_type" field.
	RenterEntityType string `json:"renter_entity_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RenterQuery when eager-loading is set.
	Edges              RenterEdges `json:"edges"`
	company_renters    *string
	individual_renters *string
	selectValues       sql.SelectValues
}

// RenterEdges holds the relations/edges for other nodes in the graph.
type RenterEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Rentals holds the value of the rentals edge.
	Rentals []*Rental `json:"rentals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RenterEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RentalsOrErr returns the Rentals value or an error if the edge
// was not loaded in eager-loading.
func (e RenterEdges) RentalsOrErr() ([]*Rental, error) {
	if e.loadedTypes[1] {
		return e.Rentals, nil
	}
	return nil, &NotLoadedError{edge: "rentals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Renter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case renter.FieldID, renter.FieldTenantID, renter.FieldRenterEntityID, renter.FieldRenterEntityType:
			values[i] = new(sql.NullString)
		case renter.FieldCreatedAt, renter.FieldUpdatedAt, renter.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case renter.ForeignKeys[0]: // company_renters
			values[i] = new(sql.NullString)
		case renter.ForeignKeys[1]: // individual_renters
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Renter fields.
func (_m *Renter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case renter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case renter.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case renter.FieldRenterEntityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field renter_entity_id", values[i])
			} else if value.Valid {
				_m.RenterEntityID = value.String
			}
		case renter.FieldRenterEntityType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field renter_entity_type", values[i])
			} else if value.Valid {
				_m.RenterEntityType = value.String
			}
		case renter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case renter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case renter.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		case renter.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field company_renters", values[i])
			} else if value.Valid {
				_m.company_renters = new(string)
				*_m.company_renters = value.String
			}
		case renter.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field individual_renters", values[i])
			} else if value.Valid {
				_m.individual_renters = new(string)
				*_m.individual_renters = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Renter.
// This includes values selected through modifiers, order, etc.
func (_m *Renter) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Renter entity.
func (_m *Renter) QueryTenant() *TenantQuery {
	return NewRenterClient(_m.config).QueryTenant(_m)
}

// QueryRentals queries the "rentals" edge of the Renter entity.
func (_m *Renter) QueryRentals() *RentalQuery {
	return NewRenterClient(_m.config).QueryRentals(_m)
}

// Update returns a builder for updating this Renter.
// Note that you need to call Renter.Unwrap() before calling this method if this Renter
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Renter) Update() *RenterUpdateOne {
	return NewRenterClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Renter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Renter) Unwrap() *Renter {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Renter is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Renter) String() string {
	var builder strings.Builder
	builder.WriteString("Renter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("renter_entity_id=")
	builder.WriteString(_m.RenterEntityID)
	builder.WriteString(", ")
	builder.WriteString("renter_entity_type=")
	builder.WriteString(_m.RenterEntityType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Renters is a parsable slice of Renter.
type Renters []*Renter
