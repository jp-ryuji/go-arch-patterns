// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/tenant"
)

// Tenant is the model entity for the Tenant schema.
type Tenant struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TenantQuery when eager-loading is set.
	Edges        TenantEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TenantEdges holds the relations/edges for other nodes in the graph.
type TenantEdges struct {
	// Cars holds the value of the cars edge.
	Cars []*Car `json:"cars,omitempty"`
	// Companies holds the value of the companies edge.
	Companies []*Company `json:"companies,omitempty"`
	// Individuals holds the value of the individuals edge.
	Individuals []*Individual `json:"individuals,omitempty"`
	// Options holds the value of the options edge.
	Options []*CarOption `json:"options,omitempty"`
	// RentalOptions holds the value of the rental_options edge.
	RentalOptions []*RentalOption `json:"rental_options,omitempty"`
	// Rentals holds the value of the rentals edge.
	Rentals []*Rental `json:"rentals,omitempty"`
	// Renters holds the value of the renters edge.
	Renters []*Renter `json:"renters,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// CarsOrErr returns the Cars value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) CarsOrErr() ([]*Car, error) {
	if e.loadedTypes[0] {
		return e.Cars, nil
	}
	return nil, &NotLoadedError{edge: "cars"}
}

// CompaniesOrErr returns the Companies value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) CompaniesOrErr() ([]*Company, error) {
	if e.loadedTypes[1] {
		return e.Companies, nil
	}
	return nil, &NotLoadedError{edge: "companies"}
}

// IndividualsOrErr returns the Individuals value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) IndividualsOrErr() ([]*Individual, error) {
	if e.loadedTypes[2] {
		return e.Individuals, nil
	}
	return nil, &NotLoadedError{edge: "individuals"}
}

// OptionsOrErr returns the Options value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) OptionsOrErr() ([]*CarOption, error) {
	if e.loadedTypes[3] {
		return e.Options, nil
	}
	return nil, &NotLoadedError{edge: "options"}
}

// RentalOptionsOrErr returns the RentalOptions value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) RentalOptionsOrErr() ([]*RentalOption, error) {
	if e.loadedTypes[4] {
		return e.RentalOptions, nil
	}
	return nil, &NotLoadedError{edge: "rental_options"}
}

// RentalsOrErr returns the Rentals value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) RentalsOrErr() ([]*Rental, error) {
	if e.loadedTypes[5] {
		return e.Rentals, nil
	}
	return nil, &NotLoadedError{edge: "rentals"}
}

// RentersOrErr returns the Renters value or an error if the edge
// was not loaded in eager-loading.
func (e TenantEdges) RentersOrErr() ([]*Renter, error) {
	if e.loadedTypes[6] {
		return e.Renters, nil
	}
	return nil, &NotLoadedError{edge: "renters"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tenant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID, tenant.FieldCode:
			values[i] = new(sql.NullString)
		case tenant.FieldCreatedAt, tenant.FieldUpdatedAt, tenant.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tenant fields.
func (_m *Tenant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tenant.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case tenant.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				_m.Code = value.String
			}
		case tenant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case tenant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case tenant.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tenant.
// This includes values selected through modifiers, order, etc.
func (_m *Tenant) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryCars queries the "cars" edge of the Tenant entity.
func (_m *Tenant) QueryCars() *CarQuery {
	return NewTenantClient(_m.config).QueryCars(_m)
}

// QueryCompanies queries the "companies" edge of the Tenant entity.
func (_m *Tenant) QueryCompanies() *CompanyQuery {
	return NewTenantClient(_m.config).QueryCompanies(_m)
}

// QueryIndividuals queries the "individuals" edge of the Tenant entity.
func (_m *Tenant) QueryIndividuals() *IndividualQuery {
	return NewTenantClient(_m.config).QueryIndividuals(_m)
}

// QueryOptions queries the "options" edge of the Tenant entity.
func (_m *Tenant) QueryOptions() *CarOptionQuery {
	return NewTenantClient(_m.config).QueryOptions(_m)
}

// QueryRentalOptions queries the "rental_options" edge of the Tenant entity.
func (_m *Tenant) QueryRentalOptions() *RentalOptionQuery {
	return NewTenantClient(_m.config).QueryRentalOptions(_m)
}

// QueryRentals queries the "rentals" edge of the Tenant entity.
func (_m *Tenant) QueryRentals() *RentalQuery {
	return NewTenantClient(_m.config).QueryRentals(_m)
}

// QueryRenters queries the "renters" edge of the Tenant entity.
func (_m *Tenant) QueryRenters() *RenterQuery {
	return NewTenantClient(_m.config).QueryRenters(_m)
}

// Update returns a builder for updating this Tenant.
// Note that you need to call Tenant.Unwrap() before calling this method if this Tenant
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Tenant) Update() *TenantUpdateOne {
	return NewTenantClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Tenant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Tenant) Unwrap() *Tenant {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Tenant is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Tenant) String() string {
	var builder strings.Builder
	builder.WriteString("Tenant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("code=")
	builder.WriteString(_m.Code)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Tenants is a parsable slice of Tenant.
type Tenants []*Tenant
