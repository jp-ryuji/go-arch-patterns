// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/caroption"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/predicate"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/rental"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/rentaloption"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/tenant"
)

// RentalOptionUpdate is the builder for updating RentalOption entities.
type RentalOptionUpdate struct {
	config
	hooks    []Hook
	mutation *RentalOptionMutation
}

// Where appends a list predicates to the RentalOptionUpdate builder.
func (_u *RentalOptionUpdate) Where(ps ...predicate.RentalOption) *RentalOptionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTenantID sets the "tenant_id" field.
func (_u *RentalOptionUpdate) SetTenantID(v string) *RentalOptionUpdate {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *RentalOptionUpdate) SetNillableTenantID(v *string) *RentalOptionUpdate {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetRentalID sets the "rental_id" field.
func (_u *RentalOptionUpdate) SetRentalID(v string) *RentalOptionUpdate {
	_u.mutation.SetRentalID(v)
	return _u
}

// SetNillableRentalID sets the "rental_id" field if the given value is not nil.
func (_u *RentalOptionUpdate) SetNillableRentalID(v *string) *RentalOptionUpdate {
	if v != nil {
		_u.SetRentalID(*v)
	}
	return _u
}

// SetOptionID sets the "option_id" field.
func (_u *RentalOptionUpdate) SetOptionID(v string) *RentalOptionUpdate {
	_u.mutation.SetOptionID(v)
	return _u
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (_u *RentalOptionUpdate) SetNillableOptionID(v *string) *RentalOptionUpdate {
	if v != nil {
		_u.SetOptionID(*v)
	}
	return _u
}

// SetCount sets the "count" field.
func (_u *RentalOptionUpdate) SetCount(v int) *RentalOptionUpdate {
	_u.mutation.ResetCount()
	_u.mutation.SetCount(v)
	return _u
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (_u *RentalOptionUpdate) SetNillableCount(v *int) *RentalOptionUpdate {
	if v != nil {
		_u.SetCount(*v)
	}
	return _u
}

// AddCount adds value to the "count" field.
func (_u *RentalOptionUpdate) AddCount(v int) *RentalOptionUpdate {
	_u.mutation.AddCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *RentalOptionUpdate) SetCreatedAt(v time.Time) *RentalOptionUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *RentalOptionUpdate) SetNillableCreatedAt(v *time.Time) *RentalOptionUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *RentalOptionUpdate) ClearCreatedAt() *RentalOptionUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RentalOptionUpdate) SetUpdatedAt(v time.Time) *RentalOptionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RentalOptionUpdate) SetNillableUpdatedAt(v *time.Time) *RentalOptionUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RentalOptionUpdate) ClearUpdatedAt() *RentalOptionUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RentalOptionUpdate) SetDeletedAt(v time.Time) *RentalOptionUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RentalOptionUpdate) SetNillableDeletedAt(v *time.Time) *RentalOptionUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RentalOptionUpdate) ClearDeletedAt() *RentalOptionUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *RentalOptionUpdate) SetTenant(v *Tenant) *RentalOptionUpdate {
	return _u.SetTenantID(v.ID)
}

// SetRental sets the "rental" edge to the Rental entity.
func (_u *RentalOptionUpdate) SetRental(v *Rental) *RentalOptionUpdate {
	return _u.SetRentalID(v.ID)
}

// SetOption sets the "option" edge to the CarOption entity.
func (_u *RentalOptionUpdate) SetOption(v *CarOption) *RentalOptionUpdate {
	return _u.SetOptionID(v.ID)
}

// Mutation returns the RentalOptionMutation object of the builder.
func (_u *RentalOptionUpdate) Mutation() *RentalOptionMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *RentalOptionUpdate) ClearTenant() *RentalOptionUpdate {
	_u.mutation.ClearTenant()
	return _u
}

// ClearRental clears the "rental" edge to the Rental entity.
func (_u *RentalOptionUpdate) ClearRental() *RentalOptionUpdate {
	_u.mutation.ClearRental()
	return _u
}

// ClearOption clears the "option" edge to the CarOption entity.
func (_u *RentalOptionUpdate) ClearOption() *RentalOptionUpdate {
	_u.mutation.ClearOption()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RentalOptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RentalOptionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RentalOptionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RentalOptionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RentalOptionUpdate) check() error {
	if v, ok := _u.mutation.TenantID(); ok {
		if err := rentaloption.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`entgen: validator failed for field "RentalOption.tenant_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RentalID(); ok {
		if err := rentaloption.RentalIDValidator(v); err != nil {
			return &ValidationError{Name: "rental_id", err: fmt.Errorf(`entgen: validator failed for field "RentalOption.rental_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.OptionID(); ok {
		if err := rentaloption.OptionIDValidator(v); err != nil {
			return &ValidationError{Name: "option_id", err: fmt.Errorf(`entgen: validator failed for field "RentalOption.option_id": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "RentalOption.tenant"`)
	}
	if _u.mutation.RentalCleared() && len(_u.mutation.RentalIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "RentalOption.rental"`)
	}
	if _u.mutation.OptionCleared() && len(_u.mutation.OptionIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "RentalOption.option"`)
	}
	return nil
}

func (_u *RentalOptionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rentaloption.Table, rentaloption.Columns, sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Count(); ok {
		_spec.SetField(rentaloption.FieldCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCount(); ok {
		_spec.AddField(rentaloption.FieldCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(rentaloption.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(rentaloption.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(rentaloption.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(rentaloption.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(rentaloption.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(rentaloption.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.TenantTable,
			Columns: []string{rentaloption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.TenantTable,
			Columns: []string{rentaloption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.RentalTable,
			Columns: []string{rentaloption.RentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.RentalTable,
			Columns: []string{rentaloption.RentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.OptionTable,
			Columns: []string{rentaloption.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.OptionTable,
			Columns: []string{rentaloption.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rentaloption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RentalOptionUpdateOne is the builder for updating a single RentalOption entity.
type RentalOptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RentalOptionMutation
}

// SetTenantID sets the "tenant_id" field.
func (_u *RentalOptionUpdateOne) SetTenantID(v string) *RentalOptionUpdateOne {
	_u.mutation.SetTenantID(v)
	return _u
}

// SetNillableTenantID sets the "tenant_id" field if the given value is not nil.
func (_u *RentalOptionUpdateOne) SetNillableTenantID(v *string) *RentalOptionUpdateOne {
	if v != nil {
		_u.SetTenantID(*v)
	}
	return _u
}

// SetRentalID sets the "rental_id" field.
func (_u *RentalOptionUpdateOne) SetRentalID(v string) *RentalOptionUpdateOne {
	_u.mutation.SetRentalID(v)
	return _u
}

// SetNillableRentalID sets the "rental_id" field if the given value is not nil.
func (_u *RentalOptionUpdateOne) SetNillableRentalID(v *string) *RentalOptionUpdateOne {
	if v != nil {
		_u.SetRentalID(*v)
	}
	return _u
}

// SetOptionID sets the "option_id" field.
func (_u *RentalOptionUpdateOne) SetOptionID(v string) *RentalOptionUpdateOne {
	_u.mutation.SetOptionID(v)
	return _u
}

// SetNillableOptionID sets the "option_id" field if the given value is not nil.
func (_u *RentalOptionUpdateOne) SetNillableOptionID(v *string) *RentalOptionUpdateOne {
	if v != nil {
		_u.SetOptionID(*v)
	}
	return _u
}

// SetCount sets the "count" field.
func (_u *RentalOptionUpdateOne) SetCount(v int) *RentalOptionUpdateOne {
	_u.mutation.ResetCount()
	_u.mutation.SetCount(v)
	return _u
}

// SetNillableCount sets the "count" field if the given value is not nil.
func (_u *RentalOptionUpdateOne) SetNillableCount(v *int) *RentalOptionUpdateOne {
	if v != nil {
		_u.SetCount(*v)
	}
	return _u
}

// AddCount adds value to the "count" field.
func (_u *RentalOptionUpdateOne) AddCount(v int) *RentalOptionUpdateOne {
	_u.mutation.AddCount(v)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *RentalOptionUpdateOne) SetCreatedAt(v time.Time) *RentalOptionUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *RentalOptionUpdateOne) SetNillableCreatedAt(v *time.Time) *RentalOptionUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *RentalOptionUpdateOne) ClearCreatedAt() *RentalOptionUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RentalOptionUpdateOne) SetUpdatedAt(v time.Time) *RentalOptionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RentalOptionUpdateOne) SetNillableUpdatedAt(v *time.Time) *RentalOptionUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RentalOptionUpdateOne) ClearUpdatedAt() *RentalOptionUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RentalOptionUpdateOne) SetDeletedAt(v time.Time) *RentalOptionUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RentalOptionUpdateOne) SetNillableDeletedAt(v *time.Time) *RentalOptionUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RentalOptionUpdateOne) ClearDeletedAt() *RentalOptionUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (_u *RentalOptionUpdateOne) SetTenant(v *Tenant) *RentalOptionUpdateOne {
	return _u.SetTenantID(v.ID)
}

// SetRental sets the "rental" edge to the Rental entity.
func (_u *RentalOptionUpdateOne) SetRental(v *Rental) *RentalOptionUpdateOne {
	return _u.SetRentalID(v.ID)
}

// SetOption sets the "option" edge to the CarOption entity.
func (_u *RentalOptionUpdateOne) SetOption(v *CarOption) *RentalOptionUpdateOne {
	return _u.SetOptionID(v.ID)
}

// Mutation returns the RentalOptionMutation object of the builder.
func (_u *RentalOptionUpdateOne) Mutation() *RentalOptionMutation {
	return _u.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (_u *RentalOptionUpdateOne) ClearTenant() *RentalOptionUpdateOne {
	_u.mutation.ClearTenant()
	return _u
}

// ClearRental clears the "rental" edge to the Rental entity.
func (_u *RentalOptionUpdateOne) ClearRental() *RentalOptionUpdateOne {
	_u.mutation.ClearRental()
	return _u
}

// ClearOption clears the "option" edge to the CarOption entity.
func (_u *RentalOptionUpdateOne) ClearOption() *RentalOptionUpdateOne {
	_u.mutation.ClearOption()
	return _u
}

// Where appends a list predicates to the RentalOptionUpdate builder.
func (_u *RentalOptionUpdateOne) Where(ps ...predicate.RentalOption) *RentalOptionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RentalOptionUpdateOne) Select(field string, fields ...string) *RentalOptionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RentalOption entity.
func (_u *RentalOptionUpdateOne) Save(ctx context.Context) (*RentalOption, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RentalOptionUpdateOne) SaveX(ctx context.Context) *RentalOption {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RentalOptionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RentalOptionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RentalOptionUpdateOne) check() error {
	if v, ok := _u.mutation.TenantID(); ok {
		if err := rentaloption.TenantIDValidator(v); err != nil {
			return &ValidationError{Name: "tenant_id", err: fmt.Errorf(`entgen: validator failed for field "RentalOption.tenant_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RentalID(); ok {
		if err := rentaloption.RentalIDValidator(v); err != nil {
			return &ValidationError{Name: "rental_id", err: fmt.Errorf(`entgen: validator failed for field "RentalOption.rental_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.OptionID(); ok {
		if err := rentaloption.OptionIDValidator(v); err != nil {
			return &ValidationError{Name: "option_id", err: fmt.Errorf(`entgen: validator failed for field "RentalOption.option_id": %w`, err)}
		}
	}
	if _u.mutation.TenantCleared() && len(_u.mutation.TenantIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "RentalOption.tenant"`)
	}
	if _u.mutation.RentalCleared() && len(_u.mutation.RentalIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "RentalOption.rental"`)
	}
	if _u.mutation.OptionCleared() && len(_u.mutation.OptionIDs()) > 0 {
		return errors.New(`entgen: clearing a required unique edge "RentalOption.option"`)
	}
	return nil
}

func (_u *RentalOptionUpdateOne) sqlSave(ctx context.Context) (_node *RentalOption, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(rentaloption.Table, rentaloption.Columns, sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "RentalOption.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rentaloption.FieldID)
		for _, f := range fields {
			if !rentaloption.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != rentaloption.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Count(); ok {
		_spec.SetField(rentaloption.FieldCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCount(); ok {
		_spec.AddField(rentaloption.FieldCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(rentaloption.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(rentaloption.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(rentaloption.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(rentaloption.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(rentaloption.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(rentaloption.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.TenantTable,
			Columns: []string{rentaloption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.TenantTable,
			Columns: []string{rentaloption.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.RentalTable,
			Columns: []string{rentaloption.RentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.RentalTable,
			Columns: []string{rentaloption.RentalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.OptionTable,
			Columns: []string{rentaloption.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rentaloption.OptionTable,
			Columns: []string{rentaloption.OptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RentalOption{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rentaloption.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
