// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/outbox"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/predicate"
)

// OutboxUpdate is the builder for updating Outbox entities.
type OutboxUpdate struct {
	config
	hooks    []Hook
	mutation *OutboxMutation
}

// Where appends a list predicates to the OutboxUpdate builder.
func (_u *OutboxUpdate) Where(ps ...predicate.Outbox) *OutboxUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAggregateType sets the "aggregate_type" field.
func (_u *OutboxUpdate) SetAggregateType(v string) *OutboxUpdate {
	_u.mutation.SetAggregateType(v)
	return _u
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableAggregateType(v *string) *OutboxUpdate {
	if v != nil {
		_u.SetAggregateType(*v)
	}
	return _u
}

// SetAggregateID sets the "aggregate_id" field.
func (_u *OutboxUpdate) SetAggregateID(v string) *OutboxUpdate {
	_u.mutation.SetAggregateID(v)
	return _u
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableAggregateID(v *string) *OutboxUpdate {
	if v != nil {
		_u.SetAggregateID(*v)
	}
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *OutboxUpdate) SetEventType(v string) *OutboxUpdate {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableEventType(v *string) *OutboxUpdate {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *OutboxUpdate) SetPayload(v map[string]interface{}) *OutboxUpdate {
	_u.mutation.SetPayload(v)
	return _u
}

// ClearPayload clears the value of the "payload" field.
func (_u *OutboxUpdate) ClearPayload() *OutboxUpdate {
	_u.mutation.ClearPayload()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *OutboxUpdate) SetCreatedAt(v time.Time) *OutboxUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableCreatedAt(v *time.Time) *OutboxUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *OutboxUpdate) ClearCreatedAt() *OutboxUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetProcessedAt sets the "processed_at" field.
func (_u *OutboxUpdate) SetProcessedAt(v time.Time) *OutboxUpdate {
	_u.mutation.SetProcessedAt(v)
	return _u
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableProcessedAt(v *time.Time) *OutboxUpdate {
	if v != nil {
		_u.SetProcessedAt(*v)
	}
	return _u
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (_u *OutboxUpdate) ClearProcessedAt() *OutboxUpdate {
	_u.mutation.ClearProcessedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *OutboxUpdate) SetStatus(v string) *OutboxUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableStatus(v *string) *OutboxUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *OutboxUpdate) SetErrorMessage(v string) *OutboxUpdate {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableErrorMessage(v *string) *OutboxUpdate {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *OutboxUpdate) ClearErrorMessage() *OutboxUpdate {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetVersion sets the "version" field.
func (_u *OutboxUpdate) SetVersion(v int64) *OutboxUpdate {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableVersion(v *int64) *OutboxUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *OutboxUpdate) AddVersion(v int64) *OutboxUpdate {
	_u.mutation.AddVersion(v)
	return _u
}

// SetLockedAt sets the "locked_at" field.
func (_u *OutboxUpdate) SetLockedAt(v time.Time) *OutboxUpdate {
	_u.mutation.SetLockedAt(v)
	return _u
}

// SetNillableLockedAt sets the "locked_at" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableLockedAt(v *time.Time) *OutboxUpdate {
	if v != nil {
		_u.SetLockedAt(*v)
	}
	return _u
}

// ClearLockedAt clears the value of the "locked_at" field.
func (_u *OutboxUpdate) ClearLockedAt() *OutboxUpdate {
	_u.mutation.ClearLockedAt()
	return _u
}

// SetLockedBy sets the "locked_by" field.
func (_u *OutboxUpdate) SetLockedBy(v string) *OutboxUpdate {
	_u.mutation.SetLockedBy(v)
	return _u
}

// SetNillableLockedBy sets the "locked_by" field if the given value is not nil.
func (_u *OutboxUpdate) SetNillableLockedBy(v *string) *OutboxUpdate {
	if v != nil {
		_u.SetLockedBy(*v)
	}
	return _u
}

// ClearLockedBy clears the value of the "locked_by" field.
func (_u *OutboxUpdate) ClearLockedBy() *OutboxUpdate {
	_u.mutation.ClearLockedBy()
	return _u
}

// Mutation returns the OutboxMutation object of the builder.
func (_u *OutboxUpdate) Mutation() *OutboxMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OutboxUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OutboxUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OutboxUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OutboxUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OutboxUpdate) check() error {
	if v, ok := _u.mutation.AggregateType(); ok {
		if err := outbox.AggregateTypeValidator(v); err != nil {
			return &ValidationError{Name: "aggregate_type", err: fmt.Errorf(`entgen: validator failed for field "Outbox.aggregate_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AggregateID(); ok {
		if err := outbox.AggregateIDValidator(v); err != nil {
			return &ValidationError{Name: "aggregate_id", err: fmt.Errorf(`entgen: validator failed for field "Outbox.aggregate_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EventType(); ok {
		if err := outbox.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`entgen: validator failed for field "Outbox.event_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := outbox.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entgen: validator failed for field "Outbox.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ErrorMessage(); ok {
		if err := outbox.ErrorMessageValidator(v); err != nil {
			return &ValidationError{Name: "error_message", err: fmt.Errorf(`entgen: validator failed for field "Outbox.error_message": %w`, err)}
		}
	}
	return nil
}

func (_u *OutboxUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(outbox.Table, outbox.Columns, sqlgraph.NewFieldSpec(outbox.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AggregateType(); ok {
		_spec.SetField(outbox.FieldAggregateType, field.TypeString, value)
	}
	if value, ok := _u.mutation.AggregateID(); ok {
		_spec.SetField(outbox.FieldAggregateID, field.TypeString, value)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(outbox.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(outbox.FieldPayload, field.TypeJSON, value)
	}
	if _u.mutation.PayloadCleared() {
		_spec.ClearField(outbox.FieldPayload, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(outbox.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(outbox.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ProcessedAt(); ok {
		_spec.SetField(outbox.FieldProcessedAt, field.TypeTime, value)
	}
	if _u.mutation.ProcessedAtCleared() {
		_spec.ClearField(outbox.FieldProcessedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(outbox.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(outbox.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(outbox.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(outbox.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(outbox.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.LockedAt(); ok {
		_spec.SetField(outbox.FieldLockedAt, field.TypeTime, value)
	}
	if _u.mutation.LockedAtCleared() {
		_spec.ClearField(outbox.FieldLockedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LockedBy(); ok {
		_spec.SetField(outbox.FieldLockedBy, field.TypeString, value)
	}
	if _u.mutation.LockedByCleared() {
		_spec.ClearField(outbox.FieldLockedBy, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OutboxUpdateOne is the builder for updating a single Outbox entity.
type OutboxUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OutboxMutation
}

// SetAggregateType sets the "aggregate_type" field.
func (_u *OutboxUpdateOne) SetAggregateType(v string) *OutboxUpdateOne {
	_u.mutation.SetAggregateType(v)
	return _u
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableAggregateType(v *string) *OutboxUpdateOne {
	if v != nil {
		_u.SetAggregateType(*v)
	}
	return _u
}

// SetAggregateID sets the "aggregate_id" field.
func (_u *OutboxUpdateOne) SetAggregateID(v string) *OutboxUpdateOne {
	_u.mutation.SetAggregateID(v)
	return _u
}

// SetNillableAggregateID sets the "aggregate_id" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableAggregateID(v *string) *OutboxUpdateOne {
	if v != nil {
		_u.SetAggregateID(*v)
	}
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *OutboxUpdateOne) SetEventType(v string) *OutboxUpdateOne {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableEventType(v *string) *OutboxUpdateOne {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *OutboxUpdateOne) SetPayload(v map[string]interface{}) *OutboxUpdateOne {
	_u.mutation.SetPayload(v)
	return _u
}

// ClearPayload clears the value of the "payload" field.
func (_u *OutboxUpdateOne) ClearPayload() *OutboxUpdateOne {
	_u.mutation.ClearPayload()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *OutboxUpdateOne) SetCreatedAt(v time.Time) *OutboxUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableCreatedAt(v *time.Time) *OutboxUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *OutboxUpdateOne) ClearCreatedAt() *OutboxUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetProcessedAt sets the "processed_at" field.
func (_u *OutboxUpdateOne) SetProcessedAt(v time.Time) *OutboxUpdateOne {
	_u.mutation.SetProcessedAt(v)
	return _u
}

// SetNillableProcessedAt sets the "processed_at" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableProcessedAt(v *time.Time) *OutboxUpdateOne {
	if v != nil {
		_u.SetProcessedAt(*v)
	}
	return _u
}

// ClearProcessedAt clears the value of the "processed_at" field.
func (_u *OutboxUpdateOne) ClearProcessedAt() *OutboxUpdateOne {
	_u.mutation.ClearProcessedAt()
	return _u
}

// SetStatus sets the "status" field.
func (_u *OutboxUpdateOne) SetStatus(v string) *OutboxUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableStatus(v *string) *OutboxUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetErrorMessage sets the "error_message" field.
func (_u *OutboxUpdateOne) SetErrorMessage(v string) *OutboxUpdateOne {
	_u.mutation.SetErrorMessage(v)
	return _u
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableErrorMessage(v *string) *OutboxUpdateOne {
	if v != nil {
		_u.SetErrorMessage(*v)
	}
	return _u
}

// ClearErrorMessage clears the value of the "error_message" field.
func (_u *OutboxUpdateOne) ClearErrorMessage() *OutboxUpdateOne {
	_u.mutation.ClearErrorMessage()
	return _u
}

// SetVersion sets the "version" field.
func (_u *OutboxUpdateOne) SetVersion(v int64) *OutboxUpdateOne {
	_u.mutation.ResetVersion()
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableVersion(v *int64) *OutboxUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// AddVersion adds value to the "version" field.
func (_u *OutboxUpdateOne) AddVersion(v int64) *OutboxUpdateOne {
	_u.mutation.AddVersion(v)
	return _u
}

// SetLockedAt sets the "locked_at" field.
func (_u *OutboxUpdateOne) SetLockedAt(v time.Time) *OutboxUpdateOne {
	_u.mutation.SetLockedAt(v)
	return _u
}

// SetNillableLockedAt sets the "locked_at" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableLockedAt(v *time.Time) *OutboxUpdateOne {
	if v != nil {
		_u.SetLockedAt(*v)
	}
	return _u
}

// ClearLockedAt clears the value of the "locked_at" field.
func (_u *OutboxUpdateOne) ClearLockedAt() *OutboxUpdateOne {
	_u.mutation.ClearLockedAt()
	return _u
}

// SetLockedBy sets the "locked_by" field.
func (_u *OutboxUpdateOne) SetLockedBy(v string) *OutboxUpdateOne {
	_u.mutation.SetLockedBy(v)
	return _u
}

// SetNillableLockedBy sets the "locked_by" field if the given value is not nil.
func (_u *OutboxUpdateOne) SetNillableLockedBy(v *string) *OutboxUpdateOne {
	if v != nil {
		_u.SetLockedBy(*v)
	}
	return _u
}

// ClearLockedBy clears the value of the "locked_by" field.
func (_u *OutboxUpdateOne) ClearLockedBy() *OutboxUpdateOne {
	_u.mutation.ClearLockedBy()
	return _u
}

// Mutation returns the OutboxMutation object of the builder.
func (_u *OutboxUpdateOne) Mutation() *OutboxMutation {
	return _u.mutation
}

// Where appends a list predicates to the OutboxUpdate builder.
func (_u *OutboxUpdateOne) Where(ps ...predicate.Outbox) *OutboxUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OutboxUpdateOne) Select(field string, fields ...string) *OutboxUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Outbox entity.
func (_u *OutboxUpdateOne) Save(ctx context.Context) (*Outbox, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OutboxUpdateOne) SaveX(ctx context.Context) *Outbox {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OutboxUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OutboxUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OutboxUpdateOne) check() error {
	if v, ok := _u.mutation.AggregateType(); ok {
		if err := outbox.AggregateTypeValidator(v); err != nil {
			return &ValidationError{Name: "aggregate_type", err: fmt.Errorf(`entgen: validator failed for field "Outbox.aggregate_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AggregateID(); ok {
		if err := outbox.AggregateIDValidator(v); err != nil {
			return &ValidationError{Name: "aggregate_id", err: fmt.Errorf(`entgen: validator failed for field "Outbox.aggregate_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.EventType(); ok {
		if err := outbox.EventTypeValidator(v); err != nil {
			return &ValidationError{Name: "event_type", err: fmt.Errorf(`entgen: validator failed for field "Outbox.event_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := outbox.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`entgen: validator failed for field "Outbox.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ErrorMessage(); ok {
		if err := outbox.ErrorMessageValidator(v); err != nil {
			return &ValidationError{Name: "error_message", err: fmt.Errorf(`entgen: validator failed for field "Outbox.error_message": %w`, err)}
		}
	}
	return nil
}

func (_u *OutboxUpdateOne) sqlSave(ctx context.Context) (_node *Outbox, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(outbox.Table, outbox.Columns, sqlgraph.NewFieldSpec(outbox.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "Outbox.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, outbox.FieldID)
		for _, f := range fields {
			if !outbox.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != outbox.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AggregateType(); ok {
		_spec.SetField(outbox.FieldAggregateType, field.TypeString, value)
	}
	if value, ok := _u.mutation.AggregateID(); ok {
		_spec.SetField(outbox.FieldAggregateID, field.TypeString, value)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(outbox.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(outbox.FieldPayload, field.TypeJSON, value)
	}
	if _u.mutation.PayloadCleared() {
		_spec.ClearField(outbox.FieldPayload, field.TypeJSON)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(outbox.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(outbox.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ProcessedAt(); ok {
		_spec.SetField(outbox.FieldProcessedAt, field.TypeTime, value)
	}
	if _u.mutation.ProcessedAtCleared() {
		_spec.ClearField(outbox.FieldProcessedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(outbox.FieldStatus, field.TypeString, value)
	}
	if value, ok := _u.mutation.ErrorMessage(); ok {
		_spec.SetField(outbox.FieldErrorMessage, field.TypeString, value)
	}
	if _u.mutation.ErrorMessageCleared() {
		_spec.ClearField(outbox.FieldErrorMessage, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(outbox.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedVersion(); ok {
		_spec.AddField(outbox.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.LockedAt(); ok {
		_spec.SetField(outbox.FieldLockedAt, field.TypeTime, value)
	}
	if _u.mutation.LockedAtCleared() {
		_spec.ClearField(outbox.FieldLockedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LockedBy(); ok {
		_spec.SetField(outbox.FieldLockedBy, field.TypeString, value)
	}
	if _u.mutation.LockedByCleared() {
		_spec.ClearField(outbox.FieldLockedBy, field.TypeString)
	}
	_node = &Outbox{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{outbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
