// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/ent/schema"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/car"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/caroption"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/company"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/individual"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/outbox"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/rental"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/rentaloption"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/renter"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/tenant"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	carFields := schema.Car{}.Fields()
	_ = carFields
	// carDescTenantID is the schema descriptor for tenant_id field.
	carDescTenantID := carFields[1].Descriptor()
	// car.TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	car.TenantIDValidator = func() func(string) error {
		validators := carDescTenantID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tenant string) error {
			for _, fn := range fns {
				if err := fn(tenant); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// carDescModel is the schema descriptor for model field.
	carDescModel := carFields[2].Descriptor()
	// car.ModelValidator is a validator for the "model" field. It is called by the builders before save.
	car.ModelValidator = func() func(string) error {
		validators := carDescModel.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(model string) error {
			for _, fn := range fns {
				if err := fn(model); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// carDescID is the schema descriptor for id field.
	carDescID := carFields[0].Descriptor()
	// car.IDValidator is a validator for the "id" field. It is called by the builders before save.
	car.IDValidator = func() func(string) error {
		validators := carDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	caroptionFields := schema.CarOption{}.Fields()
	_ = caroptionFields
	// caroptionDescTenantID is the schema descriptor for tenant_id field.
	caroptionDescTenantID := caroptionFields[1].Descriptor()
	// caroption.TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	caroption.TenantIDValidator = func() func(string) error {
		validators := caroptionDescTenantID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tenant string) error {
			for _, fn := range fns {
				if err := fn(tenant); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// caroptionDescName is the schema descriptor for name field.
	caroptionDescName := caroptionFields[2].Descriptor()
	// caroption.NameValidator is a validator for the "name" field. It is called by the builders before save.
	caroption.NameValidator = func() func(string) error {
		validators := caroptionDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// caroptionDescID is the schema descriptor for id field.
	caroptionDescID := caroptionFields[0].Descriptor()
	// caroption.IDValidator is a validator for the "id" field. It is called by the builders before save.
	caroption.IDValidator = func() func(string) error {
		validators := caroptionDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	companyFields := schema.Company{}.Fields()
	_ = companyFields
	// companyDescRenterID is the schema descriptor for renter_id field.
	companyDescRenterID := companyFields[1].Descriptor()
	// company.RenterIDValidator is a validator for the "renter_id" field. It is called by the builders before save.
	company.RenterIDValidator = func() func(string) error {
		validators := companyDescRenterID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(renter string) error {
			for _, fn := range fns {
				if err := fn(renter); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// companyDescTenantID is the schema descriptor for tenant_id field.
	companyDescTenantID := companyFields[2].Descriptor()
	// company.TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	company.TenantIDValidator = func() func(string) error {
		validators := companyDescTenantID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tenant string) error {
			for _, fn := range fns {
				if err := fn(tenant); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// companyDescName is the schema descriptor for name field.
	companyDescName := companyFields[3].Descriptor()
	// company.NameValidator is a validator for the "name" field. It is called by the builders before save.
	company.NameValidator = func() func(string) error {
		validators := companyDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// companyDescCompanySize is the schema descriptor for company_size field.
	companyDescCompanySize := companyFields[4].Descriptor()
	// company.CompanySizeValidator is a validator for the "company_size" field. It is called by the builders before save.
	company.CompanySizeValidator = func() func(string) error {
		validators := companyDescCompanySize.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(company_size string) error {
			for _, fn := range fns {
				if err := fn(company_size); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// companyDescID is the schema descriptor for id field.
	companyDescID := companyFields[0].Descriptor()
	// company.IDValidator is a validator for the "id" field. It is called by the builders before save.
	company.IDValidator = func() func(string) error {
		validators := companyDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	individualFields := schema.Individual{}.Fields()
	_ = individualFields
	// individualDescRenterID is the schema descriptor for renter_id field.
	individualDescRenterID := individualFields[1].Descriptor()
	// individual.RenterIDValidator is a validator for the "renter_id" field. It is called by the builders before save.
	individual.RenterIDValidator = func() func(string) error {
		validators := individualDescRenterID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(renter string) error {
			for _, fn := range fns {
				if err := fn(renter); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// individualDescTenantID is the schema descriptor for tenant_id field.
	individualDescTenantID := individualFields[2].Descriptor()
	// individual.TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	individual.TenantIDValidator = func() func(string) error {
		validators := individualDescTenantID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tenant string) error {
			for _, fn := range fns {
				if err := fn(tenant); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// individualDescEmail is the schema descriptor for email field.
	individualDescEmail := individualFields[3].Descriptor()
	// individual.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	individual.EmailValidator = func() func(string) error {
		validators := individualDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// individualDescFirstName is the schema descriptor for first_name field.
	individualDescFirstName := individualFields[4].Descriptor()
	// individual.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	individual.FirstNameValidator = individualDescFirstName.Validators[0].(func(string) error)
	// individualDescLastName is the schema descriptor for last_name field.
	individualDescLastName := individualFields[5].Descriptor()
	// individual.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	individual.LastNameValidator = individualDescLastName.Validators[0].(func(string) error)
	// individualDescID is the schema descriptor for id field.
	individualDescID := individualFields[0].Descriptor()
	// individual.IDValidator is a validator for the "id" field. It is called by the builders before save.
	individual.IDValidator = func() func(string) error {
		validators := individualDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	outboxFields := schema.Outbox{}.Fields()
	_ = outboxFields
	// outboxDescAggregateType is the schema descriptor for aggregate_type field.
	outboxDescAggregateType := outboxFields[1].Descriptor()
	// outbox.AggregateTypeValidator is a validator for the "aggregate_type" field. It is called by the builders before save.
	outbox.AggregateTypeValidator = func() func(string) error {
		validators := outboxDescAggregateType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(aggregate_type string) error {
			for _, fn := range fns {
				if err := fn(aggregate_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// outboxDescAggregateID is the schema descriptor for aggregate_id field.
	outboxDescAggregateID := outboxFields[2].Descriptor()
	// outbox.AggregateIDValidator is a validator for the "aggregate_id" field. It is called by the builders before save.
	outbox.AggregateIDValidator = func() func(string) error {
		validators := outboxDescAggregateID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(aggregate_id string) error {
			for _, fn := range fns {
				if err := fn(aggregate_id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// outboxDescEventType is the schema descriptor for event_type field.
	outboxDescEventType := outboxFields[3].Descriptor()
	// outbox.EventTypeValidator is a validator for the "event_type" field. It is called by the builders before save.
	outbox.EventTypeValidator = func() func(string) error {
		validators := outboxDescEventType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(event_type string) error {
			for _, fn := range fns {
				if err := fn(event_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// outboxDescStatus is the schema descriptor for status field.
	outboxDescStatus := outboxFields[7].Descriptor()
	// outbox.DefaultStatus holds the default value on creation for the status field.
	outbox.DefaultStatus = outboxDescStatus.Default.(string)
	// outbox.StatusValidator is a validator for the "status" field. It is called by the builders before save.
	outbox.StatusValidator = outboxDescStatus.Validators[0].(func(string) error)
	// outboxDescErrorMessage is the schema descriptor for error_message field.
	outboxDescErrorMessage := outboxFields[8].Descriptor()
	// outbox.ErrorMessageValidator is a validator for the "error_message" field. It is called by the builders before save.
	outbox.ErrorMessageValidator = outboxDescErrorMessage.Validators[0].(func(string) error)
	// outboxDescVersion is the schema descriptor for version field.
	outboxDescVersion := outboxFields[9].Descriptor()
	// outbox.DefaultVersion holds the default value on creation for the version field.
	outbox.DefaultVersion = outboxDescVersion.Default.(int64)
	// outboxDescID is the schema descriptor for id field.
	outboxDescID := outboxFields[0].Descriptor()
	// outbox.IDValidator is a validator for the "id" field. It is called by the builders before save.
	outbox.IDValidator = func() func(string) error {
		validators := outboxDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	rentalFields := schema.Rental{}.Fields()
	_ = rentalFields
	// rentalDescTenantID is the schema descriptor for tenant_id field.
	rentalDescTenantID := rentalFields[1].Descriptor()
	// rental.TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	rental.TenantIDValidator = func() func(string) error {
		validators := rentalDescTenantID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tenant string) error {
			for _, fn := range fns {
				if err := fn(tenant); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rentalDescCarID is the schema descriptor for car_id field.
	rentalDescCarID := rentalFields[2].Descriptor()
	// rental.CarIDValidator is a validator for the "car_id" field. It is called by the builders before save.
	rental.CarIDValidator = func() func(string) error {
		validators := rentalDescCarID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(car string) error {
			for _, fn := range fns {
				if err := fn(car); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rentalDescRenterID is the schema descriptor for renter_id field.
	rentalDescRenterID := rentalFields[3].Descriptor()
	// rental.RenterIDValidator is a validator for the "renter_id" field. It is called by the builders before save.
	rental.RenterIDValidator = func() func(string) error {
		validators := rentalDescRenterID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(renter string) error {
			for _, fn := range fns {
				if err := fn(renter); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rentalDescID is the schema descriptor for id field.
	rentalDescID := rentalFields[0].Descriptor()
	// rental.IDValidator is a validator for the "id" field. It is called by the builders before save.
	rental.IDValidator = func() func(string) error {
		validators := rentalDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	rentaloptionFields := schema.RentalOption{}.Fields()
	_ = rentaloptionFields
	// rentaloptionDescTenantID is the schema descriptor for tenant_id field.
	rentaloptionDescTenantID := rentaloptionFields[1].Descriptor()
	// rentaloption.TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	rentaloption.TenantIDValidator = func() func(string) error {
		validators := rentaloptionDescTenantID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tenant string) error {
			for _, fn := range fns {
				if err := fn(tenant); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rentaloptionDescRentalID is the schema descriptor for rental_id field.
	rentaloptionDescRentalID := rentaloptionFields[2].Descriptor()
	// rentaloption.RentalIDValidator is a validator for the "rental_id" field. It is called by the builders before save.
	rentaloption.RentalIDValidator = func() func(string) error {
		validators := rentaloptionDescRentalID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(rental string) error {
			for _, fn := range fns {
				if err := fn(rental); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rentaloptionDescOptionID is the schema descriptor for option_id field.
	rentaloptionDescOptionID := rentaloptionFields[3].Descriptor()
	// rentaloption.OptionIDValidator is a validator for the "option_id" field. It is called by the builders before save.
	rentaloption.OptionIDValidator = func() func(string) error {
		validators := rentaloptionDescOptionID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(option string) error {
			for _, fn := range fns {
				if err := fn(option); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// rentaloptionDescID is the schema descriptor for id field.
	rentaloptionDescID := rentaloptionFields[0].Descriptor()
	// rentaloption.IDValidator is a validator for the "id" field. It is called by the builders before save.
	rentaloption.IDValidator = func() func(string) error {
		validators := rentaloptionDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	renterFields := schema.Renter{}.Fields()
	_ = renterFields
	// renterDescTenantID is the schema descriptor for tenant_id field.
	renterDescTenantID := renterFields[1].Descriptor()
	// renter.TenantIDValidator is a validator for the "tenant_id" field. It is called by the builders before save.
	renter.TenantIDValidator = func() func(string) error {
		validators := renterDescTenantID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tenant string) error {
			for _, fn := range fns {
				if err := fn(tenant); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// renterDescType is the schema descriptor for type field.
	renterDescType := renterFields[2].Descriptor()
	// renter.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	renter.TypeValidator = func() func(string) error {
		validators := renterDescType.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(_type string) error {
			for _, fn := range fns {
				if err := fn(_type); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// renterDescID is the schema descriptor for id field.
	renterDescID := renterFields[0].Descriptor()
	// renter.IDValidator is a validator for the "id" field. It is called by the builders before save.
	renter.IDValidator = func() func(string) error {
		validators := renterDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	tenantFields := schema.Tenant{}.Fields()
	_ = tenantFields
	// tenantDescCode is the schema descriptor for code field.
	tenantDescCode := tenantFields[1].Descriptor()
	// tenant.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	tenant.CodeValidator = func() func(string) error {
		validators := tenantDescCode.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(code string) error {
			for _, fn := range fns {
				if err := fn(code); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// tenantDescID is the schema descriptor for id field.
	tenantDescID := tenantFields[0].Descriptor()
	// tenant.IDValidator is a validator for the "id" field. It is called by the builders before save.
	tenant.IDValidator = func() func(string) error {
		validators := tenantDescID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(id string) error {
			for _, fn := range fns {
				if err := fn(id); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
