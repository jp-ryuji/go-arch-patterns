// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/car"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/rental"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/renter"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/tenant"
)

// Rental is the model entity for the Rental schema.
type Rental struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CarID holds the value of the "car_id" field.
	CarID string `json:"car_id,omitempty"`
	// RenterID holds the value of the "renter_id" field.
	RenterID string `json:"renter_id,omitempty"`
	// StartsAt holds the value of the "starts_at" field.
	StartsAt time.Time `json:"starts_at,omitempty"`
	// EndsAt holds the value of the "ends_at" field.
	EndsAt time.Time `json:"ends_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RentalQuery when eager-loading is set.
	Edges        RentalEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RentalEdges holds the relations/edges for other nodes in the graph.
type RentalEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Car holds the value of the car edge.
	Car *Car `json:"car,omitempty"`
	// Renter holds the value of the renter edge.
	Renter *Renter `json:"renter,omitempty"`
	// RentalOptions holds the value of the rental_options edge.
	RentalOptions []*RentalOption `json:"rental_options,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentalEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// CarOrErr returns the Car value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentalEdges) CarOrErr() (*Car, error) {
	if e.Car != nil {
		return e.Car, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: car.Label}
	}
	return nil, &NotLoadedError{edge: "car"}
}

// RenterOrErr returns the Renter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentalEdges) RenterOrErr() (*Renter, error) {
	if e.Renter != nil {
		return e.Renter, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: renter.Label}
	}
	return nil, &NotLoadedError{edge: "renter"}
}

// RentalOptionsOrErr returns the RentalOptions value or an error if the edge
// was not loaded in eager-loading.
func (e RentalEdges) RentalOptionsOrErr() ([]*RentalOption, error) {
	if e.loadedTypes[3] {
		return e.RentalOptions, nil
	}
	return nil, &NotLoadedError{edge: "rental_options"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rental) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rental.FieldID, rental.FieldTenantID, rental.FieldCarID, rental.FieldRenterID:
			values[i] = new(sql.NullString)
		case rental.FieldStartsAt, rental.FieldEndsAt, rental.FieldCreatedAt, rental.FieldUpdatedAt, rental.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rental fields.
func (_m *Rental) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rental.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case rental.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case rental.FieldCarID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field car_id", values[i])
			} else if value.Valid {
				_m.CarID = value.String
			}
		case rental.FieldRenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field renter_id", values[i])
			} else if value.Valid {
				_m.RenterID = value.String
			}
		case rental.FieldStartsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field starts_at", values[i])
			} else if value.Valid {
				_m.StartsAt = value.Time
			}
		case rental.FieldEndsAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ends_at", values[i])
			} else if value.Valid {
				_m.EndsAt = value.Time
			}
		case rental.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case rental.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case rental.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rental.
// This includes values selected through modifiers, order, etc.
func (_m *Rental) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Rental entity.
func (_m *Rental) QueryTenant() *TenantQuery {
	return NewRentalClient(_m.config).QueryTenant(_m)
}

// QueryCar queries the "car" edge of the Rental entity.
func (_m *Rental) QueryCar() *CarQuery {
	return NewRentalClient(_m.config).QueryCar(_m)
}

// QueryRenter queries the "renter" edge of the Rental entity.
func (_m *Rental) QueryRenter() *RenterQuery {
	return NewRentalClient(_m.config).QueryRenter(_m)
}

// QueryRentalOptions queries the "rental_options" edge of the Rental entity.
func (_m *Rental) QueryRentalOptions() *RentalOptionQuery {
	return NewRentalClient(_m.config).QueryRentalOptions(_m)
}

// Update returns a builder for updating this Rental.
// Note that you need to call Rental.Unwrap() before calling this method if this Rental
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Rental) Update() *RentalUpdateOne {
	return NewRentalClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Rental entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Rental) Unwrap() *Rental {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Rental is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Rental) String() string {
	var builder strings.Builder
	builder.WriteString("Rental(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("car_id=")
	builder.WriteString(_m.CarID)
	builder.WriteString(", ")
	builder.WriteString("renter_id=")
	builder.WriteString(_m.RenterID)
	builder.WriteString(", ")
	builder.WriteString("starts_at=")
	builder.WriteString(_m.StartsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ends_at=")
	builder.WriteString(_m.EndsAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Rentals is a parsable slice of Rental.
type Rentals []*Rental
