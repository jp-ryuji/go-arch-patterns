// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/individual"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/renter"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/tenant"
)

// Individual is the model entity for the Individual schema.
type Individual struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// RenterID holds the value of the "renter_id" field.
	RenterID string `json:"renter_id"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IndividualQuery when eager-loading is set.
	Edges        IndividualEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IndividualEdges holds the relations/edges for other nodes in the graph.
type IndividualEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// Renter holds the value of the renter edge.
	Renter *Renter `json:"renter,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IndividualEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// RenterOrErr returns the Renter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IndividualEdges) RenterOrErr() (*Renter, error) {
	if e.Renter != nil {
		return e.Renter, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: renter.Label}
	}
	return nil, &NotLoadedError{edge: "renter"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Individual) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case individual.FieldID, individual.FieldRenterID, individual.FieldTenantID, individual.FieldEmail, individual.FieldFirstName, individual.FieldLastName:
			values[i] = new(sql.NullString)
		case individual.FieldCreatedAt, individual.FieldUpdatedAt, individual.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Individual fields.
func (_m *Individual) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case individual.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case individual.FieldRenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field renter_id", values[i])
			} else if value.Valid {
				_m.RenterID = value.String
			}
		case individual.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case individual.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				_m.Email = value.String
			}
		case individual.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				_m.FirstName = value.String
			}
		case individual.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				_m.LastName = value.String
			}
		case individual.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case individual.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case individual.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = new(time.Time)
				*_m.DeletedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Individual.
// This includes values selected through modifiers, order, etc.
func (_m *Individual) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Individual entity.
func (_m *Individual) QueryTenant() *TenantQuery {
	return NewIndividualClient(_m.config).QueryTenant(_m)
}

// QueryRenter queries the "renter" edge of the Individual entity.
func (_m *Individual) QueryRenter() *RenterQuery {
	return NewIndividualClient(_m.config).QueryRenter(_m)
}

// Update returns a builder for updating this Individual.
// Note that you need to call Individual.Unwrap() before calling this method if this Individual
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Individual) Update() *IndividualUpdateOne {
	return NewIndividualClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Individual entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Individual) Unwrap() *Individual {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Individual is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Individual) String() string {
	var builder strings.Builder
	builder.WriteString("Individual(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("renter_id=")
	builder.WriteString(_m.RenterID)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(_m.Email)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(_m.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(_m.LastName)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Individuals is a parsable slice of Individual.
type Individuals []*Individual
