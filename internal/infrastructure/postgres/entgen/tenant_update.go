// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/car"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/caroption"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/company"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/individual"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/predicate"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/rental"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/rentaloption"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/renter"
	"github.com/jp-ryuji/go-ddd/internal/infrastructure/postgres/entgen/tenant"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks    []Hook
	mutation *TenantMutation
}

// Where appends a list predicates to the TenantUpdate builder.
func (_u *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCode sets the "code" field.
func (_u *TenantUpdate) SetCode(v string) *TenantUpdate {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableCode(v *string) *TenantUpdate {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *TenantUpdate) SetCreatedAt(v time.Time) *TenantUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableCreatedAt(v *time.Time) *TenantUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *TenantUpdate) ClearCreatedAt() *TenantUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TenantUpdate) SetUpdatedAt(v time.Time) *TenantUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableUpdatedAt(v *time.Time) *TenantUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TenantUpdate) ClearUpdatedAt() *TenantUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TenantUpdate) SetDeletedAt(v time.Time) *TenantUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TenantUpdate) SetNillableDeletedAt(v *time.Time) *TenantUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TenantUpdate) ClearDeletedAt() *TenantUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (_u *TenantUpdate) AddCarIDs(ids ...string) *TenantUpdate {
	_u.mutation.AddCarIDs(ids...)
	return _u
}

// AddCars adds the "cars" edges to the Car entity.
func (_u *TenantUpdate) AddCars(v ...*Car) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCarIDs(ids...)
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (_u *TenantUpdate) AddCompanyIDs(ids ...string) *TenantUpdate {
	_u.mutation.AddCompanyIDs(ids...)
	return _u
}

// AddCompanies adds the "companies" edges to the Company entity.
func (_u *TenantUpdate) AddCompanies(v ...*Company) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCompanyIDs(ids...)
}

// AddIndividualIDs adds the "individuals" edge to the Individual entity by IDs.
func (_u *TenantUpdate) AddIndividualIDs(ids ...string) *TenantUpdate {
	_u.mutation.AddIndividualIDs(ids...)
	return _u
}

// AddIndividuals adds the "individuals" edges to the Individual entity.
func (_u *TenantUpdate) AddIndividuals(v ...*Individual) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIndividualIDs(ids...)
}

// AddOptionIDs adds the "options" edge to the CarOption entity by IDs.
func (_u *TenantUpdate) AddOptionIDs(ids ...string) *TenantUpdate {
	_u.mutation.AddOptionIDs(ids...)
	return _u
}

// AddOptions adds the "options" edges to the CarOption entity.
func (_u *TenantUpdate) AddOptions(v ...*CarOption) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOptionIDs(ids...)
}

// AddRentalOptionIDs adds the "rental_options" edge to the RentalOption entity by IDs.
func (_u *TenantUpdate) AddRentalOptionIDs(ids ...string) *TenantUpdate {
	_u.mutation.AddRentalOptionIDs(ids...)
	return _u
}

// AddRentalOptions adds the "rental_options" edges to the RentalOption entity.
func (_u *TenantUpdate) AddRentalOptions(v ...*RentalOption) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalOptionIDs(ids...)
}

// AddRentalIDs adds the "rentals" edge to the Rental entity by IDs.
func (_u *TenantUpdate) AddRentalIDs(ids ...string) *TenantUpdate {
	_u.mutation.AddRentalIDs(ids...)
	return _u
}

// AddRentals adds the "rentals" edges to the Rental entity.
func (_u *TenantUpdate) AddRentals(v ...*Rental) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalIDs(ids...)
}

// AddRenterIDs adds the "renters" edge to the Renter entity by IDs.
func (_u *TenantUpdate) AddRenterIDs(ids ...string) *TenantUpdate {
	_u.mutation.AddRenterIDs(ids...)
	return _u
}

// AddRenters adds the "renters" edges to the Renter entity.
func (_u *TenantUpdate) AddRenters(v ...*Renter) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRenterIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (_u *TenantUpdate) Mutation() *TenantMutation {
	return _u.mutation
}

// ClearCars clears all "cars" edges to the Car entity.
func (_u *TenantUpdate) ClearCars() *TenantUpdate {
	_u.mutation.ClearCars()
	return _u
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (_u *TenantUpdate) RemoveCarIDs(ids ...string) *TenantUpdate {
	_u.mutation.RemoveCarIDs(ids...)
	return _u
}

// RemoveCars removes "cars" edges to Car entities.
func (_u *TenantUpdate) RemoveCars(v ...*Car) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCarIDs(ids...)
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (_u *TenantUpdate) ClearCompanies() *TenantUpdate {
	_u.mutation.ClearCompanies()
	return _u
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (_u *TenantUpdate) RemoveCompanyIDs(ids ...string) *TenantUpdate {
	_u.mutation.RemoveCompanyIDs(ids...)
	return _u
}

// RemoveCompanies removes "companies" edges to Company entities.
func (_u *TenantUpdate) RemoveCompanies(v ...*Company) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCompanyIDs(ids...)
}

// ClearIndividuals clears all "individuals" edges to the Individual entity.
func (_u *TenantUpdate) ClearIndividuals() *TenantUpdate {
	_u.mutation.ClearIndividuals()
	return _u
}

// RemoveIndividualIDs removes the "individuals" edge to Individual entities by IDs.
func (_u *TenantUpdate) RemoveIndividualIDs(ids ...string) *TenantUpdate {
	_u.mutation.RemoveIndividualIDs(ids...)
	return _u
}

// RemoveIndividuals removes "individuals" edges to Individual entities.
func (_u *TenantUpdate) RemoveIndividuals(v ...*Individual) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIndividualIDs(ids...)
}

// ClearOptions clears all "options" edges to the CarOption entity.
func (_u *TenantUpdate) ClearOptions() *TenantUpdate {
	_u.mutation.ClearOptions()
	return _u
}

// RemoveOptionIDs removes the "options" edge to CarOption entities by IDs.
func (_u *TenantUpdate) RemoveOptionIDs(ids ...string) *TenantUpdate {
	_u.mutation.RemoveOptionIDs(ids...)
	return _u
}

// RemoveOptions removes "options" edges to CarOption entities.
func (_u *TenantUpdate) RemoveOptions(v ...*CarOption) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOptionIDs(ids...)
}

// ClearRentalOptions clears all "rental_options" edges to the RentalOption entity.
func (_u *TenantUpdate) ClearRentalOptions() *TenantUpdate {
	_u.mutation.ClearRentalOptions()
	return _u
}

// RemoveRentalOptionIDs removes the "rental_options" edge to RentalOption entities by IDs.
func (_u *TenantUpdate) RemoveRentalOptionIDs(ids ...string) *TenantUpdate {
	_u.mutation.RemoveRentalOptionIDs(ids...)
	return _u
}

// RemoveRentalOptions removes "rental_options" edges to RentalOption entities.
func (_u *TenantUpdate) RemoveRentalOptions(v ...*RentalOption) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalOptionIDs(ids...)
}

// ClearRentals clears all "rentals" edges to the Rental entity.
func (_u *TenantUpdate) ClearRentals() *TenantUpdate {
	_u.mutation.ClearRentals()
	return _u
}

// RemoveRentalIDs removes the "rentals" edge to Rental entities by IDs.
func (_u *TenantUpdate) RemoveRentalIDs(ids ...string) *TenantUpdate {
	_u.mutation.RemoveRentalIDs(ids...)
	return _u
}

// RemoveRentals removes "rentals" edges to Rental entities.
func (_u *TenantUpdate) RemoveRentals(v ...*Rental) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalIDs(ids...)
}

// ClearRenters clears all "renters" edges to the Renter entity.
func (_u *TenantUpdate) ClearRenters() *TenantUpdate {
	_u.mutation.ClearRenters()
	return _u
}

// RemoveRenterIDs removes the "renters" edge to Renter entities by IDs.
func (_u *TenantUpdate) RemoveRenterIDs(ids ...string) *TenantUpdate {
	_u.mutation.RemoveRenterIDs(ids...)
	return _u
}

// RemoveRenters removes "renters" edges to Renter entities.
func (_u *TenantUpdate) RemoveRenters(v ...*Renter) *TenantUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRenterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TenantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TenantUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TenantUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TenantUpdate) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`entgen: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	return nil
}

func (_u *TenantUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(tenant.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(tenant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenant.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(tenant.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(tenant.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CarsTable,
			Columns: []string{tenant.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCarsIDs(); len(nodes) > 0 && !_u.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CarsTable,
			Columns: []string{tenant.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CarsTable,
			Columns: []string{tenant.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CompaniesTable,
			Columns: []string{tenant.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !_u.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CompaniesTable,
			Columns: []string{tenant.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CompaniesTable,
			Columns: []string{tenant.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IndividualsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.IndividualsTable,
			Columns: []string{tenant.IndividualsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIndividualsIDs(); len(nodes) > 0 && !_u.mutation.IndividualsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.IndividualsTable,
			Columns: []string{tenant.IndividualsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IndividualsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.IndividualsTable,
			Columns: []string{tenant.IndividualsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OptionsTable,
			Columns: []string{tenant.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !_u.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OptionsTable,
			Columns: []string{tenant.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OptionsTable,
			Columns: []string{tenant.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalOptionsTable,
			Columns: []string{tenant.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalOptionsIDs(); len(nodes) > 0 && !_u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalOptionsTable,
			Columns: []string{tenant.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalOptionsTable,
			Columns: []string{tenant.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalsTable,
			Columns: []string{tenant.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalsIDs(); len(nodes) > 0 && !_u.mutation.RentalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalsTable,
			Columns: []string{tenant.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalsTable,
			Columns: []string{tenant.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentersTable,
			Columns: []string{tenant.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentersIDs(); len(nodes) > 0 && !_u.mutation.RentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentersTable,
			Columns: []string{tenant.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentersTable,
			Columns: []string{tenant.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TenantMutation
}

// SetCode sets the "code" field.
func (_u *TenantUpdateOne) SetCode(v string) *TenantUpdateOne {
	_u.mutation.SetCode(v)
	return _u
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableCode(v *string) *TenantUpdateOne {
	if v != nil {
		_u.SetCode(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *TenantUpdateOne) SetCreatedAt(v time.Time) *TenantUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableCreatedAt(v *time.Time) *TenantUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *TenantUpdateOne) ClearCreatedAt() *TenantUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TenantUpdateOne) SetUpdatedAt(v time.Time) *TenantUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableUpdatedAt(v *time.Time) *TenantUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TenantUpdateOne) ClearUpdatedAt() *TenantUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TenantUpdateOne) SetDeletedAt(v time.Time) *TenantUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TenantUpdateOne) SetNillableDeletedAt(v *time.Time) *TenantUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TenantUpdateOne) ClearDeletedAt() *TenantUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// AddCarIDs adds the "cars" edge to the Car entity by IDs.
func (_u *TenantUpdateOne) AddCarIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.AddCarIDs(ids...)
	return _u
}

// AddCars adds the "cars" edges to the Car entity.
func (_u *TenantUpdateOne) AddCars(v ...*Car) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCarIDs(ids...)
}

// AddCompanyIDs adds the "companies" edge to the Company entity by IDs.
func (_u *TenantUpdateOne) AddCompanyIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.AddCompanyIDs(ids...)
	return _u
}

// AddCompanies adds the "companies" edges to the Company entity.
func (_u *TenantUpdateOne) AddCompanies(v ...*Company) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCompanyIDs(ids...)
}

// AddIndividualIDs adds the "individuals" edge to the Individual entity by IDs.
func (_u *TenantUpdateOne) AddIndividualIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.AddIndividualIDs(ids...)
	return _u
}

// AddIndividuals adds the "individuals" edges to the Individual entity.
func (_u *TenantUpdateOne) AddIndividuals(v ...*Individual) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIndividualIDs(ids...)
}

// AddOptionIDs adds the "options" edge to the CarOption entity by IDs.
func (_u *TenantUpdateOne) AddOptionIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.AddOptionIDs(ids...)
	return _u
}

// AddOptions adds the "options" edges to the CarOption entity.
func (_u *TenantUpdateOne) AddOptions(v ...*CarOption) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOptionIDs(ids...)
}

// AddRentalOptionIDs adds the "rental_options" edge to the RentalOption entity by IDs.
func (_u *TenantUpdateOne) AddRentalOptionIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.AddRentalOptionIDs(ids...)
	return _u
}

// AddRentalOptions adds the "rental_options" edges to the RentalOption entity.
func (_u *TenantUpdateOne) AddRentalOptions(v ...*RentalOption) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalOptionIDs(ids...)
}

// AddRentalIDs adds the "rentals" edge to the Rental entity by IDs.
func (_u *TenantUpdateOne) AddRentalIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.AddRentalIDs(ids...)
	return _u
}

// AddRentals adds the "rentals" edges to the Rental entity.
func (_u *TenantUpdateOne) AddRentals(v ...*Rental) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRentalIDs(ids...)
}

// AddRenterIDs adds the "renters" edge to the Renter entity by IDs.
func (_u *TenantUpdateOne) AddRenterIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.AddRenterIDs(ids...)
	return _u
}

// AddRenters adds the "renters" edges to the Renter entity.
func (_u *TenantUpdateOne) AddRenters(v ...*Renter) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRenterIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (_u *TenantUpdateOne) Mutation() *TenantMutation {
	return _u.mutation
}

// ClearCars clears all "cars" edges to the Car entity.
func (_u *TenantUpdateOne) ClearCars() *TenantUpdateOne {
	_u.mutation.ClearCars()
	return _u
}

// RemoveCarIDs removes the "cars" edge to Car entities by IDs.
func (_u *TenantUpdateOne) RemoveCarIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.RemoveCarIDs(ids...)
	return _u
}

// RemoveCars removes "cars" edges to Car entities.
func (_u *TenantUpdateOne) RemoveCars(v ...*Car) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCarIDs(ids...)
}

// ClearCompanies clears all "companies" edges to the Company entity.
func (_u *TenantUpdateOne) ClearCompanies() *TenantUpdateOne {
	_u.mutation.ClearCompanies()
	return _u
}

// RemoveCompanyIDs removes the "companies" edge to Company entities by IDs.
func (_u *TenantUpdateOne) RemoveCompanyIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.RemoveCompanyIDs(ids...)
	return _u
}

// RemoveCompanies removes "companies" edges to Company entities.
func (_u *TenantUpdateOne) RemoveCompanies(v ...*Company) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCompanyIDs(ids...)
}

// ClearIndividuals clears all "individuals" edges to the Individual entity.
func (_u *TenantUpdateOne) ClearIndividuals() *TenantUpdateOne {
	_u.mutation.ClearIndividuals()
	return _u
}

// RemoveIndividualIDs removes the "individuals" edge to Individual entities by IDs.
func (_u *TenantUpdateOne) RemoveIndividualIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.RemoveIndividualIDs(ids...)
	return _u
}

// RemoveIndividuals removes "individuals" edges to Individual entities.
func (_u *TenantUpdateOne) RemoveIndividuals(v ...*Individual) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIndividualIDs(ids...)
}

// ClearOptions clears all "options" edges to the CarOption entity.
func (_u *TenantUpdateOne) ClearOptions() *TenantUpdateOne {
	_u.mutation.ClearOptions()
	return _u
}

// RemoveOptionIDs removes the "options" edge to CarOption entities by IDs.
func (_u *TenantUpdateOne) RemoveOptionIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.RemoveOptionIDs(ids...)
	return _u
}

// RemoveOptions removes "options" edges to CarOption entities.
func (_u *TenantUpdateOne) RemoveOptions(v ...*CarOption) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOptionIDs(ids...)
}

// ClearRentalOptions clears all "rental_options" edges to the RentalOption entity.
func (_u *TenantUpdateOne) ClearRentalOptions() *TenantUpdateOne {
	_u.mutation.ClearRentalOptions()
	return _u
}

// RemoveRentalOptionIDs removes the "rental_options" edge to RentalOption entities by IDs.
func (_u *TenantUpdateOne) RemoveRentalOptionIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.RemoveRentalOptionIDs(ids...)
	return _u
}

// RemoveRentalOptions removes "rental_options" edges to RentalOption entities.
func (_u *TenantUpdateOne) RemoveRentalOptions(v ...*RentalOption) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalOptionIDs(ids...)
}

// ClearRentals clears all "rentals" edges to the Rental entity.
func (_u *TenantUpdateOne) ClearRentals() *TenantUpdateOne {
	_u.mutation.ClearRentals()
	return _u
}

// RemoveRentalIDs removes the "rentals" edge to Rental entities by IDs.
func (_u *TenantUpdateOne) RemoveRentalIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.RemoveRentalIDs(ids...)
	return _u
}

// RemoveRentals removes "rentals" edges to Rental entities.
func (_u *TenantUpdateOne) RemoveRentals(v ...*Rental) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRentalIDs(ids...)
}

// ClearRenters clears all "renters" edges to the Renter entity.
func (_u *TenantUpdateOne) ClearRenters() *TenantUpdateOne {
	_u.mutation.ClearRenters()
	return _u
}

// RemoveRenterIDs removes the "renters" edge to Renter entities by IDs.
func (_u *TenantUpdateOne) RemoveRenterIDs(ids ...string) *TenantUpdateOne {
	_u.mutation.RemoveRenterIDs(ids...)
	return _u
}

// RemoveRenters removes "renters" edges to Renter entities.
func (_u *TenantUpdateOne) RemoveRenters(v ...*Renter) *TenantUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRenterIDs(ids...)
}

// Where appends a list predicates to the TenantUpdate builder.
func (_u *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Tenant entity.
func (_u *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TenantUpdateOne) check() error {
	if v, ok := _u.mutation.Code(); ok {
		if err := tenant.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`entgen: validator failed for field "Tenant.code": %w`, err)}
		}
	}
	return nil
}

func (_u *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entgen: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entgen: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Code(); ok {
		_spec.SetField(tenant.FieldCode, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(tenant.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(tenant.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(tenant.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(tenant.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(tenant.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(tenant.FieldDeletedAt, field.TypeTime)
	}
	if _u.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CarsTable,
			Columns: []string{tenant.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCarsIDs(); len(nodes) > 0 && !_u.mutation.CarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CarsTable,
			Columns: []string{tenant.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CarsTable,
			Columns: []string{tenant.CarsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(car.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CompaniesTable,
			Columns: []string{tenant.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCompaniesIDs(); len(nodes) > 0 && !_u.mutation.CompaniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CompaniesTable,
			Columns: []string{tenant.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CompaniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.CompaniesTable,
			Columns: []string{tenant.CompaniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(company.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IndividualsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.IndividualsTable,
			Columns: []string{tenant.IndividualsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIndividualsIDs(); len(nodes) > 0 && !_u.mutation.IndividualsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.IndividualsTable,
			Columns: []string{tenant.IndividualsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IndividualsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.IndividualsTable,
			Columns: []string{tenant.IndividualsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(individual.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OptionsTable,
			Columns: []string{tenant.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOptionsIDs(); len(nodes) > 0 && !_u.mutation.OptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OptionsTable,
			Columns: []string{tenant.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.OptionsTable,
			Columns: []string{tenant.OptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(caroption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalOptionsTable,
			Columns: []string{tenant.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalOptionsIDs(); len(nodes) > 0 && !_u.mutation.RentalOptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalOptionsTable,
			Columns: []string{tenant.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalOptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalOptionsTable,
			Columns: []string{tenant.RentalOptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rentaloption.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalsTable,
			Columns: []string{tenant.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentalsIDs(); len(nodes) > 0 && !_u.mutation.RentalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalsTable,
			Columns: []string{tenant.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentalsTable,
			Columns: []string{tenant.RentalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(rental.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentersTable,
			Columns: []string{tenant.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRentersIDs(); len(nodes) > 0 && !_u.mutation.RentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentersTable,
			Columns: []string{tenant.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.RentersTable,
			Columns: []string{tenant.RentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(renter.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tenant{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
