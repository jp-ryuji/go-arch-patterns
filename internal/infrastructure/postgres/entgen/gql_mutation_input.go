// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"time"
)

// CreateCarInput represents a mutation input for creating cars.
type CreateCarInput struct {
	Model     string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	TenantID  string
	RentalIDs []string
}

// Mutate applies the CreateCarInput on the CarMutation builder.
func (i *CreateCarInput) Mutate(m *CarMutation) {
	m.SetModel(i.Model)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTenantID(i.TenantID)
	if v := i.RentalIDs; len(v) > 0 {
		m.AddRentalIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCarInput on the CarCreate builder.
func (c *CarCreate) SetInput(i CreateCarInput) *CarCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarInput represents a mutation input for updating cars.
type UpdateCarInput struct {
	Model           *string
	ClearCreatedAt  bool
	CreatedAt       *time.Time
	ClearUpdatedAt  bool
	UpdatedAt       *time.Time
	TenantID        *string
	ClearRentals    bool
	AddRentalIDs    []string
	RemoveRentalIDs []string
}

// Mutate applies the UpdateCarInput on the CarMutation builder.
func (i *UpdateCarInput) Mutate(m *CarMutation) {
	if v := i.Model; v != nil {
		m.SetModel(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TenantID; v != nil {
		m.SetTenantID(*v)
	}
	if i.ClearRentals {
		m.ClearRentals()
	}
	if v := i.AddRentalIDs; len(v) > 0 {
		m.AddRentalIDs(v...)
	}
	if v := i.RemoveRentalIDs; len(v) > 0 {
		m.RemoveRentalIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCarInput on the CarUpdate builder.
func (c *CarUpdate) SetInput(i UpdateCarInput) *CarUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarInput on the CarUpdateOne builder.
func (c *CarUpdateOne) SetInput(i UpdateCarInput) *CarUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCarOptionInput represents a mutation input for creating caroptions.
type CreateCarOptionInput struct {
	Name            string
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	TenantID        string
	RentalOptionIDs []string
}

// Mutate applies the CreateCarOptionInput on the CarOptionMutation builder.
func (i *CreateCarOptionInput) Mutate(m *CarOptionMutation) {
	m.SetName(i.Name)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTenantID(i.TenantID)
	if v := i.RentalOptionIDs; len(v) > 0 {
		m.AddRentalOptionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateCarOptionInput on the CarOptionCreate builder.
func (c *CarOptionCreate) SetInput(i CreateCarOptionInput) *CarOptionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCarOptionInput represents a mutation input for updating caroptions.
type UpdateCarOptionInput struct {
	Name                  *string
	ClearCreatedAt        bool
	CreatedAt             *time.Time
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	TenantID              *string
	ClearRentalOptions    bool
	AddRentalOptionIDs    []string
	RemoveRentalOptionIDs []string
}

// Mutate applies the UpdateCarOptionInput on the CarOptionMutation builder.
func (i *UpdateCarOptionInput) Mutate(m *CarOptionMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TenantID; v != nil {
		m.SetTenantID(*v)
	}
	if i.ClearRentalOptions {
		m.ClearRentalOptions()
	}
	if v := i.AddRentalOptionIDs; len(v) > 0 {
		m.AddRentalOptionIDs(v...)
	}
	if v := i.RemoveRentalOptionIDs; len(v) > 0 {
		m.RemoveRentalOptionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateCarOptionInput on the CarOptionUpdate builder.
func (c *CarOptionUpdate) SetInput(i UpdateCarOptionInput) *CarOptionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCarOptionInput on the CarOptionUpdateOne builder.
func (c *CarOptionUpdateOne) SetInput(i UpdateCarOptionInput) *CarOptionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateCompanyInput represents a mutation input for creating companies.
type CreateCompanyInput struct {
	Name        string
	CompanySize string
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	TenantID    string
	RenterID    string
}

// Mutate applies the CreateCompanyInput on the CompanyMutation builder.
func (i *CreateCompanyInput) Mutate(m *CompanyMutation) {
	m.SetName(i.Name)
	m.SetCompanySize(i.CompanySize)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTenantID(i.TenantID)
	m.SetRenterID(i.RenterID)
}

// SetInput applies the change-set in the CreateCompanyInput on the CompanyCreate builder.
func (c *CompanyCreate) SetInput(i CreateCompanyInput) *CompanyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateCompanyInput represents a mutation input for updating companies.
type UpdateCompanyInput struct {
	Name           *string
	CompanySize    *string
	ClearCreatedAt bool
	CreatedAt      *time.Time
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	TenantID       *string
	RenterID       *string
}

// Mutate applies the UpdateCompanyInput on the CompanyMutation builder.
func (i *UpdateCompanyInput) Mutate(m *CompanyMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.CompanySize; v != nil {
		m.SetCompanySize(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TenantID; v != nil {
		m.SetTenantID(*v)
	}
	if v := i.RenterID; v != nil {
		m.SetRenterID(*v)
	}
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdate builder.
func (c *CompanyUpdate) SetInput(i UpdateCompanyInput) *CompanyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateCompanyInput on the CompanyUpdateOne builder.
func (c *CompanyUpdateOne) SetInput(i UpdateCompanyInput) *CompanyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateIndividualInput represents a mutation input for creating individuals.
type CreateIndividualInput struct {
	Email     string
	FirstName *string
	LastName  *string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	TenantID  string
	RenterID  string
}

// Mutate applies the CreateIndividualInput on the IndividualMutation builder.
func (i *CreateIndividualInput) Mutate(m *IndividualMutation) {
	m.SetEmail(i.Email)
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTenantID(i.TenantID)
	m.SetRenterID(i.RenterID)
}

// SetInput applies the change-set in the CreateIndividualInput on the IndividualCreate builder.
func (c *IndividualCreate) SetInput(i CreateIndividualInput) *IndividualCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateIndividualInput represents a mutation input for updating individuals.
type UpdateIndividualInput struct {
	Email          *string
	ClearFirstName bool
	FirstName      *string
	ClearLastName  bool
	LastName       *string
	ClearCreatedAt bool
	CreatedAt      *time.Time
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	TenantID       *string
	RenterID       *string
}

// Mutate applies the UpdateIndividualInput on the IndividualMutation builder.
func (i *UpdateIndividualInput) Mutate(m *IndividualMutation) {
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TenantID; v != nil {
		m.SetTenantID(*v)
	}
	if v := i.RenterID; v != nil {
		m.SetRenterID(*v)
	}
}

// SetInput applies the change-set in the UpdateIndividualInput on the IndividualUpdate builder.
func (c *IndividualUpdate) SetInput(i UpdateIndividualInput) *IndividualUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateIndividualInput on the IndividualUpdateOne builder.
func (c *IndividualUpdateOne) SetInput(i UpdateIndividualInput) *IndividualUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOutboxInput represents a mutation input for creating outboxes.
type CreateOutboxInput struct {
	AggregateType string
	AggregateID   string
	EventType     string
	Payload       map[string]interface{}
	CreatedAt     *time.Time
	ProcessedAt   *time.Time
	Status        *string
	ErrorMessage  *string
	Version       *int64
	LockedAt      *time.Time
	LockedBy      *string
}

// Mutate applies the CreateOutboxInput on the OutboxMutation builder.
func (i *CreateOutboxInput) Mutate(m *OutboxMutation) {
	m.SetAggregateType(i.AggregateType)
	m.SetAggregateID(i.AggregateID)
	m.SetEventType(i.EventType)
	if v := i.Payload; v != nil {
		m.SetPayload(v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.ProcessedAt; v != nil {
		m.SetProcessedAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.ErrorMessage; v != nil {
		m.SetErrorMessage(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.LockedAt; v != nil {
		m.SetLockedAt(*v)
	}
	if v := i.LockedBy; v != nil {
		m.SetLockedBy(*v)
	}
}

// SetInput applies the change-set in the CreateOutboxInput on the OutboxCreate builder.
func (c *OutboxCreate) SetInput(i CreateOutboxInput) *OutboxCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOutboxInput represents a mutation input for updating outboxes.
type UpdateOutboxInput struct {
	AggregateType     *string
	AggregateID       *string
	EventType         *string
	ClearPayload      bool
	Payload           map[string]interface{}
	ClearCreatedAt    bool
	CreatedAt         *time.Time
	ClearProcessedAt  bool
	ProcessedAt       *time.Time
	Status            *string
	ClearErrorMessage bool
	ErrorMessage      *string
	Version           *int64
	ClearLockedAt     bool
	LockedAt          *time.Time
	ClearLockedBy     bool
	LockedBy          *string
}

// Mutate applies the UpdateOutboxInput on the OutboxMutation builder.
func (i *UpdateOutboxInput) Mutate(m *OutboxMutation) {
	if v := i.AggregateType; v != nil {
		m.SetAggregateType(*v)
	}
	if v := i.AggregateID; v != nil {
		m.SetAggregateID(*v)
	}
	if v := i.EventType; v != nil {
		m.SetEventType(*v)
	}
	if i.ClearPayload {
		m.ClearPayload()
	}
	if v := i.Payload; v != nil {
		m.SetPayload(v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearProcessedAt {
		m.ClearProcessedAt()
	}
	if v := i.ProcessedAt; v != nil {
		m.SetProcessedAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearErrorMessage {
		m.ClearErrorMessage()
	}
	if v := i.ErrorMessage; v != nil {
		m.SetErrorMessage(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if i.ClearLockedAt {
		m.ClearLockedAt()
	}
	if v := i.LockedAt; v != nil {
		m.SetLockedAt(*v)
	}
	if i.ClearLockedBy {
		m.ClearLockedBy()
	}
	if v := i.LockedBy; v != nil {
		m.SetLockedBy(*v)
	}
}

// SetInput applies the change-set in the UpdateOutboxInput on the OutboxUpdate builder.
func (c *OutboxUpdate) SetInput(i UpdateOutboxInput) *OutboxUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOutboxInput on the OutboxUpdateOne builder.
func (c *OutboxUpdateOne) SetInput(i UpdateOutboxInput) *OutboxUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRentalInput represents a mutation input for creating rentals.
type CreateRentalInput struct {
	StartsAt        *time.Time
	EndsAt          *time.Time
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	TenantID        string
	CarID           string
	RenterID        string
	RentalOptionIDs []string
}

// Mutate applies the CreateRentalInput on the RentalMutation builder.
func (i *CreateRentalInput) Mutate(m *RentalMutation) {
	if v := i.StartsAt; v != nil {
		m.SetStartsAt(*v)
	}
	if v := i.EndsAt; v != nil {
		m.SetEndsAt(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTenantID(i.TenantID)
	m.SetCarID(i.CarID)
	m.SetRenterID(i.RenterID)
	if v := i.RentalOptionIDs; len(v) > 0 {
		m.AddRentalOptionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRentalInput on the RentalCreate builder.
func (c *RentalCreate) SetInput(i CreateRentalInput) *RentalCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRentalInput represents a mutation input for updating rentals.
type UpdateRentalInput struct {
	ClearStartsAt         bool
	StartsAt              *time.Time
	ClearEndsAt           bool
	EndsAt                *time.Time
	ClearCreatedAt        bool
	CreatedAt             *time.Time
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	TenantID              *string
	CarID                 *string
	RenterID              *string
	ClearRentalOptions    bool
	AddRentalOptionIDs    []string
	RemoveRentalOptionIDs []string
}

// Mutate applies the UpdateRentalInput on the RentalMutation builder.
func (i *UpdateRentalInput) Mutate(m *RentalMutation) {
	if i.ClearStartsAt {
		m.ClearStartsAt()
	}
	if v := i.StartsAt; v != nil {
		m.SetStartsAt(*v)
	}
	if i.ClearEndsAt {
		m.ClearEndsAt()
	}
	if v := i.EndsAt; v != nil {
		m.SetEndsAt(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TenantID; v != nil {
		m.SetTenantID(*v)
	}
	if v := i.CarID; v != nil {
		m.SetCarID(*v)
	}
	if v := i.RenterID; v != nil {
		m.SetRenterID(*v)
	}
	if i.ClearRentalOptions {
		m.ClearRentalOptions()
	}
	if v := i.AddRentalOptionIDs; len(v) > 0 {
		m.AddRentalOptionIDs(v...)
	}
	if v := i.RemoveRentalOptionIDs; len(v) > 0 {
		m.RemoveRentalOptionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRentalInput on the RentalUpdate builder.
func (c *RentalUpdate) SetInput(i UpdateRentalInput) *RentalUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRentalInput on the RentalUpdateOne builder.
func (c *RentalUpdateOne) SetInput(i UpdateRentalInput) *RentalUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRentalOptionInput represents a mutation input for creating rentaloptions.
type CreateRentalOptionInput struct {
	Count     int
	CreatedAt *time.Time
	UpdatedAt *time.Time
	TenantID  string
	RentalID  string
	OptionID  string
}

// Mutate applies the CreateRentalOptionInput on the RentalOptionMutation builder.
func (i *CreateRentalOptionInput) Mutate(m *RentalOptionMutation) {
	m.SetCount(i.Count)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTenantID(i.TenantID)
	m.SetRentalID(i.RentalID)
	m.SetOptionID(i.OptionID)
}

// SetInput applies the change-set in the CreateRentalOptionInput on the RentalOptionCreate builder.
func (c *RentalOptionCreate) SetInput(i CreateRentalOptionInput) *RentalOptionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRentalOptionInput represents a mutation input for updating rentaloptions.
type UpdateRentalOptionInput struct {
	Count          *int
	ClearCreatedAt bool
	CreatedAt      *time.Time
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	TenantID       *string
	RentalID       *string
	OptionID       *string
}

// Mutate applies the UpdateRentalOptionInput on the RentalOptionMutation builder.
func (i *UpdateRentalOptionInput) Mutate(m *RentalOptionMutation) {
	if v := i.Count; v != nil {
		m.SetCount(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TenantID; v != nil {
		m.SetTenantID(*v)
	}
	if v := i.RentalID; v != nil {
		m.SetRentalID(*v)
	}
	if v := i.OptionID; v != nil {
		m.SetOptionID(*v)
	}
}

// SetInput applies the change-set in the UpdateRentalOptionInput on the RentalOptionUpdate builder.
func (c *RentalOptionUpdate) SetInput(i UpdateRentalOptionInput) *RentalOptionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRentalOptionInput on the RentalOptionUpdateOne builder.
func (c *RentalOptionUpdateOne) SetInput(i UpdateRentalOptionInput) *RentalOptionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRenterInput represents a mutation input for creating renters.
type CreateRenterInput struct {
	Type         string
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	TenantID     string
	RentalIDs    []string
	CompanyID    *string
	IndividualID *string
}

// Mutate applies the CreateRenterInput on the RenterMutation builder.
func (i *CreateRenterInput) Mutate(m *RenterMutation) {
	m.SetType(i.Type)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetTenantID(i.TenantID)
	if v := i.RentalIDs; len(v) > 0 {
		m.AddRentalIDs(v...)
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if v := i.IndividualID; v != nil {
		m.SetIndividualID(*v)
	}
}

// SetInput applies the change-set in the CreateRenterInput on the RenterCreate builder.
func (c *RenterCreate) SetInput(i CreateRenterInput) *RenterCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRenterInput represents a mutation input for updating renters.
type UpdateRenterInput struct {
	Type            *string
	ClearCreatedAt  bool
	CreatedAt       *time.Time
	ClearUpdatedAt  bool
	UpdatedAt       *time.Time
	TenantID        *string
	ClearRentals    bool
	AddRentalIDs    []string
	RemoveRentalIDs []string
	ClearCompany    bool
	CompanyID       *string
	ClearIndividual bool
	IndividualID    *string
}

// Mutate applies the UpdateRenterInput on the RenterMutation builder.
func (i *UpdateRenterInput) Mutate(m *RenterMutation) {
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.TenantID; v != nil {
		m.SetTenantID(*v)
	}
	if i.ClearRentals {
		m.ClearRentals()
	}
	if v := i.AddRentalIDs; len(v) > 0 {
		m.AddRentalIDs(v...)
	}
	if v := i.RemoveRentalIDs; len(v) > 0 {
		m.RemoveRentalIDs(v...)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.CompanyID; v != nil {
		m.SetCompanyID(*v)
	}
	if i.ClearIndividual {
		m.ClearIndividual()
	}
	if v := i.IndividualID; v != nil {
		m.SetIndividualID(*v)
	}
}

// SetInput applies the change-set in the UpdateRenterInput on the RenterUpdate builder.
func (c *RenterUpdate) SetInput(i UpdateRenterInput) *RenterUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRenterInput on the RenterUpdateOne builder.
func (c *RenterUpdateOne) SetInput(i UpdateRenterInput) *RenterUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTenantInput represents a mutation input for creating tenants.
type CreateTenantInput struct {
	Code            string
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	CarIDs          []string
	CompanyIDs      []string
	IndividualIDs   []string
	OptionIDs       []string
	RentalOptionIDs []string
	RentalIDs       []string
	RenterIDs       []string
}

// Mutate applies the CreateTenantInput on the TenantMutation builder.
func (i *CreateTenantInput) Mutate(m *TenantMutation) {
	m.SetCode(i.Code)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CarIDs; len(v) > 0 {
		m.AddCarIDs(v...)
	}
	if v := i.CompanyIDs; len(v) > 0 {
		m.AddCompanyIDs(v...)
	}
	if v := i.IndividualIDs; len(v) > 0 {
		m.AddIndividualIDs(v...)
	}
	if v := i.OptionIDs; len(v) > 0 {
		m.AddOptionIDs(v...)
	}
	if v := i.RentalOptionIDs; len(v) > 0 {
		m.AddRentalOptionIDs(v...)
	}
	if v := i.RentalIDs; len(v) > 0 {
		m.AddRentalIDs(v...)
	}
	if v := i.RenterIDs; len(v) > 0 {
		m.AddRenterIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTenantInput on the TenantCreate builder.
func (c *TenantCreate) SetInput(i CreateTenantInput) *TenantCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTenantInput represents a mutation input for updating tenants.
type UpdateTenantInput struct {
	Code                  *string
	ClearCreatedAt        bool
	CreatedAt             *time.Time
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	ClearCars             bool
	AddCarIDs             []string
	RemoveCarIDs          []string
	ClearCompanies        bool
	AddCompanyIDs         []string
	RemoveCompanyIDs      []string
	ClearIndividuals      bool
	AddIndividualIDs      []string
	RemoveIndividualIDs   []string
	ClearOptions          bool
	AddOptionIDs          []string
	RemoveOptionIDs       []string
	ClearRentalOptions    bool
	AddRentalOptionIDs    []string
	RemoveRentalOptionIDs []string
	ClearRentals          bool
	AddRentalIDs          []string
	RemoveRentalIDs       []string
	ClearRenters          bool
	AddRenterIDs          []string
	RemoveRenterIDs       []string
}

// Mutate applies the UpdateTenantInput on the TenantMutation builder.
func (i *UpdateTenantInput) Mutate(m *TenantMutation) {
	if v := i.Code; v != nil {
		m.SetCode(*v)
	}
	if i.ClearCreatedAt {
		m.ClearCreatedAt()
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearCars {
		m.ClearCars()
	}
	if v := i.AddCarIDs; len(v) > 0 {
		m.AddCarIDs(v...)
	}
	if v := i.RemoveCarIDs; len(v) > 0 {
		m.RemoveCarIDs(v...)
	}
	if i.ClearCompanies {
		m.ClearCompanies()
	}
	if v := i.AddCompanyIDs; len(v) > 0 {
		m.AddCompanyIDs(v...)
	}
	if v := i.RemoveCompanyIDs; len(v) > 0 {
		m.RemoveCompanyIDs(v...)
	}
	if i.ClearIndividuals {
		m.ClearIndividuals()
	}
	if v := i.AddIndividualIDs; len(v) > 0 {
		m.AddIndividualIDs(v...)
	}
	if v := i.RemoveIndividualIDs; len(v) > 0 {
		m.RemoveIndividualIDs(v...)
	}
	if i.ClearOptions {
		m.ClearOptions()
	}
	if v := i.AddOptionIDs; len(v) > 0 {
		m.AddOptionIDs(v...)
	}
	if v := i.RemoveOptionIDs; len(v) > 0 {
		m.RemoveOptionIDs(v...)
	}
	if i.ClearRentalOptions {
		m.ClearRentalOptions()
	}
	if v := i.AddRentalOptionIDs; len(v) > 0 {
		m.AddRentalOptionIDs(v...)
	}
	if v := i.RemoveRentalOptionIDs; len(v) > 0 {
		m.RemoveRentalOptionIDs(v...)
	}
	if i.ClearRentals {
		m.ClearRentals()
	}
	if v := i.AddRentalIDs; len(v) > 0 {
		m.AddRentalIDs(v...)
	}
	if v := i.RemoveRentalIDs; len(v) > 0 {
		m.RemoveRentalIDs(v...)
	}
	if i.ClearRenters {
		m.ClearRenters()
	}
	if v := i.AddRenterIDs; len(v) > 0 {
		m.AddRenterIDs(v...)
	}
	if v := i.RemoveRenterIDs; len(v) > 0 {
		m.RemoveRenterIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTenantInput on the TenantUpdate builder.
func (c *TenantUpdate) SetInput(i UpdateTenantInput) *TenantUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTenantInput on the TenantUpdateOne builder.
func (c *TenantUpdateOne) SetInput(i UpdateTenantInput) *TenantUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
