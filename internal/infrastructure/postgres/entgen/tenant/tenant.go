// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tenant type in the database.
	Label = "tenant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeCars holds the string denoting the cars edge name in mutations.
	EdgeCars = "cars"
	// EdgeCompanies holds the string denoting the companies edge name in mutations.
	EdgeCompanies = "companies"
	// EdgeIndividuals holds the string denoting the individuals edge name in mutations.
	EdgeIndividuals = "individuals"
	// EdgeOptions holds the string denoting the options edge name in mutations.
	EdgeOptions = "options"
	// EdgeRentalOptions holds the string denoting the rental_options edge name in mutations.
	EdgeRentalOptions = "rental_options"
	// EdgeRentals holds the string denoting the rentals edge name in mutations.
	EdgeRentals = "rentals"
	// EdgeRenters holds the string denoting the renters edge name in mutations.
	EdgeRenters = "renters"
	// Table holds the table name of the tenant in the database.
	Table = "tenants"
	// CarsTable is the table that holds the cars relation/edge.
	CarsTable = "cars"
	// CarsInverseTable is the table name for the Car entity.
	// It exists in this package in order to avoid circular dependency with the "car" package.
	CarsInverseTable = "cars"
	// CarsColumn is the table column denoting the cars relation/edge.
	CarsColumn = "tenant_id"
	// CompaniesTable is the table that holds the companies relation/edge.
	CompaniesTable = "companies"
	// CompaniesInverseTable is the table name for the Company entity.
	// It exists in this package in order to avoid circular dependency with the "company" package.
	CompaniesInverseTable = "companies"
	// CompaniesColumn is the table column denoting the companies relation/edge.
	CompaniesColumn = "tenant_id"
	// IndividualsTable is the table that holds the individuals relation/edge.
	IndividualsTable = "individuals"
	// IndividualsInverseTable is the table name for the Individual entity.
	// It exists in this package in order to avoid circular dependency with the "individual" package.
	IndividualsInverseTable = "individuals"
	// IndividualsColumn is the table column denoting the individuals relation/edge.
	IndividualsColumn = "tenant_id"
	// OptionsTable is the table that holds the options relation/edge.
	OptionsTable = "car_options"
	// OptionsInverseTable is the table name for the CarOption entity.
	// It exists in this package in order to avoid circular dependency with the "caroption" package.
	OptionsInverseTable = "car_options"
	// OptionsColumn is the table column denoting the options relation/edge.
	OptionsColumn = "tenant_id"
	// RentalOptionsTable is the table that holds the rental_options relation/edge.
	RentalOptionsTable = "rental_options"
	// RentalOptionsInverseTable is the table name for the RentalOption entity.
	// It exists in this package in order to avoid circular dependency with the "rentaloption" package.
	RentalOptionsInverseTable = "rental_options"
	// RentalOptionsColumn is the table column denoting the rental_options relation/edge.
	RentalOptionsColumn = "tenant_id"
	// RentalsTable is the table that holds the rentals relation/edge.
	RentalsTable = "rentals"
	// RentalsInverseTable is the table name for the Rental entity.
	// It exists in this package in order to avoid circular dependency with the "rental" package.
	RentalsInverseTable = "rentals"
	// RentalsColumn is the table column denoting the rentals relation/edge.
	RentalsColumn = "tenant_id"
	// RentersTable is the table that holds the renters relation/edge.
	RentersTable = "renters"
	// RentersInverseTable is the table name for the Renter entity.
	// It exists in this package in order to avoid circular dependency with the "renter" package.
	RentersInverseTable = "renters"
	// RentersColumn is the table column denoting the renters relation/edge.
	RentersColumn = "tenant_id"
)

// Columns holds all SQL columns for tenant fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Tenant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByCarsCount orders the results by cars count.
func ByCarsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCarsStep(), opts...)
	}
}

// ByCars orders the results by cars terms.
func ByCars(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCarsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCompaniesCount orders the results by companies count.
func ByCompaniesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCompaniesStep(), opts...)
	}
}

// ByCompanies orders the results by companies terms.
func ByCompanies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCompaniesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIndividualsCount orders the results by individuals count.
func ByIndividualsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIndividualsStep(), opts...)
	}
}

// ByIndividuals orders the results by individuals terms.
func ByIndividuals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIndividualsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOptionsCount orders the results by options count.
func ByOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOptionsStep(), opts...)
	}
}

// ByOptions orders the results by options terms.
func ByOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRentalOptionsCount orders the results by rental_options count.
func ByRentalOptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRentalOptionsStep(), opts...)
	}
}

// ByRentalOptions orders the results by rental_options terms.
func ByRentalOptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRentalOptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRentalsCount orders the results by rentals count.
func ByRentalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRentalsStep(), opts...)
	}
}

// ByRentals orders the results by rentals terms.
func ByRentals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRentalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRentersCount orders the results by renters count.
func ByRentersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRentersStep(), opts...)
	}
}

// ByRenters orders the results by renters terms.
func ByRenters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRentersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCarsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CarsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CarsTable, CarsColumn),
	)
}
func newCompaniesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CompaniesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CompaniesTable, CompaniesColumn),
	)
}
func newIndividualsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IndividualsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IndividualsTable, IndividualsColumn),
	)
}
func newOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OptionsTable, OptionsColumn),
	)
}
func newRentalOptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RentalOptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RentalOptionsTable, RentalOptionsColumn),
	)
}
func newRentalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RentalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RentalsTable, RentalsColumn),
	)
}
func newRentersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RentersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RentersTable, RentersColumn),
	)
}
