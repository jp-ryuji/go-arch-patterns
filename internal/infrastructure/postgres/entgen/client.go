// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/car"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/caroption"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/company"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/individual"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/rental"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/rentaloption"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/renter"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/tenant"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Car is the client for interacting with the Car builders.
	Car *CarClient
	// CarOption is the client for interacting with the CarOption builders.
	CarOption *CarOptionClient
	// Company is the client for interacting with the Company builders.
	Company *CompanyClient
	// Individual is the client for interacting with the Individual builders.
	Individual *IndividualClient
	// Rental is the client for interacting with the Rental builders.
	Rental *RentalClient
	// RentalOption is the client for interacting with the RentalOption builders.
	RentalOption *RentalOptionClient
	// Renter is the client for interacting with the Renter builders.
	Renter *RenterClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Car = NewCarClient(c.config)
	c.CarOption = NewCarOptionClient(c.config)
	c.Company = NewCompanyClient(c.config)
	c.Individual = NewIndividualClient(c.config)
	c.Rental = NewRentalClient(c.config)
	c.RentalOption = NewRentalOptionClient(c.config)
	c.Renter = NewRenterClient(c.config)
	c.Tenant = NewTenantClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("entgen: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("entgen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Car:          NewCarClient(cfg),
		CarOption:    NewCarOptionClient(cfg),
		Company:      NewCompanyClient(cfg),
		Individual:   NewIndividualClient(cfg),
		Rental:       NewRentalClient(cfg),
		RentalOption: NewRentalOptionClient(cfg),
		Renter:       NewRenterClient(cfg),
		Tenant:       NewTenantClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Car:          NewCarClient(cfg),
		CarOption:    NewCarOptionClient(cfg),
		Company:      NewCompanyClient(cfg),
		Individual:   NewIndividualClient(cfg),
		Rental:       NewRentalClient(cfg),
		RentalOption: NewRentalOptionClient(cfg),
		Renter:       NewRenterClient(cfg),
		Tenant:       NewTenantClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Car.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Car, c.CarOption, c.Company, c.Individual, c.Rental, c.RentalOption, c.Renter,
		c.Tenant,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Car, c.CarOption, c.Company, c.Individual, c.Rental, c.RentalOption, c.Renter,
		c.Tenant,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CarMutation:
		return c.Car.mutate(ctx, m)
	case *CarOptionMutation:
		return c.CarOption.mutate(ctx, m)
	case *CompanyMutation:
		return c.Company.mutate(ctx, m)
	case *IndividualMutation:
		return c.Individual.mutate(ctx, m)
	case *RentalMutation:
		return c.Rental.mutate(ctx, m)
	case *RentalOptionMutation:
		return c.RentalOption.mutate(ctx, m)
	case *RenterMutation:
		return c.Renter.mutate(ctx, m)
	case *TenantMutation:
		return c.Tenant.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("entgen: unknown mutation type %T", m)
	}
}

// CarClient is a client for the Car schema.
type CarClient struct {
	config
}

// NewCarClient returns a client for the Car from the given config.
func NewCarClient(c config) *CarClient {
	return &CarClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `car.Hooks(f(g(h())))`.
func (c *CarClient) Use(hooks ...Hook) {
	c.hooks.Car = append(c.hooks.Car, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `car.Intercept(f(g(h())))`.
func (c *CarClient) Intercept(interceptors ...Interceptor) {
	c.inters.Car = append(c.inters.Car, interceptors...)
}

// Create returns a builder for creating a Car entity.
func (c *CarClient) Create() *CarCreate {
	mutation := newCarMutation(c.config, OpCreate)
	return &CarCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Car entities.
func (c *CarClient) CreateBulk(builders ...*CarCreate) *CarCreateBulk {
	return &CarCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarClient) MapCreateBulk(slice any, setFunc func(*CarCreate, int)) *CarCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarCreateBulk{err: fmt.Errorf("calling to CarClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Car.
func (c *CarClient) Update() *CarUpdate {
	mutation := newCarMutation(c.config, OpUpdate)
	return &CarUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarClient) UpdateOne(_m *Car) *CarUpdateOne {
	mutation := newCarMutation(c.config, OpUpdateOne, withCar(_m))
	return &CarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarClient) UpdateOneID(id string) *CarUpdateOne {
	mutation := newCarMutation(c.config, OpUpdateOne, withCarID(id))
	return &CarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Car.
func (c *CarClient) Delete() *CarDelete {
	mutation := newCarMutation(c.config, OpDelete)
	return &CarDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarClient) DeleteOne(_m *Car) *CarDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarClient) DeleteOneID(id string) *CarDeleteOne {
	builder := c.Delete().Where(car.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarDeleteOne{builder}
}

// Query returns a query builder for Car.
func (c *CarClient) Query() *CarQuery {
	return &CarQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCar},
		inters: c.Interceptors(),
	}
}

// Get returns a Car entity by its id.
func (c *CarClient) Get(ctx context.Context, id string) (*Car, error) {
	return c.Query().Where(car.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarClient) GetX(ctx context.Context, id string) *Car {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Car.
func (c *CarClient) QueryTenant(_m *Car) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, car.TenantTable, car.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentals queries the rentals edge of a Car.
func (c *CarClient) QueryRentals(_m *Car) *RentalQuery {
	query := (&RentalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(car.Table, car.FieldID, id),
			sqlgraph.To(rental.Table, rental.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, car.RentalsTable, car.RentalsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarClient) Hooks() []Hook {
	return c.hooks.Car
}

// Interceptors returns the client interceptors.
func (c *CarClient) Interceptors() []Interceptor {
	return c.inters.Car
}

func (c *CarClient) mutate(ctx context.Context, m *CarMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown Car mutation op: %q", m.Op())
	}
}

// CarOptionClient is a client for the CarOption schema.
type CarOptionClient struct {
	config
}

// NewCarOptionClient returns a client for the CarOption from the given config.
func NewCarOptionClient(c config) *CarOptionClient {
	return &CarOptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `caroption.Hooks(f(g(h())))`.
func (c *CarOptionClient) Use(hooks ...Hook) {
	c.hooks.CarOption = append(c.hooks.CarOption, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `caroption.Intercept(f(g(h())))`.
func (c *CarOptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.CarOption = append(c.inters.CarOption, interceptors...)
}

// Create returns a builder for creating a CarOption entity.
func (c *CarOptionClient) Create() *CarOptionCreate {
	mutation := newCarOptionMutation(c.config, OpCreate)
	return &CarOptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CarOption entities.
func (c *CarOptionClient) CreateBulk(builders ...*CarOptionCreate) *CarOptionCreateBulk {
	return &CarOptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CarOptionClient) MapCreateBulk(slice any, setFunc func(*CarOptionCreate, int)) *CarOptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CarOptionCreateBulk{err: fmt.Errorf("calling to CarOptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CarOptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CarOptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CarOption.
func (c *CarOptionClient) Update() *CarOptionUpdate {
	mutation := newCarOptionMutation(c.config, OpUpdate)
	return &CarOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarOptionClient) UpdateOne(_m *CarOption) *CarOptionUpdateOne {
	mutation := newCarOptionMutation(c.config, OpUpdateOne, withCarOption(_m))
	return &CarOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarOptionClient) UpdateOneID(id string) *CarOptionUpdateOne {
	mutation := newCarOptionMutation(c.config, OpUpdateOne, withCarOptionID(id))
	return &CarOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarOption.
func (c *CarOptionClient) Delete() *CarOptionDelete {
	mutation := newCarOptionMutation(c.config, OpDelete)
	return &CarOptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarOptionClient) DeleteOne(_m *CarOption) *CarOptionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarOptionClient) DeleteOneID(id string) *CarOptionDeleteOne {
	builder := c.Delete().Where(caroption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarOptionDeleteOne{builder}
}

// Query returns a query builder for CarOption.
func (c *CarOptionClient) Query() *CarOptionQuery {
	return &CarOptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCarOption},
		inters: c.Interceptors(),
	}
}

// Get returns a CarOption entity by its id.
func (c *CarOptionClient) Get(ctx context.Context, id string) (*CarOption, error) {
	return c.Query().Where(caroption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarOptionClient) GetX(ctx context.Context, id string) *CarOption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a CarOption.
func (c *CarOptionClient) QueryTenant(_m *CarOption) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(caroption.Table, caroption.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, caroption.TenantTable, caroption.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentalOptions queries the rental_options edge of a CarOption.
func (c *CarOptionClient) QueryRentalOptions(_m *CarOption) *RentalOptionQuery {
	query := (&RentalOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(caroption.Table, caroption.FieldID, id),
			sqlgraph.To(rentaloption.Table, rentaloption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, caroption.RentalOptionsTable, caroption.RentalOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarOptionClient) Hooks() []Hook {
	return c.hooks.CarOption
}

// Interceptors returns the client interceptors.
func (c *CarOptionClient) Interceptors() []Interceptor {
	return c.inters.CarOption
}

func (c *CarOptionClient) mutate(ctx context.Context, m *CarOptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarOptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarOptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown CarOption mutation op: %q", m.Op())
	}
}

// CompanyClient is a client for the Company schema.
type CompanyClient struct {
	config
}

// NewCompanyClient returns a client for the Company from the given config.
func NewCompanyClient(c config) *CompanyClient {
	return &CompanyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `company.Hooks(f(g(h())))`.
func (c *CompanyClient) Use(hooks ...Hook) {
	c.hooks.Company = append(c.hooks.Company, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `company.Intercept(f(g(h())))`.
func (c *CompanyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Company = append(c.inters.Company, interceptors...)
}

// Create returns a builder for creating a Company entity.
func (c *CompanyClient) Create() *CompanyCreate {
	mutation := newCompanyMutation(c.config, OpCreate)
	return &CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Company entities.
func (c *CompanyClient) CreateBulk(builders ...*CompanyCreate) *CompanyCreateBulk {
	return &CompanyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CompanyClient) MapCreateBulk(slice any, setFunc func(*CompanyCreate, int)) *CompanyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CompanyCreateBulk{err: fmt.Errorf("calling to CompanyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CompanyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CompanyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Company.
func (c *CompanyClient) Update() *CompanyUpdate {
	mutation := newCompanyMutation(c.config, OpUpdate)
	return &CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CompanyClient) UpdateOne(_m *Company) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompany(_m))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CompanyClient) UpdateOneID(id string) *CompanyUpdateOne {
	mutation := newCompanyMutation(c.config, OpUpdateOne, withCompanyID(id))
	return &CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Company.
func (c *CompanyClient) Delete() *CompanyDelete {
	mutation := newCompanyMutation(c.config, OpDelete)
	return &CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CompanyClient) DeleteOne(_m *Company) *CompanyDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CompanyClient) DeleteOneID(id string) *CompanyDeleteOne {
	builder := c.Delete().Where(company.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CompanyDeleteOne{builder}
}

// Query returns a query builder for Company.
func (c *CompanyClient) Query() *CompanyQuery {
	return &CompanyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCompany},
		inters: c.Interceptors(),
	}
}

// Get returns a Company entity by its id.
func (c *CompanyClient) Get(ctx context.Context, id string) (*Company, error) {
	return c.Query().Where(company.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CompanyClient) GetX(ctx context.Context, id string) *Company {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Company.
func (c *CompanyClient) QueryTenant(_m *Company) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, company.TenantTable, company.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRenter queries the renter edge of a Company.
func (c *CompanyClient) QueryRenter(_m *Company) *RenterQuery {
	query := (&RenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(company.Table, company.FieldID, id),
			sqlgraph.To(renter.Table, renter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, company.RenterTable, company.RenterColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CompanyClient) Hooks() []Hook {
	return c.hooks.Company
}

// Interceptors returns the client interceptors.
func (c *CompanyClient) Interceptors() []Interceptor {
	return c.inters.Company
}

func (c *CompanyClient) mutate(ctx context.Context, m *CompanyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CompanyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CompanyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CompanyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CompanyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown Company mutation op: %q", m.Op())
	}
}

// IndividualClient is a client for the Individual schema.
type IndividualClient struct {
	config
}

// NewIndividualClient returns a client for the Individual from the given config.
func NewIndividualClient(c config) *IndividualClient {
	return &IndividualClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `individual.Hooks(f(g(h())))`.
func (c *IndividualClient) Use(hooks ...Hook) {
	c.hooks.Individual = append(c.hooks.Individual, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `individual.Intercept(f(g(h())))`.
func (c *IndividualClient) Intercept(interceptors ...Interceptor) {
	c.inters.Individual = append(c.inters.Individual, interceptors...)
}

// Create returns a builder for creating a Individual entity.
func (c *IndividualClient) Create() *IndividualCreate {
	mutation := newIndividualMutation(c.config, OpCreate)
	return &IndividualCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Individual entities.
func (c *IndividualClient) CreateBulk(builders ...*IndividualCreate) *IndividualCreateBulk {
	return &IndividualCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IndividualClient) MapCreateBulk(slice any, setFunc func(*IndividualCreate, int)) *IndividualCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IndividualCreateBulk{err: fmt.Errorf("calling to IndividualClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IndividualCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IndividualCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Individual.
func (c *IndividualClient) Update() *IndividualUpdate {
	mutation := newIndividualMutation(c.config, OpUpdate)
	return &IndividualUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IndividualClient) UpdateOne(_m *Individual) *IndividualUpdateOne {
	mutation := newIndividualMutation(c.config, OpUpdateOne, withIndividual(_m))
	return &IndividualUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IndividualClient) UpdateOneID(id string) *IndividualUpdateOne {
	mutation := newIndividualMutation(c.config, OpUpdateOne, withIndividualID(id))
	return &IndividualUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Individual.
func (c *IndividualClient) Delete() *IndividualDelete {
	mutation := newIndividualMutation(c.config, OpDelete)
	return &IndividualDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IndividualClient) DeleteOne(_m *Individual) *IndividualDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IndividualClient) DeleteOneID(id string) *IndividualDeleteOne {
	builder := c.Delete().Where(individual.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IndividualDeleteOne{builder}
}

// Query returns a query builder for Individual.
func (c *IndividualClient) Query() *IndividualQuery {
	return &IndividualQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIndividual},
		inters: c.Interceptors(),
	}
}

// Get returns a Individual entity by its id.
func (c *IndividualClient) Get(ctx context.Context, id string) (*Individual, error) {
	return c.Query().Where(individual.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IndividualClient) GetX(ctx context.Context, id string) *Individual {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Individual.
func (c *IndividualClient) QueryTenant(_m *Individual) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(individual.Table, individual.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, individual.TenantTable, individual.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRenter queries the renter edge of a Individual.
func (c *IndividualClient) QueryRenter(_m *Individual) *RenterQuery {
	query := (&RenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(individual.Table, individual.FieldID, id),
			sqlgraph.To(renter.Table, renter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, individual.RenterTable, individual.RenterColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IndividualClient) Hooks() []Hook {
	return c.hooks.Individual
}

// Interceptors returns the client interceptors.
func (c *IndividualClient) Interceptors() []Interceptor {
	return c.inters.Individual
}

func (c *IndividualClient) mutate(ctx context.Context, m *IndividualMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IndividualCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IndividualUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IndividualUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IndividualDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown Individual mutation op: %q", m.Op())
	}
}

// RentalClient is a client for the Rental schema.
type RentalClient struct {
	config
}

// NewRentalClient returns a client for the Rental from the given config.
func NewRentalClient(c config) *RentalClient {
	return &RentalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rental.Hooks(f(g(h())))`.
func (c *RentalClient) Use(hooks ...Hook) {
	c.hooks.Rental = append(c.hooks.Rental, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rental.Intercept(f(g(h())))`.
func (c *RentalClient) Intercept(interceptors ...Interceptor) {
	c.inters.Rental = append(c.inters.Rental, interceptors...)
}

// Create returns a builder for creating a Rental entity.
func (c *RentalClient) Create() *RentalCreate {
	mutation := newRentalMutation(c.config, OpCreate)
	return &RentalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Rental entities.
func (c *RentalClient) CreateBulk(builders ...*RentalCreate) *RentalCreateBulk {
	return &RentalCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RentalClient) MapCreateBulk(slice any, setFunc func(*RentalCreate, int)) *RentalCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RentalCreateBulk{err: fmt.Errorf("calling to RentalClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RentalCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RentalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Rental.
func (c *RentalClient) Update() *RentalUpdate {
	mutation := newRentalMutation(c.config, OpUpdate)
	return &RentalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RentalClient) UpdateOne(_m *Rental) *RentalUpdateOne {
	mutation := newRentalMutation(c.config, OpUpdateOne, withRental(_m))
	return &RentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RentalClient) UpdateOneID(id string) *RentalUpdateOne {
	mutation := newRentalMutation(c.config, OpUpdateOne, withRentalID(id))
	return &RentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rental.
func (c *RentalClient) Delete() *RentalDelete {
	mutation := newRentalMutation(c.config, OpDelete)
	return &RentalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RentalClient) DeleteOne(_m *Rental) *RentalDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RentalClient) DeleteOneID(id string) *RentalDeleteOne {
	builder := c.Delete().Where(rental.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RentalDeleteOne{builder}
}

// Query returns a query builder for Rental.
func (c *RentalClient) Query() *RentalQuery {
	return &RentalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRental},
		inters: c.Interceptors(),
	}
}

// Get returns a Rental entity by its id.
func (c *RentalClient) Get(ctx context.Context, id string) (*Rental, error) {
	return c.Query().Where(rental.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RentalClient) GetX(ctx context.Context, id string) *Rental {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Rental.
func (c *RentalClient) QueryTenant(_m *Rental) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rental.Table, rental.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rental.TenantTable, rental.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCar queries the car edge of a Rental.
func (c *RentalClient) QueryCar(_m *Rental) *CarQuery {
	query := (&CarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rental.Table, rental.FieldID, id),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rental.CarTable, rental.CarColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRenter queries the renter edge of a Rental.
func (c *RentalClient) QueryRenter(_m *Rental) *RenterQuery {
	query := (&RenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rental.Table, rental.FieldID, id),
			sqlgraph.To(renter.Table, renter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rental.RenterTable, rental.RenterColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentalOptions queries the rental_options edge of a Rental.
func (c *RentalClient) QueryRentalOptions(_m *Rental) *RentalOptionQuery {
	query := (&RentalOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rental.Table, rental.FieldID, id),
			sqlgraph.To(rentaloption.Table, rentaloption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, rental.RentalOptionsTable, rental.RentalOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RentalClient) Hooks() []Hook {
	return c.hooks.Rental
}

// Interceptors returns the client interceptors.
func (c *RentalClient) Interceptors() []Interceptor {
	return c.inters.Rental
}

func (c *RentalClient) mutate(ctx context.Context, m *RentalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RentalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RentalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RentalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RentalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown Rental mutation op: %q", m.Op())
	}
}

// RentalOptionClient is a client for the RentalOption schema.
type RentalOptionClient struct {
	config
}

// NewRentalOptionClient returns a client for the RentalOption from the given config.
func NewRentalOptionClient(c config) *RentalOptionClient {
	return &RentalOptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rentaloption.Hooks(f(g(h())))`.
func (c *RentalOptionClient) Use(hooks ...Hook) {
	c.hooks.RentalOption = append(c.hooks.RentalOption, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `rentaloption.Intercept(f(g(h())))`.
func (c *RentalOptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.RentalOption = append(c.inters.RentalOption, interceptors...)
}

// Create returns a builder for creating a RentalOption entity.
func (c *RentalOptionClient) Create() *RentalOptionCreate {
	mutation := newRentalOptionMutation(c.config, OpCreate)
	return &RentalOptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RentalOption entities.
func (c *RentalOptionClient) CreateBulk(builders ...*RentalOptionCreate) *RentalOptionCreateBulk {
	return &RentalOptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RentalOptionClient) MapCreateBulk(slice any, setFunc func(*RentalOptionCreate, int)) *RentalOptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RentalOptionCreateBulk{err: fmt.Errorf("calling to RentalOptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RentalOptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RentalOptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RentalOption.
func (c *RentalOptionClient) Update() *RentalOptionUpdate {
	mutation := newRentalOptionMutation(c.config, OpUpdate)
	return &RentalOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RentalOptionClient) UpdateOne(_m *RentalOption) *RentalOptionUpdateOne {
	mutation := newRentalOptionMutation(c.config, OpUpdateOne, withRentalOption(_m))
	return &RentalOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RentalOptionClient) UpdateOneID(id string) *RentalOptionUpdateOne {
	mutation := newRentalOptionMutation(c.config, OpUpdateOne, withRentalOptionID(id))
	return &RentalOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RentalOption.
func (c *RentalOptionClient) Delete() *RentalOptionDelete {
	mutation := newRentalOptionMutation(c.config, OpDelete)
	return &RentalOptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RentalOptionClient) DeleteOne(_m *RentalOption) *RentalOptionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RentalOptionClient) DeleteOneID(id string) *RentalOptionDeleteOne {
	builder := c.Delete().Where(rentaloption.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RentalOptionDeleteOne{builder}
}

// Query returns a query builder for RentalOption.
func (c *RentalOptionClient) Query() *RentalOptionQuery {
	return &RentalOptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRentalOption},
		inters: c.Interceptors(),
	}
}

// Get returns a RentalOption entity by its id.
func (c *RentalOptionClient) Get(ctx context.Context, id string) (*RentalOption, error) {
	return c.Query().Where(rentaloption.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RentalOptionClient) GetX(ctx context.Context, id string) *RentalOption {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a RentalOption.
func (c *RentalOptionClient) QueryTenant(_m *RentalOption) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rentaloption.Table, rentaloption.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rentaloption.TenantTable, rentaloption.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRental queries the rental edge of a RentalOption.
func (c *RentalOptionClient) QueryRental(_m *RentalOption) *RentalQuery {
	query := (&RentalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rentaloption.Table, rentaloption.FieldID, id),
			sqlgraph.To(rental.Table, rental.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rentaloption.RentalTable, rentaloption.RentalColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOption queries the option edge of a RentalOption.
func (c *RentalOptionClient) QueryOption(_m *RentalOption) *CarOptionQuery {
	query := (&CarOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rentaloption.Table, rentaloption.FieldID, id),
			sqlgraph.To(caroption.Table, caroption.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rentaloption.OptionTable, rentaloption.OptionColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RentalOptionClient) Hooks() []Hook {
	return c.hooks.RentalOption
}

// Interceptors returns the client interceptors.
func (c *RentalOptionClient) Interceptors() []Interceptor {
	return c.inters.RentalOption
}

func (c *RentalOptionClient) mutate(ctx context.Context, m *RentalOptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RentalOptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RentalOptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RentalOptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RentalOptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown RentalOption mutation op: %q", m.Op())
	}
}

// RenterClient is a client for the Renter schema.
type RenterClient struct {
	config
}

// NewRenterClient returns a client for the Renter from the given config.
func NewRenterClient(c config) *RenterClient {
	return &RenterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `renter.Hooks(f(g(h())))`.
func (c *RenterClient) Use(hooks ...Hook) {
	c.hooks.Renter = append(c.hooks.Renter, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `renter.Intercept(f(g(h())))`.
func (c *RenterClient) Intercept(interceptors ...Interceptor) {
	c.inters.Renter = append(c.inters.Renter, interceptors...)
}

// Create returns a builder for creating a Renter entity.
func (c *RenterClient) Create() *RenterCreate {
	mutation := newRenterMutation(c.config, OpCreate)
	return &RenterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Renter entities.
func (c *RenterClient) CreateBulk(builders ...*RenterCreate) *RenterCreateBulk {
	return &RenterCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RenterClient) MapCreateBulk(slice any, setFunc func(*RenterCreate, int)) *RenterCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RenterCreateBulk{err: fmt.Errorf("calling to RenterClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RenterCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RenterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Renter.
func (c *RenterClient) Update() *RenterUpdate {
	mutation := newRenterMutation(c.config, OpUpdate)
	return &RenterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RenterClient) UpdateOne(_m *Renter) *RenterUpdateOne {
	mutation := newRenterMutation(c.config, OpUpdateOne, withRenter(_m))
	return &RenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RenterClient) UpdateOneID(id string) *RenterUpdateOne {
	mutation := newRenterMutation(c.config, OpUpdateOne, withRenterID(id))
	return &RenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Renter.
func (c *RenterClient) Delete() *RenterDelete {
	mutation := newRenterMutation(c.config, OpDelete)
	return &RenterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RenterClient) DeleteOne(_m *Renter) *RenterDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RenterClient) DeleteOneID(id string) *RenterDeleteOne {
	builder := c.Delete().Where(renter.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RenterDeleteOne{builder}
}

// Query returns a query builder for Renter.
func (c *RenterClient) Query() *RenterQuery {
	return &RenterQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRenter},
		inters: c.Interceptors(),
	}
}

// Get returns a Renter entity by its id.
func (c *RenterClient) Get(ctx context.Context, id string) (*Renter, error) {
	return c.Query().Where(renter.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RenterClient) GetX(ctx context.Context, id string) *Renter {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTenant queries the tenant edge of a Renter.
func (c *RenterClient) QueryTenant(_m *Renter) *TenantQuery {
	query := (&TenantClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(renter.Table, renter.FieldID, id),
			sqlgraph.To(tenant.Table, tenant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, renter.TenantTable, renter.TenantColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentals queries the rentals edge of a Renter.
func (c *RenterClient) QueryRentals(_m *Renter) *RentalQuery {
	query := (&RentalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(renter.Table, renter.FieldID, id),
			sqlgraph.To(rental.Table, rental.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, renter.RentalsTable, renter.RentalsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompany queries the company edge of a Renter.
func (c *RenterClient) QueryCompany(_m *Renter) *CompanyQuery {
	query := (&CompanyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(renter.Table, renter.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, renter.CompanyTable, renter.CompanyColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIndividual queries the individual edge of a Renter.
func (c *RenterClient) QueryIndividual(_m *Renter) *IndividualQuery {
	query := (&IndividualClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(renter.Table, renter.FieldID, id),
			sqlgraph.To(individual.Table, individual.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, renter.IndividualTable, renter.IndividualColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RenterClient) Hooks() []Hook {
	return c.hooks.Renter
}

// Interceptors returns the client interceptors.
func (c *RenterClient) Interceptors() []Interceptor {
	return c.inters.Renter
}

func (c *RenterClient) mutate(ctx context.Context, m *RenterMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RenterCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RenterUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RenterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RenterDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown Renter mutation op: %q", m.Op())
	}
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenant.Intercept(f(g(h())))`.
func (c *TenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tenant = append(c.inters.Tenant, interceptors...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantClient) MapCreateBulk(slice any, setFunc func(*TenantCreate, int)) *TenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantCreateBulk{err: fmt.Errorf("calling to TenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(_m *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(_m))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id string) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(_m *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id string) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id string) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id string) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCars queries the cars edge of a Tenant.
func (c *TenantClient) QueryCars(_m *Tenant) *CarQuery {
	query := (&CarClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(car.Table, car.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.CarsTable, tenant.CarsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCompanies queries the companies edge of a Tenant.
func (c *TenantClient) QueryCompanies(_m *Tenant) *CompanyQuery {
	query := (&CompanyClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(company.Table, company.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.CompaniesTable, tenant.CompaniesColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIndividuals queries the individuals edge of a Tenant.
func (c *TenantClient) QueryIndividuals(_m *Tenant) *IndividualQuery {
	query := (&IndividualClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(individual.Table, individual.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.IndividualsTable, tenant.IndividualsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOptions queries the options edge of a Tenant.
func (c *TenantClient) QueryOptions(_m *Tenant) *CarOptionQuery {
	query := (&CarOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(caroption.Table, caroption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.OptionsTable, tenant.OptionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentalOptions queries the rental_options edge of a Tenant.
func (c *TenantClient) QueryRentalOptions(_m *Tenant) *RentalOptionQuery {
	query := (&RentalOptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(rentaloption.Table, rentaloption.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.RentalOptionsTable, tenant.RentalOptionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentals queries the rentals edge of a Tenant.
func (c *TenantClient) QueryRentals(_m *Tenant) *RentalQuery {
	query := (&RentalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(rental.Table, rental.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.RentalsTable, tenant.RentalsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRenters queries the renters edge of a Tenant.
func (c *TenantClient) QueryRenters(_m *Tenant) *RenterQuery {
	query := (&RenterClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tenant.Table, tenant.FieldID, id),
			sqlgraph.To(renter.Table, renter.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tenant.RentersTable, tenant.RentersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// Interceptors returns the client interceptors.
func (c *TenantClient) Interceptors() []Interceptor {
	return c.inters.Tenant
}

func (c *TenantClient) mutate(ctx context.Context, m *TenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("entgen: unknown Tenant mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Car, CarOption, Company, Individual, Rental, RentalOption, Renter,
		Tenant []ent.Hook
	}
	inters struct {
		Car, CarOption, Company, Individual, Rental, RentalOption, Renter,
		Tenant []ent.Interceptor
	}
)
