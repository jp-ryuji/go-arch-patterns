// Code generated by ent, DO NOT EDIT.

package entgen

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen/outbox"
)

// Outbox is the model entity for the Outbox schema.
type Outbox struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AggregateType holds the value of the "aggregate_type" field.
	AggregateType string `json:"aggregate_type,omitempty"`
	// AggregateID holds the value of the "aggregate_id" field.
	AggregateID string `json:"aggregate_id,omitempty"`
	// EventType holds the value of the "event_type" field.
	EventType string `json:"event_type,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload map[string]interface{} `json:"payload,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// ProcessedAt holds the value of the "processed_at" field.
	ProcessedAt *time.Time `json:"processed_at,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// ErrorMessage holds the value of the "error_message" field.
	ErrorMessage *string `json:"error_message,omitempty"`
	// Version holds the value of the "version" field.
	Version int64 `json:"version,omitempty"`
	// LockedAt holds the value of the "locked_at" field.
	LockedAt *time.Time `json:"locked_at,omitempty"`
	// LockedBy holds the value of the "locked_by" field.
	LockedBy     *string `json:"locked_by,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Outbox) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case outbox.FieldPayload:
			values[i] = new([]byte)
		case outbox.FieldVersion:
			values[i] = new(sql.NullInt64)
		case outbox.FieldID, outbox.FieldAggregateType, outbox.FieldAggregateID, outbox.FieldEventType, outbox.FieldStatus, outbox.FieldErrorMessage, outbox.FieldLockedBy:
			values[i] = new(sql.NullString)
		case outbox.FieldCreatedAt, outbox.FieldProcessedAt, outbox.FieldLockedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Outbox fields.
func (_m *Outbox) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case outbox.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case outbox.FieldAggregateType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_type", values[i])
			} else if value.Valid {
				_m.AggregateType = value.String
			}
		case outbox.FieldAggregateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field aggregate_id", values[i])
			} else if value.Valid {
				_m.AggregateID = value.String
			}
		case outbox.FieldEventType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_type", values[i])
			} else if value.Valid {
				_m.EventType = value.String
			}
		case outbox.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		case outbox.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case outbox.FieldProcessedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field processed_at", values[i])
			} else if value.Valid {
				_m.ProcessedAt = new(time.Time)
				*_m.ProcessedAt = value.Time
			}
		case outbox.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = value.String
			}
		case outbox.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				_m.ErrorMessage = new(string)
				*_m.ErrorMessage = value.String
			}
		case outbox.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				_m.Version = value.Int64
			}
		case outbox.FieldLockedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field locked_at", values[i])
			} else if value.Valid {
				_m.LockedAt = new(time.Time)
				*_m.LockedAt = value.Time
			}
		case outbox.FieldLockedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field locked_by", values[i])
			} else if value.Valid {
				_m.LockedBy = new(string)
				*_m.LockedBy = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Outbox.
// This includes values selected through modifiers, order, etc.
func (_m *Outbox) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Outbox.
// Note that you need to call Outbox.Unwrap() before calling this method if this Outbox
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Outbox) Update() *OutboxUpdateOne {
	return NewOutboxClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Outbox entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Outbox) Unwrap() *Outbox {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("entgen: Outbox is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Outbox) String() string {
	var builder strings.Builder
	builder.WriteString("Outbox(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("aggregate_type=")
	builder.WriteString(_m.AggregateType)
	builder.WriteString(", ")
	builder.WriteString("aggregate_id=")
	builder.WriteString(_m.AggregateID)
	builder.WriteString(", ")
	builder.WriteString("event_type=")
	builder.WriteString(_m.EventType)
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", _m.Payload))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := _m.ProcessedAt; v != nil {
		builder.WriteString("processed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(_m.Status)
	builder.WriteString(", ")
	if v := _m.ErrorMessage; v != nil {
		builder.WriteString("error_message=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", _m.Version))
	builder.WriteString(", ")
	if v := _m.LockedAt; v != nil {
		builder.WriteString("locked_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.LockedBy; v != nil {
		builder.WriteString("locked_by=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Outboxes is a parsable slice of Outbox.
type Outboxes []*Outbox
