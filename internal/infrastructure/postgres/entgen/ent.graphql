directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Car implements Node {
  id: ID!
  tenantID: ID!
  model: String!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  rentals: [Rental!]
}
"""
A connection to a list of items.
"""
type CarConnection {
  """
  A list of edges.
  """
  edges: [CarEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarEdge {
  """
  The item at the end of the edge.
  """
  node: Car
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type CarOption implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  rentalOptions: [RentalOption!]
}
"""
A connection to a list of items.
"""
type CarOptionConnection {
  """
  A list of edges.
  """
  edges: [CarOptionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarOptionEdge {
  """
  The item at the end of the edge.
  """
  node: CarOption
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for CarOption connections
"""
input CarOptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order CarOptions.
  """
  field: CarOptionOrderField!
}
"""
Properties by which CarOption connections can be ordered.
"""
enum CarOptionOrderField {
  ID
  TENANT_ID
  NAME
  CREATED_AT
  UPDATED_AT
}
"""
Ordering options for Car connections
"""
input CarOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Cars.
  """
  field: CarOrderField!
}
"""
Properties by which Car connections can be ordered.
"""
enum CarOrderField {
  ID
  TENANT_ID
  MODEL
  CREATED_AT
  UPDATED_AT
}
type Company implements Node {
  id: ID!
  renterID: ID!
  tenantID: ID!
  name: String!
  companySize: String!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  renter: Renter!
}
"""
A connection to a list of items.
"""
type CompanyConnection {
  """
  A list of edges.
  """
  edges: [CompanyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CompanyEdge {
  """
  The item at the end of the edge.
  """
  node: Company
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Company connections
"""
input CompanyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Companies.
  """
  field: CompanyOrderField!
}
"""
Properties by which Company connections can be ordered.
"""
enum CompanyOrderField {
  ID
  RENTER_ID
  TENANT_ID
  NAME
  COMPANY_SIZE
  CREATED_AT
  UPDATED_AT
}
"""
CreateCarInput is used for create Car object.
Input was generated by ent.
"""
input CreateCarInput {
  model: String!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  rentalIDs: [ID!]
}
"""
CreateCarOptionInput is used for create CarOption object.
Input was generated by ent.
"""
input CreateCarOptionInput {
  name: String!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  rentalOptionIDs: [ID!]
}
"""
CreateCompanyInput is used for create Company object.
Input was generated by ent.
"""
input CreateCompanyInput {
  name: String!
  companySize: String!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  renterID: ID!
}
"""
CreateIndividualInput is used for create Individual object.
Input was generated by ent.
"""
input CreateIndividualInput {
  email: String!
  firstName: String
  lastName: String
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  renterID: ID!
}
"""
CreateOutboxInput is used for create Outbox object.
Input was generated by ent.
"""
input CreateOutboxInput {
  aggregateType: String!
  aggregateID: String!
  eventType: String!
  payload: Map
  createdAt: Time
  processedAt: Time
  status: String
  errorMessage: String
  version: Int
  lockedAt: Time
  lockedBy: String
}
"""
CreateRentalInput is used for create Rental object.
Input was generated by ent.
"""
input CreateRentalInput {
  startsAt: Time
  endsAt: Time
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  carID: ID!
  renterID: ID!
  rentalOptionIDs: [ID!]
}
"""
CreateRentalOptionInput is used for create RentalOption object.
Input was generated by ent.
"""
input CreateRentalOptionInput {
  count: Int!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  rentalID: ID!
  optionID: ID!
}
"""
CreateRenterInput is used for create Renter object.
Input was generated by ent.
"""
input CreateRenterInput {
  type: String!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  rentalIDs: [ID!]
  companyID: ID
  individualID: ID
}
"""
CreateTenantInput is used for create Tenant object.
Input was generated by ent.
"""
input CreateTenantInput {
  code: String!
  createdAt: Time
  updatedAt: Time
  carIDs: [ID!]
  companyIDs: [ID!]
  individualIDs: [ID!]
  optionIDs: [ID!]
  rentalOptionIDs: [ID!]
  rentalIDs: [ID!]
  renterIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Individual implements Node {
  id: ID!
  renterID: ID!
  tenantID: ID!
  email: String!
  firstName: String
  lastName: String
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  renter: Renter!
}
"""
A connection to a list of items.
"""
type IndividualConnection {
  """
  A list of edges.
  """
  edges: [IndividualEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type IndividualEdge {
  """
  The item at the end of the edge.
  """
  node: Individual
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Individual connections
"""
input IndividualOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Individuals.
  """
  field: IndividualOrderField!
}
"""
Properties by which Individual connections can be ordered.
"""
enum IndividualOrderField {
  ID
  RENTER_ID
  TENANT_ID
  EMAIL
  FIRST_NAME
  LAST_NAME
  CREATED_AT
  UPDATED_AT
}
"""
The builtin Map type
"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
type Outbox implements Node {
  id: ID!
  aggregateType: String!
  aggregateID: String!
  eventType: String!
  payload: Map
  createdAt: Time
  processedAt: Time
  status: String!
  errorMessage: String
  version: Int!
  lockedAt: Time
  lockedBy: String
}
"""
A connection to a list of items.
"""
type OutboxConnection {
  """
  A list of edges.
  """
  edges: [OutboxEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OutboxEdge {
  """
  The item at the end of the edge.
  """
  node: Outbox
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Outbox connections
"""
input OutboxOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Outboxes.
  """
  field: OutboxOrderField!
}
"""
Properties by which Outbox connections can be ordered.
"""
enum OutboxOrderField {
  ID
  AGGREGATE_TYPE
  AGGREGATE_ID
  EVENT_TYPE
  CREATED_AT
  PROCESSED_AT
  STATUS
  ERROR_MESSAGE
  VERSION
  LOCKED_AT
  LOCKED_BY
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  cars(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Cars returned from the connection.
    """
    orderBy: [CarOrder!]
  ): CarConnection!
  carOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CarOptions returned from the connection.
    """
    orderBy: [CarOptionOrder!]
  ): CarOptionConnection!
  companies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Companies returned from the connection.
    """
    orderBy: [CompanyOrder!]
  ): CompanyConnection!
  individuals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Individuals returned from the connection.
    """
    orderBy: [IndividualOrder!]
  ): IndividualConnection!
  outboxes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Outboxes returned from the connection.
    """
    orderBy: [OutboxOrder!]
  ): OutboxConnection!
  rentals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Rentals returned from the connection.
    """
    orderBy: [RentalOrder!]
  ): RentalConnection!
  rentalOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for RentalOptions returned from the connection.
    """
    orderBy: [RentalOptionOrder!]
  ): RentalOptionConnection!
  renters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Renters returned from the connection.
    """
    orderBy: [RenterOrder!]
  ): RenterConnection!
  tenants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenants returned from the connection.
    """
    orderBy: [TenantOrder!]
  ): TenantConnection!
}
type Rental implements Node {
  id: ID!
  tenantID: ID!
  carID: ID!
  renterID: ID!
  startsAt: Time
  endsAt: Time
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  car: Car!
  renter: Renter!
  rentalOptions: [RentalOption!]
}
"""
A connection to a list of items.
"""
type RentalConnection {
  """
  A list of edges.
  """
  edges: [RentalEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RentalEdge {
  """
  The item at the end of the edge.
  """
  node: Rental
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type RentalOption implements Node {
  id: ID!
  tenantID: ID!
  rentalID: ID!
  optionID: ID!
  count: Int!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  rental: Rental!
  option: CarOption!
}
"""
A connection to a list of items.
"""
type RentalOptionConnection {
  """
  A list of edges.
  """
  edges: [RentalOptionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RentalOptionEdge {
  """
  The item at the end of the edge.
  """
  node: RentalOption
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for RentalOption connections
"""
input RentalOptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order RentalOptions.
  """
  field: RentalOptionOrderField!
}
"""
Properties by which RentalOption connections can be ordered.
"""
enum RentalOptionOrderField {
  ID
  TENANT_ID
  RENTAL_ID
  OPTION_ID
  COUNT
  CREATED_AT
  UPDATED_AT
}
"""
Ordering options for Rental connections
"""
input RentalOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Rentals.
  """
  field: RentalOrderField!
}
"""
Properties by which Rental connections can be ordered.
"""
enum RentalOrderField {
  ID
  TENANT_ID
  CAR_ID
  RENTER_ID
  STARTS_AT
  ENDS_AT
  CREATED_AT
  UPDATED_AT
}
type Renter implements Node {
  id: ID!
  tenantID: ID!
  type: String!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  rentals: [Rental!]
  company: Company
  individual: Individual
}
"""
A connection to a list of items.
"""
type RenterConnection {
  """
  A list of edges.
  """
  edges: [RenterEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RenterEdge {
  """
  The item at the end of the edge.
  """
  node: Renter
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Renter connections
"""
input RenterOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Renters.
  """
  field: RenterOrderField!
}
"""
Properties by which Renter connections can be ordered.
"""
enum RenterOrderField {
  ID
  TENANT_ID
  TYPE
  CREATED_AT
  UPDATED_AT
}
type Tenant implements Node {
  id: ID!
  code: String!
  createdAt: Time
  updatedAt: Time
  cars: [Car!]
  companies: [Company!]
  individuals: [Individual!]
  options: [CarOption!]
  rentalOptions: [RentalOption!]
  rentals: [Rental!]
  renters: [Renter!]
}
"""
A connection to a list of items.
"""
type TenantConnection {
  """
  A list of edges.
  """
  edges: [TenantEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TenantEdge {
  """
  The item at the end of the edge.
  """
  node: Tenant
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Tenant connections
"""
input TenantOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tenants.
  """
  field: TenantOrderField!
}
"""
Properties by which Tenant connections can be ordered.
"""
enum TenantOrderField {
  ID
  CODE
  CREATED_AT
  UPDATED_AT
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateCarInput is used for update Car object.
Input was generated by ent.
"""
input UpdateCarInput {
  model: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  addRentalIDs: [ID!]
  removeRentalIDs: [ID!]
  clearRentals: Boolean
}
"""
UpdateCarOptionInput is used for update CarOption object.
Input was generated by ent.
"""
input UpdateCarOptionInput {
  name: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  addRentalOptionIDs: [ID!]
  removeRentalOptionIDs: [ID!]
  clearRentalOptions: Boolean
}
"""
UpdateCompanyInput is used for update Company object.
Input was generated by ent.
"""
input UpdateCompanyInput {
  name: String
  companySize: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  renterID: ID
}
"""
UpdateIndividualInput is used for update Individual object.
Input was generated by ent.
"""
input UpdateIndividualInput {
  email: String
  firstName: String
  clearFirstName: Boolean
  lastName: String
  clearLastName: Boolean
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  renterID: ID
}
"""
UpdateOutboxInput is used for update Outbox object.
Input was generated by ent.
"""
input UpdateOutboxInput {
  aggregateType: String
  aggregateID: String
  eventType: String
  payload: Map
  clearPayload: Boolean
  createdAt: Time
  clearCreatedAt: Boolean
  processedAt: Time
  clearProcessedAt: Boolean
  status: String
  errorMessage: String
  clearErrorMessage: Boolean
  version: Int
  lockedAt: Time
  clearLockedAt: Boolean
  lockedBy: String
  clearLockedBy: Boolean
}
"""
UpdateRentalInput is used for update Rental object.
Input was generated by ent.
"""
input UpdateRentalInput {
  startsAt: Time
  clearStartsAt: Boolean
  endsAt: Time
  clearEndsAt: Boolean
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  carID: ID
  renterID: ID
  addRentalOptionIDs: [ID!]
  removeRentalOptionIDs: [ID!]
  clearRentalOptions: Boolean
}
"""
UpdateRentalOptionInput is used for update RentalOption object.
Input was generated by ent.
"""
input UpdateRentalOptionInput {
  count: Int
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  rentalID: ID
  optionID: ID
}
"""
UpdateRenterInput is used for update Renter object.
Input was generated by ent.
"""
input UpdateRenterInput {
  type: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  addRentalIDs: [ID!]
  removeRentalIDs: [ID!]
  clearRentals: Boolean
  companyID: ID
  clearCompany: Boolean
  individualID: ID
  clearIndividual: Boolean
}
"""
UpdateTenantInput is used for update Tenant object.
Input was generated by ent.
"""
input UpdateTenantInput {
  code: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  addCarIDs: [ID!]
  removeCarIDs: [ID!]
  clearCars: Boolean
  addCompanyIDs: [ID!]
  removeCompanyIDs: [ID!]
  clearCompanies: Boolean
  addIndividualIDs: [ID!]
  removeIndividualIDs: [ID!]
  clearIndividuals: Boolean
  addOptionIDs: [ID!]
  removeOptionIDs: [ID!]
  clearOptions: Boolean
  addRentalOptionIDs: [ID!]
  removeRentalOptionIDs: [ID!]
  clearRentalOptions: Boolean
  addRentalIDs: [ID!]
  removeRentalIDs: [ID!]
  clearRentals: Boolean
  addRenterIDs: [ID!]
  removeRenterIDs: [ID!]
  clearRenters: Boolean
}
