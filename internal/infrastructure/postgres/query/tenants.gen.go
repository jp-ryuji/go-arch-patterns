// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/jp-ryuji/go-sample/internal/infrastructure/postgres/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newTenant(db *gorm.DB, opts ...gen.DOOption) tenant {
	_tenant := tenant{}

	_tenant.tenantDo.UseDB(db, opts...)
	_tenant.tenantDo.UseModel(&dbmodel.Tenant{})

	tableName := _tenant.tenantDo.TableName()
	_tenant.ALL = field.NewAsterisk(tableName)
	_tenant.ID = field.NewString(tableName, "id")
	_tenant.Code = field.NewString(tableName, "code")
	_tenant.CreatedAt = field.NewTime(tableName, "created_at")
	_tenant.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tenant.DeletedAt = field.NewField(tableName, "deleted_at")
	_tenant.Cars = tenantHasManyCars{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Cars", "dbmodel.Car"),
		Tenant: struct {
			field.RelationField
			Cars struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Cars.Tenant", "dbmodel.Tenant"),
			Cars: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Cars.Tenant.Cars", "dbmodel.Car"),
			},
		},
		Rentals: struct {
			field.RelationField
			Tenant struct {
				field.RelationField
			}
			Car struct {
				field.RelationField
			}
			Renter struct {
				field.RelationField
				Rentals struct {
					field.RelationField
				}
			}
			RentalOptions struct {
				field.RelationField
				Rental struct {
					field.RelationField
				}
				Option struct {
					field.RelationField
					RentalOptions struct {
						field.RelationField
					}
				}
			}
		}{
			RelationField: field.NewRelation("Cars.Rentals", "dbmodel.Rental"),
			Tenant: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Cars.Rentals.Tenant", "dbmodel.Tenant"),
			},
			Car: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Cars.Rentals.Car", "dbmodel.Car"),
			},
			Renter: struct {
				field.RelationField
				Rentals struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Cars.Rentals.Renter", "dbmodel.Renter"),
				Rentals: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Cars.Rentals.Renter.Rentals", "dbmodel.Rental"),
				},
			},
			RentalOptions: struct {
				field.RelationField
				Rental struct {
					field.RelationField
				}
				Option struct {
					field.RelationField
					RentalOptions struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("Cars.Rentals.RentalOptions", "dbmodel.RentalOption"),
				Rental: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Cars.Rentals.RentalOptions.Rental", "dbmodel.Rental"),
				},
				Option: struct {
					field.RelationField
					RentalOptions struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("Cars.Rentals.RentalOptions.Option", "dbmodel.Option"),
					RentalOptions: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("Cars.Rentals.RentalOptions.Option.RentalOptions", "dbmodel.RentalOption"),
					},
				},
			},
		},
	}

	_tenant.fillFieldMap()

	return _tenant
}

type tenant struct {
	tenantDo tenantDo

	ALL       field.Asterisk
	ID        field.String
	Code      field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Cars      tenantHasManyCars

	fieldMap map[string]field.Expr
}

func (t tenant) Table(newTableName string) *tenant {
	t.tenantDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tenant) As(alias string) *tenant {
	t.tenantDo.DO = *(t.tenantDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tenant) updateTableName(table string) *tenant {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewString(table, "id")
	t.Code = field.NewString(table, "code")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tenant) WithContext(ctx context.Context) *tenantDo { return t.tenantDo.WithContext(ctx) }

func (t tenant) TableName() string { return t.tenantDo.TableName() }

func (t tenant) Alias() string { return t.tenantDo.Alias() }

func (t tenant) Columns(cols ...field.Expr) gen.Columns { return t.tenantDo.Columns(cols...) }

func (t *tenant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tenant) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.ID
	t.fieldMap["code"] = t.Code
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt

}

func (t tenant) clone(db *gorm.DB) tenant {
	t.tenantDo.ReplaceConnPool(db.Statement.ConnPool)
	t.Cars.db = db.Session(&gorm.Session{Initialized: true})
	t.Cars.db.Statement.ConnPool = db.Statement.ConnPool
	return t
}

func (t tenant) replaceDB(db *gorm.DB) tenant {
	t.tenantDo.ReplaceDB(db)
	t.Cars.db = db.Session(&gorm.Session{})
	return t
}

type tenantHasManyCars struct {
	db *gorm.DB

	field.RelationField

	Tenant struct {
		field.RelationField
		Cars struct {
			field.RelationField
		}
	}
	Rentals struct {
		field.RelationField
		Tenant struct {
			field.RelationField
		}
		Car struct {
			field.RelationField
		}
		Renter struct {
			field.RelationField
			Rentals struct {
				field.RelationField
			}
		}
		RentalOptions struct {
			field.RelationField
			Rental struct {
				field.RelationField
			}
			Option struct {
				field.RelationField
				RentalOptions struct {
					field.RelationField
				}
			}
		}
	}
}

func (a tenantHasManyCars) Where(conds ...field.Expr) *tenantHasManyCars {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a tenantHasManyCars) WithContext(ctx context.Context) *tenantHasManyCars {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a tenantHasManyCars) Session(session *gorm.Session) *tenantHasManyCars {
	a.db = a.db.Session(session)
	return &a
}

func (a tenantHasManyCars) Model(m *dbmodel.Tenant) *tenantHasManyCarsTx {
	return &tenantHasManyCarsTx{a.db.Model(m).Association(a.Name())}
}

func (a tenantHasManyCars) Unscoped() *tenantHasManyCars {
	a.db = a.db.Unscoped()
	return &a
}

type tenantHasManyCarsTx struct{ tx *gorm.Association }

func (a tenantHasManyCarsTx) Find() (result []*dbmodel.Car, err error) {
	return result, a.tx.Find(&result)
}

func (a tenantHasManyCarsTx) Append(values ...*dbmodel.Car) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a tenantHasManyCarsTx) Replace(values ...*dbmodel.Car) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a tenantHasManyCarsTx) Delete(values ...*dbmodel.Car) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a tenantHasManyCarsTx) Clear() error {
	return a.tx.Clear()
}

func (a tenantHasManyCarsTx) Count() int64 {
	return a.tx.Count()
}

func (a tenantHasManyCarsTx) Unscoped() *tenantHasManyCarsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type tenantDo struct{ gen.DO }

func (t tenantDo) Debug() *tenantDo {
	return t.withDO(t.DO.Debug())
}

func (t tenantDo) WithContext(ctx context.Context) *tenantDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tenantDo) ReadDB() *tenantDo {
	return t.Clauses(dbresolver.Read)
}

func (t tenantDo) WriteDB() *tenantDo {
	return t.Clauses(dbresolver.Write)
}

func (t tenantDo) Session(config *gorm.Session) *tenantDo {
	return t.withDO(t.DO.Session(config))
}

func (t tenantDo) Clauses(conds ...clause.Expression) *tenantDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tenantDo) Returning(value interface{}, columns ...string) *tenantDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tenantDo) Not(conds ...gen.Condition) *tenantDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tenantDo) Or(conds ...gen.Condition) *tenantDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tenantDo) Select(conds ...field.Expr) *tenantDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tenantDo) Where(conds ...gen.Condition) *tenantDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tenantDo) Order(conds ...field.Expr) *tenantDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tenantDo) Distinct(cols ...field.Expr) *tenantDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tenantDo) Omit(cols ...field.Expr) *tenantDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tenantDo) Join(table schema.Tabler, on ...field.Expr) *tenantDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tenantDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tenantDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tenantDo) RightJoin(table schema.Tabler, on ...field.Expr) *tenantDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tenantDo) Group(cols ...field.Expr) *tenantDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tenantDo) Having(conds ...gen.Condition) *tenantDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tenantDo) Limit(limit int) *tenantDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tenantDo) Offset(offset int) *tenantDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tenantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tenantDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tenantDo) Unscoped() *tenantDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tenantDo) Create(values ...*dbmodel.Tenant) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tenantDo) CreateInBatches(values []*dbmodel.Tenant, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tenantDo) Save(values ...*dbmodel.Tenant) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tenantDo) First() (*dbmodel.Tenant, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Tenant), nil
	}
}

func (t tenantDo) Take() (*dbmodel.Tenant, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Tenant), nil
	}
}

func (t tenantDo) Last() (*dbmodel.Tenant, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Tenant), nil
	}
}

func (t tenantDo) Find() ([]*dbmodel.Tenant, error) {
	result, err := t.DO.Find()
	return result.([]*dbmodel.Tenant), err
}

func (t tenantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.Tenant, err error) {
	buf := make([]*dbmodel.Tenant, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tenantDo) FindInBatches(result *[]*dbmodel.Tenant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tenantDo) Attrs(attrs ...field.AssignExpr) *tenantDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tenantDo) Assign(attrs ...field.AssignExpr) *tenantDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tenantDo) Joins(fields ...field.RelationField) *tenantDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tenantDo) Preload(fields ...field.RelationField) *tenantDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tenantDo) FirstOrInit() (*dbmodel.Tenant, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Tenant), nil
	}
}

func (t tenantDo) FirstOrCreate() (*dbmodel.Tenant, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Tenant), nil
	}
}

func (t tenantDo) FindByPage(offset int, limit int) (result []*dbmodel.Tenant, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tenantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tenantDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tenantDo) Delete(models ...*dbmodel.Tenant) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tenantDo) withDO(do gen.Dao) *tenantDo {
	t.DO = *do.(*gen.DO)
	return t
}
