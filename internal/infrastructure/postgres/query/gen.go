// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	Car          *car
	Company      *company
	Individual   *individual
	Option       *option
	Rental       *rental
	RentalOption *rentalOption
	Renter       *renter
	Tenant       *tenant
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Car = &Q.Car
	Company = &Q.Company
	Individual = &Q.Individual
	Option = &Q.Option
	Rental = &Q.Rental
	RentalOption = &Q.RentalOption
	Renter = &Q.Renter
	Tenant = &Q.Tenant
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		Car:          newCar(db, opts...),
		Company:      newCompany(db, opts...),
		Individual:   newIndividual(db, opts...),
		Option:       newOption(db, opts...),
		Rental:       newRental(db, opts...),
		RentalOption: newRentalOption(db, opts...),
		Renter:       newRenter(db, opts...),
		Tenant:       newTenant(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Car          car
	Company      company
	Individual   individual
	Option       option
	Rental       rental
	RentalOption rentalOption
	Renter       renter
	Tenant       tenant
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Car:          q.Car.clone(db),
		Company:      q.Company.clone(db),
		Individual:   q.Individual.clone(db),
		Option:       q.Option.clone(db),
		Rental:       q.Rental.clone(db),
		RentalOption: q.RentalOption.clone(db),
		Renter:       q.Renter.clone(db),
		Tenant:       q.Tenant.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		Car:          q.Car.replaceDB(db),
		Company:      q.Company.replaceDB(db),
		Individual:   q.Individual.replaceDB(db),
		Option:       q.Option.replaceDB(db),
		Rental:       q.Rental.replaceDB(db),
		RentalOption: q.RentalOption.replaceDB(db),
		Renter:       q.Renter.replaceDB(db),
		Tenant:       q.Tenant.replaceDB(db),
	}
}

type queryCtx struct {
	Car          *carDo
	Company      *companyDo
	Individual   *individualDo
	Option       *optionDo
	Rental       *rentalDo
	RentalOption *rentalOptionDo
	Renter       *renterDo
	Tenant       *tenantDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Car:          q.Car.WithContext(ctx),
		Company:      q.Company.WithContext(ctx),
		Individual:   q.Individual.WithContext(ctx),
		Option:       q.Option.WithContext(ctx),
		Rental:       q.Rental.WithContext(ctx),
		RentalOption: q.RentalOption.WithContext(ctx),
		Renter:       q.Renter.WithContext(ctx),
		Tenant:       q.Tenant.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
