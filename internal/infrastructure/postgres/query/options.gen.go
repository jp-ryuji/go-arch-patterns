// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/jp-ryuji/go-sample/internal/infrastructure/postgres/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newOption(db *gorm.DB, opts ...gen.DOOption) option {
	_option := option{}

	_option.optionDo.UseDB(db, opts...)
	_option.optionDo.UseModel(&dbmodel.Option{})

	tableName := _option.optionDo.TableName()
	_option.ALL = field.NewAsterisk(tableName)
	_option.ID = field.NewString(tableName, "id")
	_option.TenantID = field.NewString(tableName, "tenant_id")
	_option.Name = field.NewString(tableName, "name")
	_option.CreatedAt = field.NewTime(tableName, "created_at")
	_option.UpdatedAt = field.NewTime(tableName, "updated_at")
	_option.DeletedAt = field.NewField(tableName, "deleted_at")
	_option.RentalOptions = optionHasManyRentalOptions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("RentalOptions", "dbmodel.RentalOption"),
		Rental: struct {
			field.RelationField
			Tenant struct {
				field.RelationField
				Cars struct {
					field.RelationField
					Tenant struct {
						field.RelationField
					}
					Rentals struct {
						field.RelationField
					}
				}
			}
			Car struct {
				field.RelationField
			}
			Renter struct {
				field.RelationField
				Rentals struct {
					field.RelationField
				}
			}
			RentalOptions struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("RentalOptions.Rental", "dbmodel.Rental"),
			Tenant: struct {
				field.RelationField
				Cars struct {
					field.RelationField
					Tenant struct {
						field.RelationField
					}
					Rentals struct {
						field.RelationField
					}
				}
			}{
				RelationField: field.NewRelation("RentalOptions.Rental.Tenant", "dbmodel.Tenant"),
				Cars: struct {
					field.RelationField
					Tenant struct {
						field.RelationField
					}
					Rentals struct {
						field.RelationField
					}
				}{
					RelationField: field.NewRelation("RentalOptions.Rental.Tenant.Cars", "dbmodel.Car"),
					Tenant: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("RentalOptions.Rental.Tenant.Cars.Tenant", "dbmodel.Tenant"),
					},
					Rentals: struct {
						field.RelationField
					}{
						RelationField: field.NewRelation("RentalOptions.Rental.Tenant.Cars.Rentals", "dbmodel.Rental"),
					},
				},
			},
			Car: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("RentalOptions.Rental.Car", "dbmodel.Car"),
			},
			Renter: struct {
				field.RelationField
				Rentals struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("RentalOptions.Rental.Renter", "dbmodel.Renter"),
				Rentals: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("RentalOptions.Rental.Renter.Rentals", "dbmodel.Rental"),
				},
			},
			RentalOptions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("RentalOptions.Rental.RentalOptions", "dbmodel.RentalOption"),
			},
		},
		Option: struct {
			field.RelationField
			RentalOptions struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("RentalOptions.Option", "dbmodel.Option"),
			RentalOptions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("RentalOptions.Option.RentalOptions", "dbmodel.RentalOption"),
			},
		},
	}

	_option.fillFieldMap()

	return _option
}

type option struct {
	optionDo optionDo

	ALL           field.Asterisk
	ID            field.String
	TenantID      field.String
	Name          field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	RentalOptions optionHasManyRentalOptions

	fieldMap map[string]field.Expr
}

func (o option) Table(newTableName string) *option {
	o.optionDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o option) As(alias string) *option {
	o.optionDo.DO = *(o.optionDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *option) updateTableName(table string) *option {
	o.ALL = field.NewAsterisk(table)
	o.ID = field.NewString(table, "id")
	o.TenantID = field.NewString(table, "tenant_id")
	o.Name = field.NewString(table, "name")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")
	o.DeletedAt = field.NewField(table, "deleted_at")

	o.fillFieldMap()

	return o
}

func (o *option) WithContext(ctx context.Context) *optionDo { return o.optionDo.WithContext(ctx) }

func (o option) TableName() string { return o.optionDo.TableName() }

func (o option) Alias() string { return o.optionDo.Alias() }

func (o option) Columns(cols ...field.Expr) gen.Columns { return o.optionDo.Columns(cols...) }

func (o *option) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *option) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 7)
	o.fieldMap["id"] = o.ID
	o.fieldMap["tenant_id"] = o.TenantID
	o.fieldMap["name"] = o.Name
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["deleted_at"] = o.DeletedAt

}

func (o option) clone(db *gorm.DB) option {
	o.optionDo.ReplaceConnPool(db.Statement.ConnPool)
	o.RentalOptions.db = db.Session(&gorm.Session{Initialized: true})
	o.RentalOptions.db.Statement.ConnPool = db.Statement.ConnPool
	return o
}

func (o option) replaceDB(db *gorm.DB) option {
	o.optionDo.ReplaceDB(db)
	o.RentalOptions.db = db.Session(&gorm.Session{})
	return o
}

type optionHasManyRentalOptions struct {
	db *gorm.DB

	field.RelationField

	Rental struct {
		field.RelationField
		Tenant struct {
			field.RelationField
			Cars struct {
				field.RelationField
				Tenant struct {
					field.RelationField
				}
				Rentals struct {
					field.RelationField
				}
			}
		}
		Car struct {
			field.RelationField
		}
		Renter struct {
			field.RelationField
			Rentals struct {
				field.RelationField
			}
		}
		RentalOptions struct {
			field.RelationField
		}
	}
	Option struct {
		field.RelationField
		RentalOptions struct {
			field.RelationField
		}
	}
}

func (a optionHasManyRentalOptions) Where(conds ...field.Expr) *optionHasManyRentalOptions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a optionHasManyRentalOptions) WithContext(ctx context.Context) *optionHasManyRentalOptions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a optionHasManyRentalOptions) Session(session *gorm.Session) *optionHasManyRentalOptions {
	a.db = a.db.Session(session)
	return &a
}

func (a optionHasManyRentalOptions) Model(m *dbmodel.Option) *optionHasManyRentalOptionsTx {
	return &optionHasManyRentalOptionsTx{a.db.Model(m).Association(a.Name())}
}

func (a optionHasManyRentalOptions) Unscoped() *optionHasManyRentalOptions {
	a.db = a.db.Unscoped()
	return &a
}

type optionHasManyRentalOptionsTx struct{ tx *gorm.Association }

func (a optionHasManyRentalOptionsTx) Find() (result []*dbmodel.RentalOption, err error) {
	return result, a.tx.Find(&result)
}

func (a optionHasManyRentalOptionsTx) Append(values ...*dbmodel.RentalOption) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a optionHasManyRentalOptionsTx) Replace(values ...*dbmodel.RentalOption) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a optionHasManyRentalOptionsTx) Delete(values ...*dbmodel.RentalOption) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a optionHasManyRentalOptionsTx) Clear() error {
	return a.tx.Clear()
}

func (a optionHasManyRentalOptionsTx) Count() int64 {
	return a.tx.Count()
}

func (a optionHasManyRentalOptionsTx) Unscoped() *optionHasManyRentalOptionsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type optionDo struct{ gen.DO }

func (o optionDo) Debug() *optionDo {
	return o.withDO(o.DO.Debug())
}

func (o optionDo) WithContext(ctx context.Context) *optionDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o optionDo) ReadDB() *optionDo {
	return o.Clauses(dbresolver.Read)
}

func (o optionDo) WriteDB() *optionDo {
	return o.Clauses(dbresolver.Write)
}

func (o optionDo) Session(config *gorm.Session) *optionDo {
	return o.withDO(o.DO.Session(config))
}

func (o optionDo) Clauses(conds ...clause.Expression) *optionDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o optionDo) Returning(value interface{}, columns ...string) *optionDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o optionDo) Not(conds ...gen.Condition) *optionDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o optionDo) Or(conds ...gen.Condition) *optionDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o optionDo) Select(conds ...field.Expr) *optionDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o optionDo) Where(conds ...gen.Condition) *optionDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o optionDo) Order(conds ...field.Expr) *optionDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o optionDo) Distinct(cols ...field.Expr) *optionDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o optionDo) Omit(cols ...field.Expr) *optionDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o optionDo) Join(table schema.Tabler, on ...field.Expr) *optionDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o optionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *optionDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o optionDo) RightJoin(table schema.Tabler, on ...field.Expr) *optionDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o optionDo) Group(cols ...field.Expr) *optionDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o optionDo) Having(conds ...gen.Condition) *optionDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o optionDo) Limit(limit int) *optionDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o optionDo) Offset(offset int) *optionDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o optionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *optionDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o optionDo) Unscoped() *optionDo {
	return o.withDO(o.DO.Unscoped())
}

func (o optionDo) Create(values ...*dbmodel.Option) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o optionDo) CreateInBatches(values []*dbmodel.Option, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o optionDo) Save(values ...*dbmodel.Option) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o optionDo) First() (*dbmodel.Option, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Option), nil
	}
}

func (o optionDo) Take() (*dbmodel.Option, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Option), nil
	}
}

func (o optionDo) Last() (*dbmodel.Option, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Option), nil
	}
}

func (o optionDo) Find() ([]*dbmodel.Option, error) {
	result, err := o.DO.Find()
	return result.([]*dbmodel.Option), err
}

func (o optionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.Option, err error) {
	buf := make([]*dbmodel.Option, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o optionDo) FindInBatches(result *[]*dbmodel.Option, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o optionDo) Attrs(attrs ...field.AssignExpr) *optionDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o optionDo) Assign(attrs ...field.AssignExpr) *optionDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o optionDo) Joins(fields ...field.RelationField) *optionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o optionDo) Preload(fields ...field.RelationField) *optionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o optionDo) FirstOrInit() (*dbmodel.Option, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Option), nil
	}
}

func (o optionDo) FirstOrCreate() (*dbmodel.Option, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Option), nil
	}
}

func (o optionDo) FindByPage(offset int, limit int) (result []*dbmodel.Option, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o optionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o optionDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o optionDo) Delete(models ...*dbmodel.Option) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *optionDo) withDO(do gen.Dao) *optionDo {
	o.DO = *do.(*gen.DO)
	return o
}
