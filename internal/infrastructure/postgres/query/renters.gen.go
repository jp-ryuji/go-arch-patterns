// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/jp-ryuji/go-sample/internal/infrastructure/postgres/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRenter(db *gorm.DB, opts ...gen.DOOption) renter {
	_renter := renter{}

	_renter.renterDo.UseDB(db, opts...)
	_renter.renterDo.UseModel(&dbmodel.Renter{})

	tableName := _renter.renterDo.TableName()
	_renter.ALL = field.NewAsterisk(tableName)
	_renter.ID = field.NewString(tableName, "id")
	_renter.TenantID = field.NewString(tableName, "tenant_id")
	_renter.RenterEntityID = field.NewString(tableName, "renter_entity_id")
	_renter.RenterEntityType = field.NewString(tableName, "renter_entity_type")
	_renter.CreatedAt = field.NewTime(tableName, "created_at")
	_renter.UpdatedAt = field.NewTime(tableName, "updated_at")
	_renter.DeletedAt = field.NewField(tableName, "deleted_at")
	_renter.Rentals = renterHasManyRentals{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Rentals", "dbmodel.Rental"),
		Tenant: struct {
			field.RelationField
			Cars struct {
				field.RelationField
				Tenant struct {
					field.RelationField
				}
				Rentals struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Rentals.Tenant", "dbmodel.Tenant"),
			Cars: struct {
				field.RelationField
				Tenant struct {
					field.RelationField
				}
				Rentals struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Rentals.Tenant.Cars", "dbmodel.Car"),
				Tenant: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Rentals.Tenant.Cars.Tenant", "dbmodel.Tenant"),
				},
				Rentals: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Rentals.Tenant.Cars.Rentals", "dbmodel.Rental"),
				},
			},
		},
		Car: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Rentals.Car", "dbmodel.Car"),
		},
		Renter: struct {
			field.RelationField
			Rentals struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Rentals.Renter", "dbmodel.Renter"),
			Rentals: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Rentals.Renter.Rentals", "dbmodel.Rental"),
			},
		},
		RentalOptions: struct {
			field.RelationField
			Rental struct {
				field.RelationField
			}
			Option struct {
				field.RelationField
				RentalOptions struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Rentals.RentalOptions", "dbmodel.RentalOption"),
			Rental: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Rentals.RentalOptions.Rental", "dbmodel.Rental"),
			},
			Option: struct {
				field.RelationField
				RentalOptions struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Rentals.RentalOptions.Option", "dbmodel.Option"),
				RentalOptions: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Rentals.RentalOptions.Option.RentalOptions", "dbmodel.RentalOption"),
				},
			},
		},
	}

	_renter.fillFieldMap()

	return _renter
}

type renter struct {
	renterDo renterDo

	ALL              field.Asterisk
	ID               field.String
	TenantID         field.String
	RenterEntityID   field.String
	RenterEntityType field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	Rentals          renterHasManyRentals

	fieldMap map[string]field.Expr
}

func (r renter) Table(newTableName string) *renter {
	r.renterDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r renter) As(alias string) *renter {
	r.renterDo.DO = *(r.renterDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *renter) updateTableName(table string) *renter {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.TenantID = field.NewString(table, "tenant_id")
	r.RenterEntityID = field.NewString(table, "renter_entity_id")
	r.RenterEntityType = field.NewString(table, "renter_entity_type")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *renter) WithContext(ctx context.Context) *renterDo { return r.renterDo.WithContext(ctx) }

func (r renter) TableName() string { return r.renterDo.TableName() }

func (r renter) Alias() string { return r.renterDo.Alias() }

func (r renter) Columns(cols ...field.Expr) gen.Columns { return r.renterDo.Columns(cols...) }

func (r *renter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *renter) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["tenant_id"] = r.TenantID
	r.fieldMap["renter_entity_id"] = r.RenterEntityID
	r.fieldMap["renter_entity_type"] = r.RenterEntityType
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt

}

func (r renter) clone(db *gorm.DB) renter {
	r.renterDo.ReplaceConnPool(db.Statement.ConnPool)
	r.Rentals.db = db.Session(&gorm.Session{Initialized: true})
	r.Rentals.db.Statement.ConnPool = db.Statement.ConnPool
	return r
}

func (r renter) replaceDB(db *gorm.DB) renter {
	r.renterDo.ReplaceDB(db)
	r.Rentals.db = db.Session(&gorm.Session{})
	return r
}

type renterHasManyRentals struct {
	db *gorm.DB

	field.RelationField

	Tenant struct {
		field.RelationField
		Cars struct {
			field.RelationField
			Tenant struct {
				field.RelationField
			}
			Rentals struct {
				field.RelationField
			}
		}
	}
	Car struct {
		field.RelationField
	}
	Renter struct {
		field.RelationField
		Rentals struct {
			field.RelationField
		}
	}
	RentalOptions struct {
		field.RelationField
		Rental struct {
			field.RelationField
		}
		Option struct {
			field.RelationField
			RentalOptions struct {
				field.RelationField
			}
		}
	}
}

func (a renterHasManyRentals) Where(conds ...field.Expr) *renterHasManyRentals {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a renterHasManyRentals) WithContext(ctx context.Context) *renterHasManyRentals {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a renterHasManyRentals) Session(session *gorm.Session) *renterHasManyRentals {
	a.db = a.db.Session(session)
	return &a
}

func (a renterHasManyRentals) Model(m *dbmodel.Renter) *renterHasManyRentalsTx {
	return &renterHasManyRentalsTx{a.db.Model(m).Association(a.Name())}
}

func (a renterHasManyRentals) Unscoped() *renterHasManyRentals {
	a.db = a.db.Unscoped()
	return &a
}

type renterHasManyRentalsTx struct{ tx *gorm.Association }

func (a renterHasManyRentalsTx) Find() (result []*dbmodel.Rental, err error) {
	return result, a.tx.Find(&result)
}

func (a renterHasManyRentalsTx) Append(values ...*dbmodel.Rental) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a renterHasManyRentalsTx) Replace(values ...*dbmodel.Rental) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a renterHasManyRentalsTx) Delete(values ...*dbmodel.Rental) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a renterHasManyRentalsTx) Clear() error {
	return a.tx.Clear()
}

func (a renterHasManyRentalsTx) Count() int64 {
	return a.tx.Count()
}

func (a renterHasManyRentalsTx) Unscoped() *renterHasManyRentalsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type renterDo struct{ gen.DO }

func (r renterDo) Debug() *renterDo {
	return r.withDO(r.DO.Debug())
}

func (r renterDo) WithContext(ctx context.Context) *renterDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r renterDo) ReadDB() *renterDo {
	return r.Clauses(dbresolver.Read)
}

func (r renterDo) WriteDB() *renterDo {
	return r.Clauses(dbresolver.Write)
}

func (r renterDo) Session(config *gorm.Session) *renterDo {
	return r.withDO(r.DO.Session(config))
}

func (r renterDo) Clauses(conds ...clause.Expression) *renterDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r renterDo) Returning(value interface{}, columns ...string) *renterDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r renterDo) Not(conds ...gen.Condition) *renterDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r renterDo) Or(conds ...gen.Condition) *renterDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r renterDo) Select(conds ...field.Expr) *renterDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r renterDo) Where(conds ...gen.Condition) *renterDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r renterDo) Order(conds ...field.Expr) *renterDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r renterDo) Distinct(cols ...field.Expr) *renterDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r renterDo) Omit(cols ...field.Expr) *renterDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r renterDo) Join(table schema.Tabler, on ...field.Expr) *renterDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r renterDo) LeftJoin(table schema.Tabler, on ...field.Expr) *renterDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r renterDo) RightJoin(table schema.Tabler, on ...field.Expr) *renterDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r renterDo) Group(cols ...field.Expr) *renterDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r renterDo) Having(conds ...gen.Condition) *renterDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r renterDo) Limit(limit int) *renterDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r renterDo) Offset(offset int) *renterDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r renterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *renterDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r renterDo) Unscoped() *renterDo {
	return r.withDO(r.DO.Unscoped())
}

func (r renterDo) Create(values ...*dbmodel.Renter) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r renterDo) CreateInBatches(values []*dbmodel.Renter, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r renterDo) Save(values ...*dbmodel.Renter) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r renterDo) First() (*dbmodel.Renter, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Renter), nil
	}
}

func (r renterDo) Take() (*dbmodel.Renter, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Renter), nil
	}
}

func (r renterDo) Last() (*dbmodel.Renter, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Renter), nil
	}
}

func (r renterDo) Find() ([]*dbmodel.Renter, error) {
	result, err := r.DO.Find()
	return result.([]*dbmodel.Renter), err
}

func (r renterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.Renter, err error) {
	buf := make([]*dbmodel.Renter, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r renterDo) FindInBatches(result *[]*dbmodel.Renter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r renterDo) Attrs(attrs ...field.AssignExpr) *renterDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r renterDo) Assign(attrs ...field.AssignExpr) *renterDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r renterDo) Joins(fields ...field.RelationField) *renterDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r renterDo) Preload(fields ...field.RelationField) *renterDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r renterDo) FirstOrInit() (*dbmodel.Renter, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Renter), nil
	}
}

func (r renterDo) FirstOrCreate() (*dbmodel.Renter, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Renter), nil
	}
}

func (r renterDo) FindByPage(offset int, limit int) (result []*dbmodel.Renter, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r renterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r renterDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r renterDo) Delete(models ...*dbmodel.Renter) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *renterDo) withDO(do gen.Dao) *renterDo {
	r.DO = *do.(*gen.DO)
	return r
}
