// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/jp-ryuji/go-sample/internal/infrastructure/postgres/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newIndividual(db *gorm.DB, opts ...gen.DOOption) individual {
	_individual := individual{}

	_individual.individualDo.UseDB(db, opts...)
	_individual.individualDo.UseModel(&dbmodel.Individual{})

	tableName := _individual.individualDo.TableName()
	_individual.ALL = field.NewAsterisk(tableName)
	_individual.ID = field.NewString(tableName, "id")
	_individual.TenantID = field.NewString(tableName, "tenant_id")
	_individual.Email = field.NewString(tableName, "email")
	_individual.FirstName = field.NewString(tableName, "first_name")
	_individual.LastName = field.NewString(tableName, "last_name")
	_individual.CreatedAt = field.NewTime(tableName, "created_at")
	_individual.UpdatedAt = field.NewTime(tableName, "updated_at")
	_individual.DeletedAt = field.NewField(tableName, "deleted_at")

	_individual.fillFieldMap()

	return _individual
}

type individual struct {
	individualDo individualDo

	ALL       field.Asterisk
	ID        field.String
	TenantID  field.String
	Email     field.String
	FirstName field.String
	LastName  field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (i individual) Table(newTableName string) *individual {
	i.individualDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i individual) As(alias string) *individual {
	i.individualDo.DO = *(i.individualDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *individual) updateTableName(table string) *individual {
	i.ALL = field.NewAsterisk(table)
	i.ID = field.NewString(table, "id")
	i.TenantID = field.NewString(table, "tenant_id")
	i.Email = field.NewString(table, "email")
	i.FirstName = field.NewString(table, "first_name")
	i.LastName = field.NewString(table, "last_name")
	i.CreatedAt = field.NewTime(table, "created_at")
	i.UpdatedAt = field.NewTime(table, "updated_at")
	i.DeletedAt = field.NewField(table, "deleted_at")

	i.fillFieldMap()

	return i
}

func (i *individual) WithContext(ctx context.Context) *individualDo {
	return i.individualDo.WithContext(ctx)
}

func (i individual) TableName() string { return i.individualDo.TableName() }

func (i individual) Alias() string { return i.individualDo.Alias() }

func (i individual) Columns(cols ...field.Expr) gen.Columns { return i.individualDo.Columns(cols...) }

func (i *individual) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *individual) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 8)
	i.fieldMap["id"] = i.ID
	i.fieldMap["tenant_id"] = i.TenantID
	i.fieldMap["email"] = i.Email
	i.fieldMap["first_name"] = i.FirstName
	i.fieldMap["last_name"] = i.LastName
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["updated_at"] = i.UpdatedAt
	i.fieldMap["deleted_at"] = i.DeletedAt
}

func (i individual) clone(db *gorm.DB) individual {
	i.individualDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i individual) replaceDB(db *gorm.DB) individual {
	i.individualDo.ReplaceDB(db)
	return i
}

type individualDo struct{ gen.DO }

func (i individualDo) Debug() *individualDo {
	return i.withDO(i.DO.Debug())
}

func (i individualDo) WithContext(ctx context.Context) *individualDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i individualDo) ReadDB() *individualDo {
	return i.Clauses(dbresolver.Read)
}

func (i individualDo) WriteDB() *individualDo {
	return i.Clauses(dbresolver.Write)
}

func (i individualDo) Session(config *gorm.Session) *individualDo {
	return i.withDO(i.DO.Session(config))
}

func (i individualDo) Clauses(conds ...clause.Expression) *individualDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i individualDo) Returning(value interface{}, columns ...string) *individualDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i individualDo) Not(conds ...gen.Condition) *individualDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i individualDo) Or(conds ...gen.Condition) *individualDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i individualDo) Select(conds ...field.Expr) *individualDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i individualDo) Where(conds ...gen.Condition) *individualDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i individualDo) Order(conds ...field.Expr) *individualDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i individualDo) Distinct(cols ...field.Expr) *individualDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i individualDo) Omit(cols ...field.Expr) *individualDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i individualDo) Join(table schema.Tabler, on ...field.Expr) *individualDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i individualDo) LeftJoin(table schema.Tabler, on ...field.Expr) *individualDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i individualDo) RightJoin(table schema.Tabler, on ...field.Expr) *individualDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i individualDo) Group(cols ...field.Expr) *individualDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i individualDo) Having(conds ...gen.Condition) *individualDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i individualDo) Limit(limit int) *individualDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i individualDo) Offset(offset int) *individualDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i individualDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *individualDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i individualDo) Unscoped() *individualDo {
	return i.withDO(i.DO.Unscoped())
}

func (i individualDo) Create(values ...*dbmodel.Individual) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i individualDo) CreateInBatches(values []*dbmodel.Individual, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i individualDo) Save(values ...*dbmodel.Individual) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i individualDo) First() (*dbmodel.Individual, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Individual), nil
	}
}

func (i individualDo) Take() (*dbmodel.Individual, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Individual), nil
	}
}

func (i individualDo) Last() (*dbmodel.Individual, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Individual), nil
	}
}

func (i individualDo) Find() ([]*dbmodel.Individual, error) {
	result, err := i.DO.Find()
	return result.([]*dbmodel.Individual), err
}

func (i individualDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.Individual, err error) {
	buf := make([]*dbmodel.Individual, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i individualDo) FindInBatches(result *[]*dbmodel.Individual, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i individualDo) Attrs(attrs ...field.AssignExpr) *individualDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i individualDo) Assign(attrs ...field.AssignExpr) *individualDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i individualDo) Joins(fields ...field.RelationField) *individualDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i individualDo) Preload(fields ...field.RelationField) *individualDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i individualDo) FirstOrInit() (*dbmodel.Individual, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Individual), nil
	}
}

func (i individualDo) FirstOrCreate() (*dbmodel.Individual, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.Individual), nil
	}
}

func (i individualDo) FindByPage(offset int, limit int) (result []*dbmodel.Individual, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i individualDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i individualDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i individualDo) Delete(models ...*dbmodel.Individual) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *individualDo) withDO(do gen.Dao) *individualDo {
	i.DO = *do.(*gen.DO)
	return i
}
