// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"github.com/jp-ryuji/go-sample/internal/infrastructure/postgres/dbmodel"
	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRentalOption(db *gorm.DB, opts ...gen.DOOption) rentalOption {
	_rentalOption := rentalOption{}

	_rentalOption.rentalOptionDo.UseDB(db, opts...)
	_rentalOption.rentalOptionDo.UseModel(&dbmodel.RentalOption{})

	tableName := _rentalOption.rentalOptionDo.TableName()
	_rentalOption.ALL = field.NewAsterisk(tableName)
	_rentalOption.ID = field.NewString(tableName, "id")
	_rentalOption.TenantID = field.NewString(tableName, "tenant_id")
	_rentalOption.RentalID = field.NewString(tableName, "rental_id")
	_rentalOption.OptionID = field.NewString(tableName, "option_id")
	_rentalOption.Count = field.NewInt(tableName, "count")
	_rentalOption.CreatedAt = field.NewTime(tableName, "created_at")
	_rentalOption.UpdatedAt = field.NewTime(tableName, "updated_at")
	_rentalOption.DeletedAt = field.NewField(tableName, "deleted_at")

	_rentalOption.fillFieldMap()

	return _rentalOption
}

type rentalOption struct {
	rentalOptionDo rentalOptionDo

	ALL       field.Asterisk
	ID        field.String
	TenantID  field.String
	RentalID  field.String
	OptionID  field.String
	Count     field.Int
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (r rentalOption) Table(newTableName string) *rentalOption {
	r.rentalOptionDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r rentalOption) As(alias string) *rentalOption {
	r.rentalOptionDo.DO = *(r.rentalOptionDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *rentalOption) updateTableName(table string) *rentalOption {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.TenantID = field.NewString(table, "tenant_id")
	r.RentalID = field.NewString(table, "rental_id")
	r.OptionID = field.NewString(table, "option_id")
	r.Count = field.NewInt(table, "count")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.DeletedAt = field.NewField(table, "deleted_at")

	r.fillFieldMap()

	return r
}

func (r *rentalOption) WithContext(ctx context.Context) *rentalOptionDo {
	return r.rentalOptionDo.WithContext(ctx)
}

func (r rentalOption) TableName() string { return r.rentalOptionDo.TableName() }

func (r rentalOption) Alias() string { return r.rentalOptionDo.Alias() }

func (r rentalOption) Columns(cols ...field.Expr) gen.Columns {
	return r.rentalOptionDo.Columns(cols...)
}

func (r *rentalOption) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *rentalOption) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["tenant_id"] = r.TenantID
	r.fieldMap["rental_id"] = r.RentalID
	r.fieldMap["option_id"] = r.OptionID
	r.fieldMap["count"] = r.Count
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["deleted_at"] = r.DeletedAt
}

func (r rentalOption) clone(db *gorm.DB) rentalOption {
	r.rentalOptionDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r rentalOption) replaceDB(db *gorm.DB) rentalOption {
	r.rentalOptionDo.ReplaceDB(db)
	return r
}

type rentalOptionDo struct{ gen.DO }

func (r rentalOptionDo) Debug() *rentalOptionDo {
	return r.withDO(r.DO.Debug())
}

func (r rentalOptionDo) WithContext(ctx context.Context) *rentalOptionDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r rentalOptionDo) ReadDB() *rentalOptionDo {
	return r.Clauses(dbresolver.Read)
}

func (r rentalOptionDo) WriteDB() *rentalOptionDo {
	return r.Clauses(dbresolver.Write)
}

func (r rentalOptionDo) Session(config *gorm.Session) *rentalOptionDo {
	return r.withDO(r.DO.Session(config))
}

func (r rentalOptionDo) Clauses(conds ...clause.Expression) *rentalOptionDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r rentalOptionDo) Returning(value interface{}, columns ...string) *rentalOptionDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r rentalOptionDo) Not(conds ...gen.Condition) *rentalOptionDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r rentalOptionDo) Or(conds ...gen.Condition) *rentalOptionDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r rentalOptionDo) Select(conds ...field.Expr) *rentalOptionDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r rentalOptionDo) Where(conds ...gen.Condition) *rentalOptionDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r rentalOptionDo) Order(conds ...field.Expr) *rentalOptionDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r rentalOptionDo) Distinct(cols ...field.Expr) *rentalOptionDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r rentalOptionDo) Omit(cols ...field.Expr) *rentalOptionDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r rentalOptionDo) Join(table schema.Tabler, on ...field.Expr) *rentalOptionDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r rentalOptionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *rentalOptionDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r rentalOptionDo) RightJoin(table schema.Tabler, on ...field.Expr) *rentalOptionDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r rentalOptionDo) Group(cols ...field.Expr) *rentalOptionDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r rentalOptionDo) Having(conds ...gen.Condition) *rentalOptionDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r rentalOptionDo) Limit(limit int) *rentalOptionDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r rentalOptionDo) Offset(offset int) *rentalOptionDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r rentalOptionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *rentalOptionDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r rentalOptionDo) Unscoped() *rentalOptionDo {
	return r.withDO(r.DO.Unscoped())
}

func (r rentalOptionDo) Create(values ...*dbmodel.RentalOption) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r rentalOptionDo) CreateInBatches(values []*dbmodel.RentalOption, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r rentalOptionDo) Save(values ...*dbmodel.RentalOption) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r rentalOptionDo) First() (*dbmodel.RentalOption, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.RentalOption), nil
	}
}

func (r rentalOptionDo) Take() (*dbmodel.RentalOption, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.RentalOption), nil
	}
}

func (r rentalOptionDo) Last() (*dbmodel.RentalOption, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.RentalOption), nil
	}
}

func (r rentalOptionDo) Find() ([]*dbmodel.RentalOption, error) {
	result, err := r.DO.Find()
	return result.([]*dbmodel.RentalOption), err
}

func (r rentalOptionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbmodel.RentalOption, err error) {
	buf := make([]*dbmodel.RentalOption, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r rentalOptionDo) FindInBatches(result *[]*dbmodel.RentalOption, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r rentalOptionDo) Attrs(attrs ...field.AssignExpr) *rentalOptionDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r rentalOptionDo) Assign(attrs ...field.AssignExpr) *rentalOptionDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r rentalOptionDo) Joins(fields ...field.RelationField) *rentalOptionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r rentalOptionDo) Preload(fields ...field.RelationField) *rentalOptionDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r rentalOptionDo) FirstOrInit() (*dbmodel.RentalOption, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.RentalOption), nil
	}
}

func (r rentalOptionDo) FirstOrCreate() (*dbmodel.RentalOption, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbmodel.RentalOption), nil
	}
}

func (r rentalOptionDo) FindByPage(offset int, limit int) (result []*dbmodel.RentalOption, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r rentalOptionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r rentalOptionDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r rentalOptionDo) Delete(models ...*dbmodel.RentalOption) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *rentalOptionDo) withDO(do gen.Dao) *rentalOptionDo {
	r.DO = *do.(*gen.DO)
	return r
}
