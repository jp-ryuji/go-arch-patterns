// Code generated by MockGen. DO NOT EDIT.
// Source: car.go
//
// Generated by this command:
//
//	mockgen -source=car.go -destination=mock/car.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/jp-ryuji/go-sample/internal/domain/model"
	input "github.com/jp-ryuji/go-sample/internal/infrastructure/usecase/input"
	gomock "go.uber.org/mock/gomock"
)

// MockCarUsecase is a mock of CarUsecase interface.
type MockCarUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCarUsecaseMockRecorder
	isgomock struct{}
}

// MockCarUsecaseMockRecorder is the mock recorder for MockCarUsecase.
type MockCarUsecaseMockRecorder struct {
	mock *MockCarUsecase
}

// NewMockCarUsecase creates a new mock instance.
func NewMockCarUsecase(ctrl *gomock.Controller) *MockCarUsecase {
	mock := &MockCarUsecase{ctrl: ctrl}
	mock.recorder = &MockCarUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarUsecase) EXPECT() *MockCarUsecaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockCarUsecase) GetByID(ctx context.Context, arg1 input.GetCarByIDInput) (*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, arg1)
	ret0, _ := ret[0].(*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCarUsecaseMockRecorder) GetByID(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCarUsecase)(nil).GetByID), ctx, arg1)
}

// Register mocks base method.
func (m *MockCarUsecase) Register(ctx context.Context, arg1 input.RegisterCarInput) (*model.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, arg1)
	ret0, _ := ret[0].(*model.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockCarUsecaseMockRecorder) Register(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCarUsecase)(nil).Register), ctx, arg1)
}
