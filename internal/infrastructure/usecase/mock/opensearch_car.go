// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jp-ryuji/go-sample/internal/infrastructure/usecase (interfaces: OpenSearchCarRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/infrastructure/usecase/mock/opensearch_car.go -package=mock_usecase github.com/jp-ryuji/go-sample/internal/infrastructure/usecase OpenSearchCarRepository
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	model "github.com/jp-ryuji/go-sample/internal/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockOpenSearchCarRepository is a mock of OpenSearchCarRepository interface.
type MockOpenSearchCarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOpenSearchCarRepositoryMockRecorder
}

// MockOpenSearchCarRepositoryMockRecorder is the mock recorder for MockOpenSearchCarRepository.
type MockOpenSearchCarRepositoryMockRecorder struct {
	mock *MockOpenSearchCarRepository
}

// NewMockOpenSearchCarRepository creates a new mock instance.
func NewMockOpenSearchCarRepository(ctrl *gomock.Controller) *MockOpenSearchCarRepository {
	mock := &MockOpenSearchCarRepository{ctrl: ctrl}
	mock.recorder = &MockOpenSearchCarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOpenSearchCarRepository) EXPECT() *MockOpenSearchCarRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOpenSearchCarRepository) Create(arg0 context.Context, arg1 *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOpenSearchCarRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOpenSearchCarRepository)(nil).Create), arg0, arg1)
}

// Update mocks base method.
func (m *MockOpenSearchCarRepository) Update(arg0 context.Context, arg1 *model.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOpenSearchCarRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOpenSearchCarRepository)(nil).Update), arg0, arg1)
}
