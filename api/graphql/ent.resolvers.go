package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/jp-ryuji/go-arch-patterns/api/graphql/generated"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (entgen.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]entgen.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Cars is the resolver for the cars field.
func (r *queryResolver) Cars(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CarOrder) (*entgen.CarConnection, error) {
	panic(fmt.Errorf("not implemented: Cars - cars"))
}

// CarOptions is the resolver for the carOptions field.
func (r *queryResolver) CarOptions(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CarOptionOrder) (*entgen.CarOptionConnection, error) {
	panic(fmt.Errorf("not implemented: CarOptions - carOptions"))
}

// Companies is the resolver for the companies field.
func (r *queryResolver) Companies(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CompanyOrder) (*entgen.CompanyConnection, error) {
	panic(fmt.Errorf("not implemented: Companies - companies"))
}

// Individuals is the resolver for the individuals field.
func (r *queryResolver) Individuals(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.IndividualOrder) (*entgen.IndividualConnection, error) {
	panic(fmt.Errorf("not implemented: Individuals - individuals"))
}

// Outboxes is the resolver for the outboxes field.
func (r *queryResolver) Outboxes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.OutboxOrder) (*entgen.OutboxConnection, error) {
	panic(fmt.Errorf("not implemented: Outboxes - outboxes"))
}

// Rentals is the resolver for the rentals field.
func (r *queryResolver) Rentals(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RentalOrder) (*entgen.RentalConnection, error) {
	panic(fmt.Errorf("not implemented: Rentals - rentals"))
}

// RentalOptions is the resolver for the rentalOptions field.
func (r *queryResolver) RentalOptions(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RentalOptionOrder) (*entgen.RentalOptionConnection, error) {
	panic(fmt.Errorf("not implemented: RentalOptions - rentalOptions"))
}

// Renters is the resolver for the renters field.
func (r *queryResolver) Renters(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RenterOrder) (*entgen.RenterConnection, error) {
	panic(fmt.Errorf("not implemented: Renters - renters"))
}

// Tenants is the resolver for the tenants field.
func (r *queryResolver) Tenants(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.TenantOrder) (*entgen.TenantConnection, error) {
	panic(fmt.Errorf("not implemented: Tenants - tenants"))
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
