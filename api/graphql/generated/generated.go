// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/entgen"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Car struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Model     func(childComplexity int) int
		Rentals   func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	CarConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	CarOption struct {
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		RentalOptions func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	CarOptionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CarOptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Company struct {
		CompanySize func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Renter      func(childComplexity int) int
		RenterID    func(childComplexity int) int
		Tenant      func(childComplexity int) int
		TenantID    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	CompanyConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	CompanyEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Individual struct {
		CreatedAt func(childComplexity int) int
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
		Renter    func(childComplexity int) int
		RenterID  func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	IndividualConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	IndividualEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Outbox struct {
		AggregateID   func(childComplexity int) int
		AggregateType func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ErrorMessage  func(childComplexity int) int
		EventType     func(childComplexity int) int
		ID            func(childComplexity int) int
		LockedAt      func(childComplexity int) int
		LockedBy      func(childComplexity int) int
		Payload       func(childComplexity int) int
		ProcessedAt   func(childComplexity int) int
		Status        func(childComplexity int) int
		Version       func(childComplexity int) int
	}

	OutboxConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OutboxEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Query struct {
		CarOptions    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CarOptionOrder) int
		Cars          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CarOrder) int
		Companies     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CompanyOrder) int
		Individuals   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.IndividualOrder) int
		Node          func(childComplexity int, id string) int
		Nodes         func(childComplexity int, ids []string) int
		Outboxes      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.OutboxOrder) int
		RentalOptions func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RentalOptionOrder) int
		Rentals       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RentalOrder) int
		Renters       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RenterOrder) int
		Tenants       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.TenantOrder) int
	}

	Rental struct {
		Car           func(childComplexity int) int
		CarID         func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		EndsAt        func(childComplexity int) int
		ID            func(childComplexity int) int
		RentalOptions func(childComplexity int) int
		Renter        func(childComplexity int) int
		RenterID      func(childComplexity int) int
		StartsAt      func(childComplexity int) int
		Tenant        func(childComplexity int) int
		TenantID      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	RentalConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RentalEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	RentalOption struct {
		Count     func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Option    func(childComplexity int) int
		OptionID  func(childComplexity int) int
		Rental    func(childComplexity int) int
		RentalID  func(childComplexity int) int
		Tenant    func(childComplexity int) int
		TenantID  func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	RentalOptionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RentalOptionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Renter struct {
		Company    func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Individual func(childComplexity int) int
		Rentals    func(childComplexity int) int
		Tenant     func(childComplexity int) int
		TenantID   func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	RenterConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	RenterEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Tenant struct {
		Cars          func(childComplexity int) int
		Code          func(childComplexity int) int
		Companies     func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		ID            func(childComplexity int) int
		Individuals   func(childComplexity int) int
		Options       func(childComplexity int) int
		RentalOptions func(childComplexity int) int
		Rentals       func(childComplexity int) int
		Renters       func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	TenantConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TenantEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type QueryResolver interface {
	Node(ctx context.Context, id string) (entgen.Noder, error)
	Nodes(ctx context.Context, ids []string) ([]entgen.Noder, error)
	Cars(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CarOrder) (*entgen.CarConnection, error)
	CarOptions(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CarOptionOrder) (*entgen.CarOptionConnection, error)
	Companies(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.CompanyOrder) (*entgen.CompanyConnection, error)
	Individuals(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.IndividualOrder) (*entgen.IndividualConnection, error)
	Outboxes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.OutboxOrder) (*entgen.OutboxConnection, error)
	Rentals(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RentalOrder) (*entgen.RentalConnection, error)
	RentalOptions(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RentalOptionOrder) (*entgen.RentalOptionConnection, error)
	Renters(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.RenterOrder) (*entgen.RenterConnection, error)
	Tenants(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*entgen.TenantOrder) (*entgen.TenantConnection, error)
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Car.createdAt":
		if e.complexity.Car.CreatedAt == nil {
			break
		}

		return e.complexity.Car.CreatedAt(childComplexity), true
	case "Car.id":
		if e.complexity.Car.ID == nil {
			break
		}

		return e.complexity.Car.ID(childComplexity), true
	case "Car.model":
		if e.complexity.Car.Model == nil {
			break
		}

		return e.complexity.Car.Model(childComplexity), true
	case "Car.rentals":
		if e.complexity.Car.Rentals == nil {
			break
		}

		return e.complexity.Car.Rentals(childComplexity), true
	case "Car.tenant":
		if e.complexity.Car.Tenant == nil {
			break
		}

		return e.complexity.Car.Tenant(childComplexity), true
	case "Car.tenantID":
		if e.complexity.Car.TenantID == nil {
			break
		}

		return e.complexity.Car.TenantID(childComplexity), true
	case "Car.updatedAt":
		if e.complexity.Car.UpdatedAt == nil {
			break
		}

		return e.complexity.Car.UpdatedAt(childComplexity), true

	case "CarConnection.edges":
		if e.complexity.CarConnection.Edges == nil {
			break
		}

		return e.complexity.CarConnection.Edges(childComplexity), true
	case "CarConnection.pageInfo":
		if e.complexity.CarConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarConnection.PageInfo(childComplexity), true
	case "CarConnection.totalCount":
		if e.complexity.CarConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarConnection.TotalCount(childComplexity), true

	case "CarEdge.cursor":
		if e.complexity.CarEdge.Cursor == nil {
			break
		}

		return e.complexity.CarEdge.Cursor(childComplexity), true
	case "CarEdge.node":
		if e.complexity.CarEdge.Node == nil {
			break
		}

		return e.complexity.CarEdge.Node(childComplexity), true

	case "CarOption.createdAt":
		if e.complexity.CarOption.CreatedAt == nil {
			break
		}

		return e.complexity.CarOption.CreatedAt(childComplexity), true
	case "CarOption.id":
		if e.complexity.CarOption.ID == nil {
			break
		}

		return e.complexity.CarOption.ID(childComplexity), true
	case "CarOption.name":
		if e.complexity.CarOption.Name == nil {
			break
		}

		return e.complexity.CarOption.Name(childComplexity), true
	case "CarOption.rentalOptions":
		if e.complexity.CarOption.RentalOptions == nil {
			break
		}

		return e.complexity.CarOption.RentalOptions(childComplexity), true
	case "CarOption.tenant":
		if e.complexity.CarOption.Tenant == nil {
			break
		}

		return e.complexity.CarOption.Tenant(childComplexity), true
	case "CarOption.tenantID":
		if e.complexity.CarOption.TenantID == nil {
			break
		}

		return e.complexity.CarOption.TenantID(childComplexity), true
	case "CarOption.updatedAt":
		if e.complexity.CarOption.UpdatedAt == nil {
			break
		}

		return e.complexity.CarOption.UpdatedAt(childComplexity), true

	case "CarOptionConnection.edges":
		if e.complexity.CarOptionConnection.Edges == nil {
			break
		}

		return e.complexity.CarOptionConnection.Edges(childComplexity), true
	case "CarOptionConnection.pageInfo":
		if e.complexity.CarOptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.CarOptionConnection.PageInfo(childComplexity), true
	case "CarOptionConnection.totalCount":
		if e.complexity.CarOptionConnection.TotalCount == nil {
			break
		}

		return e.complexity.CarOptionConnection.TotalCount(childComplexity), true

	case "CarOptionEdge.cursor":
		if e.complexity.CarOptionEdge.Cursor == nil {
			break
		}

		return e.complexity.CarOptionEdge.Cursor(childComplexity), true
	case "CarOptionEdge.node":
		if e.complexity.CarOptionEdge.Node == nil {
			break
		}

		return e.complexity.CarOptionEdge.Node(childComplexity), true

	case "Company.companySize":
		if e.complexity.Company.CompanySize == nil {
			break
		}

		return e.complexity.Company.CompanySize(childComplexity), true
	case "Company.createdAt":
		if e.complexity.Company.CreatedAt == nil {
			break
		}

		return e.complexity.Company.CreatedAt(childComplexity), true
	case "Company.id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true
	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true
	case "Company.renter":
		if e.complexity.Company.Renter == nil {
			break
		}

		return e.complexity.Company.Renter(childComplexity), true
	case "Company.renterID":
		if e.complexity.Company.RenterID == nil {
			break
		}

		return e.complexity.Company.RenterID(childComplexity), true
	case "Company.tenant":
		if e.complexity.Company.Tenant == nil {
			break
		}

		return e.complexity.Company.Tenant(childComplexity), true
	case "Company.tenantID":
		if e.complexity.Company.TenantID == nil {
			break
		}

		return e.complexity.Company.TenantID(childComplexity), true
	case "Company.updatedAt":
		if e.complexity.Company.UpdatedAt == nil {
			break
		}

		return e.complexity.Company.UpdatedAt(childComplexity), true

	case "CompanyConnection.edges":
		if e.complexity.CompanyConnection.Edges == nil {
			break
		}

		return e.complexity.CompanyConnection.Edges(childComplexity), true
	case "CompanyConnection.pageInfo":
		if e.complexity.CompanyConnection.PageInfo == nil {
			break
		}

		return e.complexity.CompanyConnection.PageInfo(childComplexity), true
	case "CompanyConnection.totalCount":
		if e.complexity.CompanyConnection.TotalCount == nil {
			break
		}

		return e.complexity.CompanyConnection.TotalCount(childComplexity), true

	case "CompanyEdge.cursor":
		if e.complexity.CompanyEdge.Cursor == nil {
			break
		}

		return e.complexity.CompanyEdge.Cursor(childComplexity), true
	case "CompanyEdge.node":
		if e.complexity.CompanyEdge.Node == nil {
			break
		}

		return e.complexity.CompanyEdge.Node(childComplexity), true

	case "Individual.createdAt":
		if e.complexity.Individual.CreatedAt == nil {
			break
		}

		return e.complexity.Individual.CreatedAt(childComplexity), true
	case "Individual.email":
		if e.complexity.Individual.Email == nil {
			break
		}

		return e.complexity.Individual.Email(childComplexity), true
	case "Individual.firstName":
		if e.complexity.Individual.FirstName == nil {
			break
		}

		return e.complexity.Individual.FirstName(childComplexity), true
	case "Individual.id":
		if e.complexity.Individual.ID == nil {
			break
		}

		return e.complexity.Individual.ID(childComplexity), true
	case "Individual.lastName":
		if e.complexity.Individual.LastName == nil {
			break
		}

		return e.complexity.Individual.LastName(childComplexity), true
	case "Individual.renter":
		if e.complexity.Individual.Renter == nil {
			break
		}

		return e.complexity.Individual.Renter(childComplexity), true
	case "Individual.renterID":
		if e.complexity.Individual.RenterID == nil {
			break
		}

		return e.complexity.Individual.RenterID(childComplexity), true
	case "Individual.tenant":
		if e.complexity.Individual.Tenant == nil {
			break
		}

		return e.complexity.Individual.Tenant(childComplexity), true
	case "Individual.tenantID":
		if e.complexity.Individual.TenantID == nil {
			break
		}

		return e.complexity.Individual.TenantID(childComplexity), true
	case "Individual.updatedAt":
		if e.complexity.Individual.UpdatedAt == nil {
			break
		}

		return e.complexity.Individual.UpdatedAt(childComplexity), true

	case "IndividualConnection.edges":
		if e.complexity.IndividualConnection.Edges == nil {
			break
		}

		return e.complexity.IndividualConnection.Edges(childComplexity), true
	case "IndividualConnection.pageInfo":
		if e.complexity.IndividualConnection.PageInfo == nil {
			break
		}

		return e.complexity.IndividualConnection.PageInfo(childComplexity), true
	case "IndividualConnection.totalCount":
		if e.complexity.IndividualConnection.TotalCount == nil {
			break
		}

		return e.complexity.IndividualConnection.TotalCount(childComplexity), true

	case "IndividualEdge.cursor":
		if e.complexity.IndividualEdge.Cursor == nil {
			break
		}

		return e.complexity.IndividualEdge.Cursor(childComplexity), true
	case "IndividualEdge.node":
		if e.complexity.IndividualEdge.Node == nil {
			break
		}

		return e.complexity.IndividualEdge.Node(childComplexity), true

	case "Outbox.aggregateID":
		if e.complexity.Outbox.AggregateID == nil {
			break
		}

		return e.complexity.Outbox.AggregateID(childComplexity), true
	case "Outbox.aggregateType":
		if e.complexity.Outbox.AggregateType == nil {
			break
		}

		return e.complexity.Outbox.AggregateType(childComplexity), true
	case "Outbox.createdAt":
		if e.complexity.Outbox.CreatedAt == nil {
			break
		}

		return e.complexity.Outbox.CreatedAt(childComplexity), true
	case "Outbox.errorMessage":
		if e.complexity.Outbox.ErrorMessage == nil {
			break
		}

		return e.complexity.Outbox.ErrorMessage(childComplexity), true
	case "Outbox.eventType":
		if e.complexity.Outbox.EventType == nil {
			break
		}

		return e.complexity.Outbox.EventType(childComplexity), true
	case "Outbox.id":
		if e.complexity.Outbox.ID == nil {
			break
		}

		return e.complexity.Outbox.ID(childComplexity), true
	case "Outbox.lockedAt":
		if e.complexity.Outbox.LockedAt == nil {
			break
		}

		return e.complexity.Outbox.LockedAt(childComplexity), true
	case "Outbox.lockedBy":
		if e.complexity.Outbox.LockedBy == nil {
			break
		}

		return e.complexity.Outbox.LockedBy(childComplexity), true
	case "Outbox.payload":
		if e.complexity.Outbox.Payload == nil {
			break
		}

		return e.complexity.Outbox.Payload(childComplexity), true
	case "Outbox.processedAt":
		if e.complexity.Outbox.ProcessedAt == nil {
			break
		}

		return e.complexity.Outbox.ProcessedAt(childComplexity), true
	case "Outbox.status":
		if e.complexity.Outbox.Status == nil {
			break
		}

		return e.complexity.Outbox.Status(childComplexity), true
	case "Outbox.version":
		if e.complexity.Outbox.Version == nil {
			break
		}

		return e.complexity.Outbox.Version(childComplexity), true

	case "OutboxConnection.edges":
		if e.complexity.OutboxConnection.Edges == nil {
			break
		}

		return e.complexity.OutboxConnection.Edges(childComplexity), true
	case "OutboxConnection.pageInfo":
		if e.complexity.OutboxConnection.PageInfo == nil {
			break
		}

		return e.complexity.OutboxConnection.PageInfo(childComplexity), true
	case "OutboxConnection.totalCount":
		if e.complexity.OutboxConnection.TotalCount == nil {
			break
		}

		return e.complexity.OutboxConnection.TotalCount(childComplexity), true

	case "OutboxEdge.cursor":
		if e.complexity.OutboxEdge.Cursor == nil {
			break
		}

		return e.complexity.OutboxEdge.Cursor(childComplexity), true
	case "OutboxEdge.node":
		if e.complexity.OutboxEdge.Node == nil {
			break
		}

		return e.complexity.OutboxEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true
	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true
	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true
	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Query.carOptions":
		if e.complexity.Query.CarOptions == nil {
			break
		}

		args, err := ec.field_Query_carOptions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CarOptions(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.CarOptionOrder)), true
	case "Query.cars":
		if e.complexity.Query.Cars == nil {
			break
		}

		args, err := ec.field_Query_cars_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Cars(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.CarOrder)), true
	case "Query.companies":
		if e.complexity.Query.Companies == nil {
			break
		}

		args, err := ec.field_Query_companies_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Companies(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.CompanyOrder)), true
	case "Query.individuals":
		if e.complexity.Query.Individuals == nil {
			break
		}

		args, err := ec.field_Query_individuals_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Individuals(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.IndividualOrder)), true
	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true
	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true
	case "Query.outboxes":
		if e.complexity.Query.Outboxes == nil {
			break
		}

		args, err := ec.field_Query_outboxes_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Outboxes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.OutboxOrder)), true
	case "Query.rentalOptions":
		if e.complexity.Query.RentalOptions == nil {
			break
		}

		args, err := ec.field_Query_rentalOptions_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RentalOptions(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.RentalOptionOrder)), true
	case "Query.rentals":
		if e.complexity.Query.Rentals == nil {
			break
		}

		args, err := ec.field_Query_rentals_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Rentals(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.RentalOrder)), true
	case "Query.renters":
		if e.complexity.Query.Renters == nil {
			break
		}

		args, err := ec.field_Query_renters_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Renters(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.RenterOrder)), true
	case "Query.tenants":
		if e.complexity.Query.Tenants == nil {
			break
		}

		args, err := ec.field_Query_tenants_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Tenants(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*entgen.TenantOrder)), true

	case "Rental.car":
		if e.complexity.Rental.Car == nil {
			break
		}

		return e.complexity.Rental.Car(childComplexity), true
	case "Rental.carID":
		if e.complexity.Rental.CarID == nil {
			break
		}

		return e.complexity.Rental.CarID(childComplexity), true
	case "Rental.createdAt":
		if e.complexity.Rental.CreatedAt == nil {
			break
		}

		return e.complexity.Rental.CreatedAt(childComplexity), true
	case "Rental.endsAt":
		if e.complexity.Rental.EndsAt == nil {
			break
		}

		return e.complexity.Rental.EndsAt(childComplexity), true
	case "Rental.id":
		if e.complexity.Rental.ID == nil {
			break
		}

		return e.complexity.Rental.ID(childComplexity), true
	case "Rental.rentalOptions":
		if e.complexity.Rental.RentalOptions == nil {
			break
		}

		return e.complexity.Rental.RentalOptions(childComplexity), true
	case "Rental.renter":
		if e.complexity.Rental.Renter == nil {
			break
		}

		return e.complexity.Rental.Renter(childComplexity), true
	case "Rental.renterID":
		if e.complexity.Rental.RenterID == nil {
			break
		}

		return e.complexity.Rental.RenterID(childComplexity), true
	case "Rental.startsAt":
		if e.complexity.Rental.StartsAt == nil {
			break
		}

		return e.complexity.Rental.StartsAt(childComplexity), true
	case "Rental.tenant":
		if e.complexity.Rental.Tenant == nil {
			break
		}

		return e.complexity.Rental.Tenant(childComplexity), true
	case "Rental.tenantID":
		if e.complexity.Rental.TenantID == nil {
			break
		}

		return e.complexity.Rental.TenantID(childComplexity), true
	case "Rental.updatedAt":
		if e.complexity.Rental.UpdatedAt == nil {
			break
		}

		return e.complexity.Rental.UpdatedAt(childComplexity), true

	case "RentalConnection.edges":
		if e.complexity.RentalConnection.Edges == nil {
			break
		}

		return e.complexity.RentalConnection.Edges(childComplexity), true
	case "RentalConnection.pageInfo":
		if e.complexity.RentalConnection.PageInfo == nil {
			break
		}

		return e.complexity.RentalConnection.PageInfo(childComplexity), true
	case "RentalConnection.totalCount":
		if e.complexity.RentalConnection.TotalCount == nil {
			break
		}

		return e.complexity.RentalConnection.TotalCount(childComplexity), true

	case "RentalEdge.cursor":
		if e.complexity.RentalEdge.Cursor == nil {
			break
		}

		return e.complexity.RentalEdge.Cursor(childComplexity), true
	case "RentalEdge.node":
		if e.complexity.RentalEdge.Node == nil {
			break
		}

		return e.complexity.RentalEdge.Node(childComplexity), true

	case "RentalOption.count":
		if e.complexity.RentalOption.Count == nil {
			break
		}

		return e.complexity.RentalOption.Count(childComplexity), true
	case "RentalOption.createdAt":
		if e.complexity.RentalOption.CreatedAt == nil {
			break
		}

		return e.complexity.RentalOption.CreatedAt(childComplexity), true
	case "RentalOption.id":
		if e.complexity.RentalOption.ID == nil {
			break
		}

		return e.complexity.RentalOption.ID(childComplexity), true
	case "RentalOption.option":
		if e.complexity.RentalOption.Option == nil {
			break
		}

		return e.complexity.RentalOption.Option(childComplexity), true
	case "RentalOption.optionID":
		if e.complexity.RentalOption.OptionID == nil {
			break
		}

		return e.complexity.RentalOption.OptionID(childComplexity), true
	case "RentalOption.rental":
		if e.complexity.RentalOption.Rental == nil {
			break
		}

		return e.complexity.RentalOption.Rental(childComplexity), true
	case "RentalOption.rentalID":
		if e.complexity.RentalOption.RentalID == nil {
			break
		}

		return e.complexity.RentalOption.RentalID(childComplexity), true
	case "RentalOption.tenant":
		if e.complexity.RentalOption.Tenant == nil {
			break
		}

		return e.complexity.RentalOption.Tenant(childComplexity), true
	case "RentalOption.tenantID":
		if e.complexity.RentalOption.TenantID == nil {
			break
		}

		return e.complexity.RentalOption.TenantID(childComplexity), true
	case "RentalOption.updatedAt":
		if e.complexity.RentalOption.UpdatedAt == nil {
			break
		}

		return e.complexity.RentalOption.UpdatedAt(childComplexity), true

	case "RentalOptionConnection.edges":
		if e.complexity.RentalOptionConnection.Edges == nil {
			break
		}

		return e.complexity.RentalOptionConnection.Edges(childComplexity), true
	case "RentalOptionConnection.pageInfo":
		if e.complexity.RentalOptionConnection.PageInfo == nil {
			break
		}

		return e.complexity.RentalOptionConnection.PageInfo(childComplexity), true
	case "RentalOptionConnection.totalCount":
		if e.complexity.RentalOptionConnection.TotalCount == nil {
			break
		}

		return e.complexity.RentalOptionConnection.TotalCount(childComplexity), true

	case "RentalOptionEdge.cursor":
		if e.complexity.RentalOptionEdge.Cursor == nil {
			break
		}

		return e.complexity.RentalOptionEdge.Cursor(childComplexity), true
	case "RentalOptionEdge.node":
		if e.complexity.RentalOptionEdge.Node == nil {
			break
		}

		return e.complexity.RentalOptionEdge.Node(childComplexity), true

	case "Renter.company":
		if e.complexity.Renter.Company == nil {
			break
		}

		return e.complexity.Renter.Company(childComplexity), true
	case "Renter.createdAt":
		if e.complexity.Renter.CreatedAt == nil {
			break
		}

		return e.complexity.Renter.CreatedAt(childComplexity), true
	case "Renter.id":
		if e.complexity.Renter.ID == nil {
			break
		}

		return e.complexity.Renter.ID(childComplexity), true
	case "Renter.individual":
		if e.complexity.Renter.Individual == nil {
			break
		}

		return e.complexity.Renter.Individual(childComplexity), true
	case "Renter.rentals":
		if e.complexity.Renter.Rentals == nil {
			break
		}

		return e.complexity.Renter.Rentals(childComplexity), true
	case "Renter.tenant":
		if e.complexity.Renter.Tenant == nil {
			break
		}

		return e.complexity.Renter.Tenant(childComplexity), true
	case "Renter.tenantID":
		if e.complexity.Renter.TenantID == nil {
			break
		}

		return e.complexity.Renter.TenantID(childComplexity), true
	case "Renter.type":
		if e.complexity.Renter.Type == nil {
			break
		}

		return e.complexity.Renter.Type(childComplexity), true
	case "Renter.updatedAt":
		if e.complexity.Renter.UpdatedAt == nil {
			break
		}

		return e.complexity.Renter.UpdatedAt(childComplexity), true

	case "RenterConnection.edges":
		if e.complexity.RenterConnection.Edges == nil {
			break
		}

		return e.complexity.RenterConnection.Edges(childComplexity), true
	case "RenterConnection.pageInfo":
		if e.complexity.RenterConnection.PageInfo == nil {
			break
		}

		return e.complexity.RenterConnection.PageInfo(childComplexity), true
	case "RenterConnection.totalCount":
		if e.complexity.RenterConnection.TotalCount == nil {
			break
		}

		return e.complexity.RenterConnection.TotalCount(childComplexity), true

	case "RenterEdge.cursor":
		if e.complexity.RenterEdge.Cursor == nil {
			break
		}

		return e.complexity.RenterEdge.Cursor(childComplexity), true
	case "RenterEdge.node":
		if e.complexity.RenterEdge.Node == nil {
			break
		}

		return e.complexity.RenterEdge.Node(childComplexity), true

	case "Tenant.cars":
		if e.complexity.Tenant.Cars == nil {
			break
		}

		return e.complexity.Tenant.Cars(childComplexity), true
	case "Tenant.code":
		if e.complexity.Tenant.Code == nil {
			break
		}

		return e.complexity.Tenant.Code(childComplexity), true
	case "Tenant.companies":
		if e.complexity.Tenant.Companies == nil {
			break
		}

		return e.complexity.Tenant.Companies(childComplexity), true
	case "Tenant.createdAt":
		if e.complexity.Tenant.CreatedAt == nil {
			break
		}

		return e.complexity.Tenant.CreatedAt(childComplexity), true
	case "Tenant.id":
		if e.complexity.Tenant.ID == nil {
			break
		}

		return e.complexity.Tenant.ID(childComplexity), true
	case "Tenant.individuals":
		if e.complexity.Tenant.Individuals == nil {
			break
		}

		return e.complexity.Tenant.Individuals(childComplexity), true
	case "Tenant.options":
		if e.complexity.Tenant.Options == nil {
			break
		}

		return e.complexity.Tenant.Options(childComplexity), true
	case "Tenant.rentalOptions":
		if e.complexity.Tenant.RentalOptions == nil {
			break
		}

		return e.complexity.Tenant.RentalOptions(childComplexity), true
	case "Tenant.rentals":
		if e.complexity.Tenant.Rentals == nil {
			break
		}

		return e.complexity.Tenant.Rentals(childComplexity), true
	case "Tenant.renters":
		if e.complexity.Tenant.Renters == nil {
			break
		}

		return e.complexity.Tenant.Renters(childComplexity), true
	case "Tenant.updatedAt":
		if e.complexity.Tenant.UpdatedAt == nil {
			break
		}

		return e.complexity.Tenant.UpdatedAt(childComplexity), true

	case "TenantConnection.edges":
		if e.complexity.TenantConnection.Edges == nil {
			break
		}

		return e.complexity.TenantConnection.Edges(childComplexity), true
	case "TenantConnection.pageInfo":
		if e.complexity.TenantConnection.PageInfo == nil {
			break
		}

		return e.complexity.TenantConnection.PageInfo(childComplexity), true
	case "TenantConnection.totalCount":
		if e.complexity.TenantConnection.TotalCount == nil {
			break
		}

		return e.complexity.TenantConnection.TotalCount(childComplexity), true

	case "TenantEdge.cursor":
		if e.complexity.TenantEdge.Cursor == nil {
			break
		}

		return e.complexity.TenantEdge.Cursor(childComplexity), true
	case "TenantEdge.node":
		if e.complexity.TenantEdge.Node == nil {
			break
		}

		return e.complexity.TenantEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCarOptionOrder,
		ec.unmarshalInputCarOrder,
		ec.unmarshalInputCompanyOrder,
		ec.unmarshalInputCreateCarInput,
		ec.unmarshalInputCreateCarOptionInput,
		ec.unmarshalInputCreateCompanyInput,
		ec.unmarshalInputCreateIndividualInput,
		ec.unmarshalInputCreateOutboxInput,
		ec.unmarshalInputCreateRentalInput,
		ec.unmarshalInputCreateRentalOptionInput,
		ec.unmarshalInputCreateRenterInput,
		ec.unmarshalInputCreateTenantInput,
		ec.unmarshalInputIndividualOrder,
		ec.unmarshalInputOutboxOrder,
		ec.unmarshalInputRentalOptionOrder,
		ec.unmarshalInputRentalOrder,
		ec.unmarshalInputRenterOrder,
		ec.unmarshalInputTenantOrder,
		ec.unmarshalInputUpdateCarInput,
		ec.unmarshalInputUpdateCarOptionInput,
		ec.unmarshalInputUpdateCompanyInput,
		ec.unmarshalInputUpdateIndividualInput,
		ec.unmarshalInputUpdateOutboxInput,
		ec.unmarshalInputUpdateRentalInput,
		ec.unmarshalInputUpdateRentalOptionInput,
		ec.unmarshalInputUpdateRenterInput,
		ec.unmarshalInputUpdateTenantInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/ent.graphqls", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Car implements Node {
  id: ID!
  tenantID: ID!
  model: String!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  rentals: [Rental!]
}
"""
A connection to a list of items.
"""
type CarConnection {
  """
  A list of edges.
  """
  edges: [CarEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarEdge {
  """
  The item at the end of the edge.
  """
  node: Car
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type CarOption implements Node {
  id: ID!
  tenantID: ID!
  name: String!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  rentalOptions: [RentalOption!]
}
"""
A connection to a list of items.
"""
type CarOptionConnection {
  """
  A list of edges.
  """
  edges: [CarOptionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CarOptionEdge {
  """
  The item at the end of the edge.
  """
  node: CarOption
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for CarOption connections
"""
input CarOptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order CarOptions.
  """
  field: CarOptionOrderField!
}
"""
Properties by which CarOption connections can be ordered.
"""
enum CarOptionOrderField {
  ID
  TENANT_ID
  NAME
  CREATED_AT
  UPDATED_AT
}
"""
Ordering options for Car connections
"""
input CarOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Cars.
  """
  field: CarOrderField!
}
"""
Properties by which Car connections can be ordered.
"""
enum CarOrderField {
  ID
  TENANT_ID
  MODEL
  CREATED_AT
  UPDATED_AT
}
type Company implements Node {
  id: ID!
  renterID: ID!
  tenantID: ID!
  name: String!
  companySize: String!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  renter: Renter!
}
"""
A connection to a list of items.
"""
type CompanyConnection {
  """
  A list of edges.
  """
  edges: [CompanyEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type CompanyEdge {
  """
  The item at the end of the edge.
  """
  node: Company
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Company connections
"""
input CompanyOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Companies.
  """
  field: CompanyOrderField!
}
"""
Properties by which Company connections can be ordered.
"""
enum CompanyOrderField {
  ID
  RENTER_ID
  TENANT_ID
  NAME
  COMPANY_SIZE
  CREATED_AT
  UPDATED_AT
}
"""
CreateCarInput is used for create Car object.
Input was generated by ent.
"""
input CreateCarInput {
  model: String!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  rentalIDs: [ID!]
}
"""
CreateCarOptionInput is used for create CarOption object.
Input was generated by ent.
"""
input CreateCarOptionInput {
  name: String!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  rentalOptionIDs: [ID!]
}
"""
CreateCompanyInput is used for create Company object.
Input was generated by ent.
"""
input CreateCompanyInput {
  name: String!
  companySize: String!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  renterID: ID!
}
"""
CreateIndividualInput is used for create Individual object.
Input was generated by ent.
"""
input CreateIndividualInput {
  email: String!
  firstName: String
  lastName: String
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  renterID: ID!
}
"""
CreateOutboxInput is used for create Outbox object.
Input was generated by ent.
"""
input CreateOutboxInput {
  aggregateType: String!
  aggregateID: String!
  eventType: String!
  payload: Map
  createdAt: Time
  processedAt: Time
  status: String
  errorMessage: String
  version: Int
  lockedAt: Time
  lockedBy: String
}
"""
CreateRentalInput is used for create Rental object.
Input was generated by ent.
"""
input CreateRentalInput {
  startsAt: Time
  endsAt: Time
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  carID: ID!
  renterID: ID!
  rentalOptionIDs: [ID!]
}
"""
CreateRentalOptionInput is used for create RentalOption object.
Input was generated by ent.
"""
input CreateRentalOptionInput {
  count: Int!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  rentalID: ID!
  optionID: ID!
}
"""
CreateRenterInput is used for create Renter object.
Input was generated by ent.
"""
input CreateRenterInput {
  type: String!
  createdAt: Time
  updatedAt: Time
  tenantID: ID!
  rentalIDs: [ID!]
  companyID: ID
  individualID: ID
}
"""
CreateTenantInput is used for create Tenant object.
Input was generated by ent.
"""
input CreateTenantInput {
  code: String!
  createdAt: Time
  updatedAt: Time
  carIDs: [ID!]
  companyIDs: [ID!]
  individualIDs: [ID!]
  optionIDs: [ID!]
  rentalOptionIDs: [ID!]
  rentalIDs: [ID!]
  renterIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Individual implements Node {
  id: ID!
  renterID: ID!
  tenantID: ID!
  email: String!
  firstName: String
  lastName: String
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  renter: Renter!
}
"""
A connection to a list of items.
"""
type IndividualConnection {
  """
  A list of edges.
  """
  edges: [IndividualEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type IndividualEdge {
  """
  The item at the end of the edge.
  """
  node: Individual
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Individual connections
"""
input IndividualOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Individuals.
  """
  field: IndividualOrderField!
}
"""
Properties by which Individual connections can be ordered.
"""
enum IndividualOrderField {
  ID
  RENTER_ID
  TENANT_ID
  EMAIL
  FIRST_NAME
  LAST_NAME
  CREATED_AT
  UPDATED_AT
}
"""
The builtin Map type
"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/jp-ryuji/go-arch-patterns/internal/infrastructure/postgres/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
type Outbox implements Node {
  id: ID!
  aggregateType: String!
  aggregateID: String!
  eventType: String!
  payload: Map
  createdAt: Time
  processedAt: Time
  status: String!
  errorMessage: String
  version: Int!
  lockedAt: Time
  lockedBy: String
}
"""
A connection to a list of items.
"""
type OutboxConnection {
  """
  A list of edges.
  """
  edges: [OutboxEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OutboxEdge {
  """
  The item at the end of the edge.
  """
  node: Outbox
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Outbox connections
"""
input OutboxOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Outboxes.
  """
  field: OutboxOrderField!
}
"""
Properties by which Outbox connections can be ordered.
"""
enum OutboxOrderField {
  ID
  AGGREGATE_TYPE
  AGGREGATE_ID
  EVENT_TYPE
  CREATED_AT
  PROCESSED_AT
  STATUS
  ERROR_MESSAGE
  VERSION
  LOCKED_AT
  LOCKED_BY
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  cars(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Cars returned from the connection.
    """
    orderBy: [CarOrder!]
  ): CarConnection!
  carOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for CarOptions returned from the connection.
    """
    orderBy: [CarOptionOrder!]
  ): CarOptionConnection!
  companies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Companies returned from the connection.
    """
    orderBy: [CompanyOrder!]
  ): CompanyConnection!
  individuals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Individuals returned from the connection.
    """
    orderBy: [IndividualOrder!]
  ): IndividualConnection!
  outboxes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Outboxes returned from the connection.
    """
    orderBy: [OutboxOrder!]
  ): OutboxConnection!
  rentals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Rentals returned from the connection.
    """
    orderBy: [RentalOrder!]
  ): RentalConnection!
  rentalOptions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for RentalOptions returned from the connection.
    """
    orderBy: [RentalOptionOrder!]
  ): RentalOptionConnection!
  renters(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Renters returned from the connection.
    """
    orderBy: [RenterOrder!]
  ): RenterConnection!
  tenants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Tenants returned from the connection.
    """
    orderBy: [TenantOrder!]
  ): TenantConnection!
}
type Rental implements Node {
  id: ID!
  tenantID: ID!
  carID: ID!
  renterID: ID!
  startsAt: Time
  endsAt: Time
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  car: Car!
  renter: Renter!
  rentalOptions: [RentalOption!]
}
"""
A connection to a list of items.
"""
type RentalConnection {
  """
  A list of edges.
  """
  edges: [RentalEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RentalEdge {
  """
  The item at the end of the edge.
  """
  node: Rental
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type RentalOption implements Node {
  id: ID!
  tenantID: ID!
  rentalID: ID!
  optionID: ID!
  count: Int!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  rental: Rental!
  option: CarOption!
}
"""
A connection to a list of items.
"""
type RentalOptionConnection {
  """
  A list of edges.
  """
  edges: [RentalOptionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RentalOptionEdge {
  """
  The item at the end of the edge.
  """
  node: RentalOption
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for RentalOption connections
"""
input RentalOptionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order RentalOptions.
  """
  field: RentalOptionOrderField!
}
"""
Properties by which RentalOption connections can be ordered.
"""
enum RentalOptionOrderField {
  ID
  TENANT_ID
  RENTAL_ID
  OPTION_ID
  COUNT
  CREATED_AT
  UPDATED_AT
}
"""
Ordering options for Rental connections
"""
input RentalOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Rentals.
  """
  field: RentalOrderField!
}
"""
Properties by which Rental connections can be ordered.
"""
enum RentalOrderField {
  ID
  TENANT_ID
  CAR_ID
  RENTER_ID
  STARTS_AT
  ENDS_AT
  CREATED_AT
  UPDATED_AT
}
type Renter implements Node {
  id: ID!
  tenantID: ID!
  type: String!
  createdAt: Time
  updatedAt: Time
  tenant: Tenant!
  rentals: [Rental!]
  company: Company
  individual: Individual
}
"""
A connection to a list of items.
"""
type RenterConnection {
  """
  A list of edges.
  """
  edges: [RenterEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RenterEdge {
  """
  The item at the end of the edge.
  """
  node: Renter
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Renter connections
"""
input RenterOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Renters.
  """
  field: RenterOrderField!
}
"""
Properties by which Renter connections can be ordered.
"""
enum RenterOrderField {
  ID
  TENANT_ID
  TYPE
  CREATED_AT
  UPDATED_AT
}
type Tenant implements Node {
  id: ID!
  code: String!
  createdAt: Time
  updatedAt: Time
  cars: [Car!]
  companies: [Company!]
  individuals: [Individual!]
  options: [CarOption!]
  rentalOptions: [RentalOption!]
  rentals: [Rental!]
  renters: [Renter!]
}
"""
A connection to a list of items.
"""
type TenantConnection {
  """
  A list of edges.
  """
  edges: [TenantEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TenantEdge {
  """
  The item at the end of the edge.
  """
  node: Tenant
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Tenant connections
"""
input TenantOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Tenants.
  """
  field: TenantOrderField!
}
"""
Properties by which Tenant connections can be ordered.
"""
enum TenantOrderField {
  ID
  CODE
  CREATED_AT
  UPDATED_AT
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateCarInput is used for update Car object.
Input was generated by ent.
"""
input UpdateCarInput {
  model: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  addRentalIDs: [ID!]
  removeRentalIDs: [ID!]
  clearRentals: Boolean
}
"""
UpdateCarOptionInput is used for update CarOption object.
Input was generated by ent.
"""
input UpdateCarOptionInput {
  name: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  addRentalOptionIDs: [ID!]
  removeRentalOptionIDs: [ID!]
  clearRentalOptions: Boolean
}
"""
UpdateCompanyInput is used for update Company object.
Input was generated by ent.
"""
input UpdateCompanyInput {
  name: String
  companySize: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  renterID: ID
}
"""
UpdateIndividualInput is used for update Individual object.
Input was generated by ent.
"""
input UpdateIndividualInput {
  email: String
  firstName: String
  clearFirstName: Boolean
  lastName: String
  clearLastName: Boolean
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  renterID: ID
}
"""
UpdateOutboxInput is used for update Outbox object.
Input was generated by ent.
"""
input UpdateOutboxInput {
  aggregateType: String
  aggregateID: String
  eventType: String
  payload: Map
  clearPayload: Boolean
  createdAt: Time
  clearCreatedAt: Boolean
  processedAt: Time
  clearProcessedAt: Boolean
  status: String
  errorMessage: String
  clearErrorMessage: Boolean
  version: Int
  lockedAt: Time
  clearLockedAt: Boolean
  lockedBy: String
  clearLockedBy: Boolean
}
"""
UpdateRentalInput is used for update Rental object.
Input was generated by ent.
"""
input UpdateRentalInput {
  startsAt: Time
  clearStartsAt: Boolean
  endsAt: Time
  clearEndsAt: Boolean
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  carID: ID
  renterID: ID
  addRentalOptionIDs: [ID!]
  removeRentalOptionIDs: [ID!]
  clearRentalOptions: Boolean
}
"""
UpdateRentalOptionInput is used for update RentalOption object.
Input was generated by ent.
"""
input UpdateRentalOptionInput {
  count: Int
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  rentalID: ID
  optionID: ID
}
"""
UpdateRenterInput is used for update Renter object.
Input was generated by ent.
"""
input UpdateRenterInput {
  type: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  tenantID: ID
  addRentalIDs: [ID!]
  removeRentalIDs: [ID!]
  clearRentals: Boolean
  companyID: ID
  clearCompany: Boolean
  individualID: ID
  clearIndividual: Boolean
}
"""
UpdateTenantInput is used for update Tenant object.
Input was generated by ent.
"""
input UpdateTenantInput {
  code: String
  createdAt: Time
  clearCreatedAt: Boolean
  updatedAt: Time
  clearUpdatedAt: Boolean
  addCarIDs: [ID!]
  removeCarIDs: [ID!]
  clearCars: Boolean
  addCompanyIDs: [ID!]
  removeCompanyIDs: [ID!]
  clearCompanies: Boolean
  addIndividualIDs: [ID!]
  removeIndividualIDs: [ID!]
  clearIndividuals: Boolean
  addOptionIDs: [ID!]
  removeOptionIDs: [ID!]
  clearOptions: Boolean
  addRentalOptionIDs: [ID!]
  removeRentalOptionIDs: [ID!]
  clearRentalOptions: Boolean
  addRentalIDs: [ID!]
  removeRentalIDs: [ID!]
  clearRentals: Boolean
  addRenterIDs: [ID!]
  removeRenterIDs: [ID!]
  clearRenters: Boolean
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "name", ec.unmarshalNString2string)
	if err != nil {
		return nil, err
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_carOptions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOCarOptionOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_cars_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOCarOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_companies_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOCompanyOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_individuals_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOIndividualOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_node_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "id", ec.unmarshalNID2string)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_nodes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "ids", ec.unmarshalNID2ᚕstringᚄ)
	if err != nil {
		return nil, err
	}
	args["ids"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_outboxes_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOOutboxOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_rentalOptions_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalORentalOptionOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_rentals_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalORentalOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_renters_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalORenterOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_tenants_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "after", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["after"] = arg0
	arg1, err := graphql.ProcessArgField(ctx, rawArgs, "first", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["first"] = arg1
	arg2, err := graphql.ProcessArgField(ctx, rawArgs, "before", ec.unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor)
	if err != nil {
		return nil, err
	}
	args["before"] = arg2
	arg3, err := graphql.ProcessArgField(ctx, rawArgs, "last", ec.unmarshalOInt2ᚖint)
	if err != nil {
		return nil, err
	}
	args["last"] = arg3
	arg4, err := graphql.ProcessArgField(ctx, rawArgs, "orderBy", ec.unmarshalOTenantOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantOrderᚄ)
	if err != nil {
		return nil, err
	}
	args["orderBy"] = arg4
	return args, nil
}

func (ec *executionContext) field___Directive_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Field_args_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2ᚖbool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := graphql.ProcessArgField(ctx, rawArgs, "includeDeprecated", ec.unmarshalOBoolean2bool)
	if err != nil {
		return nil, err
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Car_id(ctx context.Context, field graphql.CollectedField, obj *entgen.Car) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Car_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Car_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Car",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Car_tenantID(ctx context.Context, field graphql.CollectedField, obj *entgen.Car) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Car_tenantID,
		func(ctx context.Context) (any, error) {
			return obj.TenantID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Car_tenantID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Car",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Car_model(ctx context.Context, field graphql.CollectedField, obj *entgen.Car) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Car_model,
		func(ctx context.Context) (any, error) {
			return obj.Model, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Car_model(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Car",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Car_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Car) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Car_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Car_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Car",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Car_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Car) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Car_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Car_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Car",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Car_tenant(ctx context.Context, field graphql.CollectedField, obj *entgen.Car) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Car_tenant,
		func(ctx context.Context) (any, error) {
			return obj.Tenant(ctx)
		},
		nil,
		ec.marshalNTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Car_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Car",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "code":
				return ec.fieldContext_Tenant_code(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tenant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tenant_updatedAt(ctx, field)
			case "cars":
				return ec.fieldContext_Tenant_cars(ctx, field)
			case "companies":
				return ec.fieldContext_Tenant_companies(ctx, field)
			case "individuals":
				return ec.fieldContext_Tenant_individuals(ctx, field)
			case "options":
				return ec.fieldContext_Tenant_options(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Tenant_rentalOptions(ctx, field)
			case "rentals":
				return ec.fieldContext_Tenant_rentals(ctx, field)
			case "renters":
				return ec.fieldContext_Tenant_renters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Car_rentals(ctx context.Context, field graphql.CollectedField, obj *entgen.Car) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Car_rentals,
		func(ctx context.Context) (any, error) {
			return obj.Rentals(ctx)
		},
		nil,
		ec.marshalORental2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Car_rentals(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Car",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Rental_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Rental_tenantID(ctx, field)
			case "carID":
				return ec.fieldContext_Rental_carID(ctx, field)
			case "renterID":
				return ec.fieldContext_Rental_renterID(ctx, field)
			case "startsAt":
				return ec.fieldContext_Rental_startsAt(ctx, field)
			case "endsAt":
				return ec.fieldContext_Rental_endsAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Rental_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Rental_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Rental_tenant(ctx, field)
			case "car":
				return ec.fieldContext_Rental_car(ctx, field)
			case "renter":
				return ec.fieldContext_Rental_renter(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Rental_rentalOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Rental", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.CarConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalOCarEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CarConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CarEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CarEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.CarConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.CarConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.CarEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalOCar2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCar,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CarEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Car_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Car_tenantID(ctx, field)
			case "model":
				return ec.fieldContext_Car_model(ctx, field)
			case "createdAt":
				return ec.fieldContext_Car_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Car_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Car_tenant(ctx, field)
			case "rentals":
				return ec.fieldContext_Car_rentals(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Car", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.CarEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOption_id(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOption_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarOption_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOption_tenantID(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOption_tenantID,
		func(ctx context.Context) (any, error) {
			return obj.TenantID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarOption_tenantID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOption_name(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOption_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarOption_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOption_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOption_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CarOption_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOption_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOption_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CarOption_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOption_tenant(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOption_tenant,
		func(ctx context.Context) (any, error) {
			return obj.Tenant(ctx)
		},
		nil,
		ec.marshalNTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarOption_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOption",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "code":
				return ec.fieldContext_Tenant_code(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tenant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tenant_updatedAt(ctx, field)
			case "cars":
				return ec.fieldContext_Tenant_cars(ctx, field)
			case "companies":
				return ec.fieldContext_Tenant_companies(ctx, field)
			case "individuals":
				return ec.fieldContext_Tenant_individuals(ctx, field)
			case "options":
				return ec.fieldContext_Tenant_options(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Tenant_rentalOptions(ctx, field)
			case "rentals":
				return ec.fieldContext_Tenant_rentals(ctx, field)
			case "renters":
				return ec.fieldContext_Tenant_renters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOption_rentalOptions(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOption_rentalOptions,
		func(ctx context.Context) (any, error) {
			return obj.RentalOptions(ctx)
		},
		nil,
		ec.marshalORentalOption2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CarOption_rentalOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOption",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RentalOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_RentalOption_tenantID(ctx, field)
			case "rentalID":
				return ec.fieldContext_RentalOption_rentalID(ctx, field)
			case "optionID":
				return ec.fieldContext_RentalOption_optionID(ctx, field)
			case "count":
				return ec.fieldContext_RentalOption_count(ctx, field)
			case "createdAt":
				return ec.fieldContext_RentalOption_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RentalOption_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_RentalOption_tenant(ctx, field)
			case "rental":
				return ec.fieldContext_RentalOption_rental(ctx, field)
			case "option":
				return ec.fieldContext_RentalOption_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentalOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOptionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOptionConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOptionConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalOCarOptionEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CarOptionConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CarOptionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CarOptionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarOptionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOptionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOptionConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOptionConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarOptionConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOptionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOptionConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOptionConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarOptionConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOptionEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOptionEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOptionEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalOCarOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOption,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CarOptionEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CarOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_CarOption_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_CarOption_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_CarOption_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CarOption_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_CarOption_tenant(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_CarOption_rentalOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CarOptionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.CarOptionEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CarOptionEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CarOptionEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CarOptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_id(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Company_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_renterID(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_renterID,
		func(ctx context.Context) (any, error) {
			return obj.RenterID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Company_renterID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_tenantID(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_tenantID,
		func(ctx context.Context) (any, error) {
			return obj.TenantID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Company_tenantID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_name(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Company_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_companySize(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_companySize,
		func(ctx context.Context) (any, error) {
			return obj.CompanySize, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Company_companySize(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Company_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Company_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_tenant(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_tenant,
		func(ctx context.Context) (any, error) {
			return obj.Tenant(ctx)
		},
		nil,
		ec.marshalNTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Company_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "code":
				return ec.fieldContext_Tenant_code(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tenant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tenant_updatedAt(ctx, field)
			case "cars":
				return ec.fieldContext_Tenant_cars(ctx, field)
			case "companies":
				return ec.fieldContext_Tenant_companies(ctx, field)
			case "individuals":
				return ec.fieldContext_Tenant_individuals(ctx, field)
			case "options":
				return ec.fieldContext_Tenant_options(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Tenant_rentalOptions(ctx, field)
			case "rentals":
				return ec.fieldContext_Tenant_rentals(ctx, field)
			case "renters":
				return ec.fieldContext_Tenant_renters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Company_renter(ctx context.Context, field graphql.CollectedField, obj *entgen.Company) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Company_renter,
		func(ctx context.Context) (any, error) {
			return obj.Renter(ctx)
		},
		nil,
		ec.marshalNRenter2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenter,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Company_renter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Company",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Renter_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Renter_tenantID(ctx, field)
			case "type":
				return ec.fieldContext_Renter_type(ctx, field)
			case "createdAt":
				return ec.fieldContext_Renter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Renter_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Renter_tenant(ctx, field)
			case "rentals":
				return ec.fieldContext_Renter_rentals(ctx, field)
			case "company":
				return ec.fieldContext_Renter_company(ctx, field)
			case "individual":
				return ec.fieldContext_Renter_individual(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Renter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.CompanyConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CompanyConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalOCompanyEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CompanyConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_CompanyEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_CompanyEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.CompanyConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CompanyConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CompanyConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.CompanyConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CompanyConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CompanyConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.CompanyEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CompanyEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalOCompany2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompany,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_CompanyEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "renterID":
				return ec.fieldContext_Company_renterID(ctx, field)
			case "tenantID":
				return ec.fieldContext_Company_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "companySize":
				return ec.fieldContext_Company_companySize(ctx, field)
			case "createdAt":
				return ec.fieldContext_Company_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Company_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Company_tenant(ctx, field)
			case "renter":
				return ec.fieldContext_Company_renter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.CompanyEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_CompanyEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_CompanyEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_id(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Individual_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_renterID(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_renterID,
		func(ctx context.Context) (any, error) {
			return obj.RenterID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Individual_renterID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_tenantID(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_tenantID,
		func(ctx context.Context) (any, error) {
			return obj.TenantID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Individual_tenantID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_email(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_email,
		func(ctx context.Context) (any, error) {
			return obj.Email, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Individual_email(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_firstName(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_firstName,
		func(ctx context.Context) (any, error) {
			return obj.FirstName, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Individual_firstName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_lastName(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_lastName,
		func(ctx context.Context) (any, error) {
			return obj.LastName, nil
		},
		nil,
		ec.marshalOString2string,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Individual_lastName(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Individual_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Individual_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_tenant(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_tenant,
		func(ctx context.Context) (any, error) {
			return obj.Tenant(ctx)
		},
		nil,
		ec.marshalNTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Individual_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "code":
				return ec.fieldContext_Tenant_code(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tenant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tenant_updatedAt(ctx, field)
			case "cars":
				return ec.fieldContext_Tenant_cars(ctx, field)
			case "companies":
				return ec.fieldContext_Tenant_companies(ctx, field)
			case "individuals":
				return ec.fieldContext_Tenant_individuals(ctx, field)
			case "options":
				return ec.fieldContext_Tenant_options(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Tenant_rentalOptions(ctx, field)
			case "rentals":
				return ec.fieldContext_Tenant_rentals(ctx, field)
			case "renters":
				return ec.fieldContext_Tenant_renters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Individual_renter(ctx context.Context, field graphql.CollectedField, obj *entgen.Individual) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Individual_renter,
		func(ctx context.Context) (any, error) {
			return obj.Renter(ctx)
		},
		nil,
		ec.marshalNRenter2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenter,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Individual_renter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Individual",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Renter_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Renter_tenantID(ctx, field)
			case "type":
				return ec.fieldContext_Renter_type(ctx, field)
			case "createdAt":
				return ec.fieldContext_Renter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Renter_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Renter_tenant(ctx, field)
			case "rentals":
				return ec.fieldContext_Renter_rentals(ctx, field)
			case "company":
				return ec.fieldContext_Renter_company(ctx, field)
			case "individual":
				return ec.fieldContext_Renter_individual(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Renter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IndividualConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.IndividualConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_IndividualConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalOIndividualEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_IndividualConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IndividualConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_IndividualEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_IndividualEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IndividualEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IndividualConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.IndividualConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_IndividualConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_IndividualConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IndividualConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IndividualConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.IndividualConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_IndividualConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_IndividualConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IndividualConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _IndividualEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.IndividualEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_IndividualEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalOIndividual2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividual,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_IndividualEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IndividualEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Individual_id(ctx, field)
			case "renterID":
				return ec.fieldContext_Individual_renterID(ctx, field)
			case "tenantID":
				return ec.fieldContext_Individual_tenantID(ctx, field)
			case "email":
				return ec.fieldContext_Individual_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Individual_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Individual_lastName(ctx, field)
			case "createdAt":
				return ec.fieldContext_Individual_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Individual_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Individual_tenant(ctx, field)
			case "renter":
				return ec.fieldContext_Individual_renter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Individual", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _IndividualEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.IndividualEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_IndividualEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_IndividualEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "IndividualEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_id(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Outbox_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_aggregateType(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_aggregateType,
		func(ctx context.Context) (any, error) {
			return obj.AggregateType, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Outbox_aggregateType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_aggregateID(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_aggregateID,
		func(ctx context.Context) (any, error) {
			return obj.AggregateID, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Outbox_aggregateID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_eventType(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_eventType,
		func(ctx context.Context) (any, error) {
			return obj.EventType, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Outbox_eventType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_payload(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_payload,
		func(ctx context.Context) (any, error) {
			return obj.Payload, nil
		},
		nil,
		ec.marshalOMap2map,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Outbox_payload(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Map does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Outbox_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_processedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_processedAt,
		func(ctx context.Context) (any, error) {
			return obj.ProcessedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Outbox_processedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_status(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_status,
		func(ctx context.Context) (any, error) {
			return obj.Status, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Outbox_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_errorMessage(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_errorMessage,
		func(ctx context.Context) (any, error) {
			return obj.ErrorMessage, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Outbox_errorMessage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_version(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_version,
		func(ctx context.Context) (any, error) {
			return obj.Version, nil
		},
		nil,
		ec.marshalNInt2int64,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Outbox_version(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_lockedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_lockedAt,
		func(ctx context.Context) (any, error) {
			return obj.LockedAt, nil
		},
		nil,
		ec.marshalOTime2ᚖtimeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Outbox_lockedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Outbox_lockedBy(ctx context.Context, field graphql.CollectedField, obj *entgen.Outbox) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Outbox_lockedBy,
		func(ctx context.Context) (any, error) {
			return obj.LockedBy, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Outbox_lockedBy(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Outbox",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutboxConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.OutboxConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OutboxConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalOOutboxEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_OutboxConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutboxConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_OutboxEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_OutboxEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OutboxEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutboxConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.OutboxConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OutboxConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OutboxConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutboxConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutboxConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.OutboxConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OutboxConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OutboxConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutboxConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutboxEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.OutboxEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OutboxEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalOOutbox2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutbox,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_OutboxEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutboxEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Outbox_id(ctx, field)
			case "aggregateType":
				return ec.fieldContext_Outbox_aggregateType(ctx, field)
			case "aggregateID":
				return ec.fieldContext_Outbox_aggregateID(ctx, field)
			case "eventType":
				return ec.fieldContext_Outbox_eventType(ctx, field)
			case "payload":
				return ec.fieldContext_Outbox_payload(ctx, field)
			case "createdAt":
				return ec.fieldContext_Outbox_createdAt(ctx, field)
			case "processedAt":
				return ec.fieldContext_Outbox_processedAt(ctx, field)
			case "status":
				return ec.fieldContext_Outbox_status(ctx, field)
			case "errorMessage":
				return ec.fieldContext_Outbox_errorMessage(ctx, field)
			case "version":
				return ec.fieldContext_Outbox_version(ctx, field)
			case "lockedAt":
				return ec.fieldContext_Outbox_lockedAt(ctx, field)
			case "lockedBy":
				return ec.fieldContext_Outbox_lockedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Outbox", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OutboxEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.OutboxEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_OutboxEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_OutboxEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OutboxEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[string]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PageInfo_hasNextPage,
		func(ctx context.Context) (any, error) {
			return obj.HasNextPage, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[string]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PageInfo_hasPreviousPage,
		func(ctx context.Context) (any, error) {
			return obj.HasPreviousPage, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[string]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PageInfo_startCursor,
		func(ctx context.Context) (any, error) {
			return obj.StartCursor, nil
		},
		nil,
		ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *entgql.PageInfo[string]) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_PageInfo_endCursor,
		func(ctx context.Context) (any, error) {
			return obj.EndCursor, nil
		},
		nil,
		ec.marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_node(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_node,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Node(ctx, fc.Args["id"].(string))
		},
		nil,
		ec.marshalONode2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐNoder,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_node_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_nodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_nodes,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Nodes(ctx, fc.Args["ids"].([]string))
		},
		nil,
		ec.marshalNNode2ᚕgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐNoder,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("FieldContext.Child cannot be called on type INTERFACE")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_cars(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_cars,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Cars(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.CarOrder))
		},
		nil,
		ec.marshalNCarConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_cars(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CarConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CarConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CarConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_cars_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_carOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_carOptions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().CarOptions(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.CarOptionOrder))
		},
		nil,
		ec.marshalNCarOptionConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_carOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CarOptionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CarOptionConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CarOptionConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarOptionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_carOptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_companies(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_companies,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Companies(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.CompanyOrder))
		},
		nil,
		ec.marshalNCompanyConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_companies(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_CompanyConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_CompanyConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_CompanyConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CompanyConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_companies_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_individuals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_individuals,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Individuals(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.IndividualOrder))
		},
		nil,
		ec.marshalNIndividualConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_individuals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_IndividualConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_IndividualConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_IndividualConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type IndividualConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_individuals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_outboxes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_outboxes,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Outboxes(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.OutboxOrder))
		},
		nil,
		ec.marshalNOutboxConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_outboxes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_OutboxConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_OutboxConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_OutboxConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OutboxConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_outboxes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_rentals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_rentals,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Rentals(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.RentalOrder))
		},
		nil,
		ec.marshalNRentalConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_rentals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RentalConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RentalConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_RentalConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentalConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rentals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_rentalOptions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_rentalOptions,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().RentalOptions(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.RentalOptionOrder))
		},
		nil,
		ec.marshalNRentalOptionConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_rentalOptions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RentalOptionConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RentalOptionConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_RentalOptionConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentalOptionConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rentalOptions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_renters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_renters,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Renters(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.RenterOrder))
		},
		nil,
		ec.marshalNRenterConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_renters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_RenterConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_RenterConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_RenterConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RenterConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_renters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_tenants(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query_tenants,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.resolvers.Query().Tenants(ctx, fc.Args["after"].(*entgql.Cursor[string]), fc.Args["first"].(*int), fc.Args["before"].(*entgql.Cursor[string]), fc.Args["last"].(*int), fc.Args["orderBy"].([]*entgen.TenantOrder))
		},
		nil,
		ec.marshalNTenantConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantConnection,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Query_tenants(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "edges":
				return ec.fieldContext_TenantConnection_edges(ctx, field)
			case "pageInfo":
				return ec.fieldContext_TenantConnection_pageInfo(ctx, field)
			case "totalCount":
				return ec.fieldContext_TenantConnection_totalCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantConnection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_tenants_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___type,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return ec.introspectType(fc.Args["name"].(string))
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Query___schema,
		func(ctx context.Context) (any, error) {
			return ec.introspectSchema()
		},
		nil,
		ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Query___schema(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_id(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Rental_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_tenantID(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_tenantID,
		func(ctx context.Context) (any, error) {
			return obj.TenantID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Rental_tenantID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_carID(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_carID,
		func(ctx context.Context) (any, error) {
			return obj.CarID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Rental_carID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_renterID(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_renterID,
		func(ctx context.Context) (any, error) {
			return obj.RenterID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Rental_renterID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_startsAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_startsAt,
		func(ctx context.Context) (any, error) {
			return obj.StartsAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Rental_startsAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_endsAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_endsAt,
		func(ctx context.Context) (any, error) {
			return obj.EndsAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Rental_endsAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Rental_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Rental_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_tenant(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_tenant,
		func(ctx context.Context) (any, error) {
			return obj.Tenant(ctx)
		},
		nil,
		ec.marshalNTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Rental_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "code":
				return ec.fieldContext_Tenant_code(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tenant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tenant_updatedAt(ctx, field)
			case "cars":
				return ec.fieldContext_Tenant_cars(ctx, field)
			case "companies":
				return ec.fieldContext_Tenant_companies(ctx, field)
			case "individuals":
				return ec.fieldContext_Tenant_individuals(ctx, field)
			case "options":
				return ec.fieldContext_Tenant_options(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Tenant_rentalOptions(ctx, field)
			case "rentals":
				return ec.fieldContext_Tenant_rentals(ctx, field)
			case "renters":
				return ec.fieldContext_Tenant_renters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_car(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_car,
		func(ctx context.Context) (any, error) {
			return obj.Car(ctx)
		},
		nil,
		ec.marshalNCar2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCar,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Rental_car(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Car_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Car_tenantID(ctx, field)
			case "model":
				return ec.fieldContext_Car_model(ctx, field)
			case "createdAt":
				return ec.fieldContext_Car_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Car_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Car_tenant(ctx, field)
			case "rentals":
				return ec.fieldContext_Car_rentals(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Car", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_renter(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_renter,
		func(ctx context.Context) (any, error) {
			return obj.Renter(ctx)
		},
		nil,
		ec.marshalNRenter2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenter,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Rental_renter(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Renter_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Renter_tenantID(ctx, field)
			case "type":
				return ec.fieldContext_Renter_type(ctx, field)
			case "createdAt":
				return ec.fieldContext_Renter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Renter_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Renter_tenant(ctx, field)
			case "rentals":
				return ec.fieldContext_Renter_rentals(ctx, field)
			case "company":
				return ec.fieldContext_Renter_company(ctx, field)
			case "individual":
				return ec.fieldContext_Renter_individual(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Renter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Rental_rentalOptions(ctx context.Context, field graphql.CollectedField, obj *entgen.Rental) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Rental_rentalOptions,
		func(ctx context.Context) (any, error) {
			return obj.RentalOptions(ctx)
		},
		nil,
		ec.marshalORentalOption2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Rental_rentalOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Rental",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RentalOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_RentalOption_tenantID(ctx, field)
			case "rentalID":
				return ec.fieldContext_RentalOption_rentalID(ctx, field)
			case "optionID":
				return ec.fieldContext_RentalOption_optionID(ctx, field)
			case "count":
				return ec.fieldContext_RentalOption_count(ctx, field)
			case "createdAt":
				return ec.fieldContext_RentalOption_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RentalOption_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_RentalOption_tenant(ctx, field)
			case "rental":
				return ec.fieldContext_RentalOption_rental(ctx, field)
			case "option":
				return ec.fieldContext_RentalOption_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentalOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalORentalEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RentalConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_RentalEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_RentalEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentalEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalORental2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRental,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RentalEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Rental_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Rental_tenantID(ctx, field)
			case "carID":
				return ec.fieldContext_Rental_carID(ctx, field)
			case "renterID":
				return ec.fieldContext_Rental_renterID(ctx, field)
			case "startsAt":
				return ec.fieldContext_Rental_startsAt(ctx, field)
			case "endsAt":
				return ec.fieldContext_Rental_endsAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Rental_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Rental_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Rental_tenant(ctx, field)
			case "car":
				return ec.fieldContext_Rental_car(ctx, field)
			case "renter":
				return ec.fieldContext_Rental_renter(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Rental_rentalOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Rental", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_id(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOption_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_tenantID(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_tenantID,
		func(ctx context.Context) (any, error) {
			return obj.TenantID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOption_tenantID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_rentalID(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_rentalID,
		func(ctx context.Context) (any, error) {
			return obj.RentalID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOption_rentalID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_optionID(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_optionID,
		func(ctx context.Context) (any, error) {
			return obj.OptionID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOption_optionID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_count(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_count,
		func(ctx context.Context) (any, error) {
			return obj.Count, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOption_count(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RentalOption_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RentalOption_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_tenant(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_tenant,
		func(ctx context.Context) (any, error) {
			return obj.Tenant(ctx)
		},
		nil,
		ec.marshalNTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOption_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "code":
				return ec.fieldContext_Tenant_code(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tenant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tenant_updatedAt(ctx, field)
			case "cars":
				return ec.fieldContext_Tenant_cars(ctx, field)
			case "companies":
				return ec.fieldContext_Tenant_companies(ctx, field)
			case "individuals":
				return ec.fieldContext_Tenant_individuals(ctx, field)
			case "options":
				return ec.fieldContext_Tenant_options(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Tenant_rentalOptions(ctx, field)
			case "rentals":
				return ec.fieldContext_Tenant_rentals(ctx, field)
			case "renters":
				return ec.fieldContext_Tenant_renters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_rental(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_rental,
		func(ctx context.Context) (any, error) {
			return obj.Rental(ctx)
		},
		nil,
		ec.marshalNRental2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRental,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOption_rental(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Rental_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Rental_tenantID(ctx, field)
			case "carID":
				return ec.fieldContext_Rental_carID(ctx, field)
			case "renterID":
				return ec.fieldContext_Rental_renterID(ctx, field)
			case "startsAt":
				return ec.fieldContext_Rental_startsAt(ctx, field)
			case "endsAt":
				return ec.fieldContext_Rental_endsAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Rental_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Rental_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Rental_tenant(ctx, field)
			case "car":
				return ec.fieldContext_Rental_car(ctx, field)
			case "renter":
				return ec.fieldContext_Rental_renter(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Rental_rentalOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Rental", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOption_option(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOption) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOption_option,
		func(ctx context.Context) (any, error) {
			return obj.Option(ctx)
		},
		nil,
		ec.marshalNCarOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOption,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOption_option(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOption",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CarOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_CarOption_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_CarOption_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_CarOption_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CarOption_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_CarOption_tenant(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_CarOption_rentalOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOptionConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOptionConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOptionConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalORentalOptionEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RentalOptionConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_RentalOptionEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_RentalOptionEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentalOptionEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOptionConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOptionConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOptionConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOptionConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOptionConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOptionConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOptionConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOptionConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOptionConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOptionEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOptionEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOptionEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalORentalOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOption,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RentalOptionEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RentalOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_RentalOption_tenantID(ctx, field)
			case "rentalID":
				return ec.fieldContext_RentalOption_rentalID(ctx, field)
			case "optionID":
				return ec.fieldContext_RentalOption_optionID(ctx, field)
			case "count":
				return ec.fieldContext_RentalOption_count(ctx, field)
			case "createdAt":
				return ec.fieldContext_RentalOption_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RentalOption_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_RentalOption_tenant(ctx, field)
			case "rental":
				return ec.fieldContext_RentalOption_rental(ctx, field)
			case "option":
				return ec.fieldContext_RentalOption_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentalOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RentalOptionEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.RentalOptionEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RentalOptionEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RentalOptionEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RentalOptionEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_id(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Renter_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_tenantID(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_tenantID,
		func(ctx context.Context) (any, error) {
			return obj.TenantID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Renter_tenantID(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_type(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Renter_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Renter_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Renter_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_tenant(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_tenant,
		func(ctx context.Context) (any, error) {
			return obj.Tenant(ctx)
		},
		nil,
		ec.marshalNTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Renter_tenant(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "code":
				return ec.fieldContext_Tenant_code(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tenant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tenant_updatedAt(ctx, field)
			case "cars":
				return ec.fieldContext_Tenant_cars(ctx, field)
			case "companies":
				return ec.fieldContext_Tenant_companies(ctx, field)
			case "individuals":
				return ec.fieldContext_Tenant_individuals(ctx, field)
			case "options":
				return ec.fieldContext_Tenant_options(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Tenant_rentalOptions(ctx, field)
			case "rentals":
				return ec.fieldContext_Tenant_rentals(ctx, field)
			case "renters":
				return ec.fieldContext_Tenant_renters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_rentals(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_rentals,
		func(ctx context.Context) (any, error) {
			return obj.Rentals(ctx)
		},
		nil,
		ec.marshalORental2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Renter_rentals(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Rental_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Rental_tenantID(ctx, field)
			case "carID":
				return ec.fieldContext_Rental_carID(ctx, field)
			case "renterID":
				return ec.fieldContext_Rental_renterID(ctx, field)
			case "startsAt":
				return ec.fieldContext_Rental_startsAt(ctx, field)
			case "endsAt":
				return ec.fieldContext_Rental_endsAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Rental_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Rental_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Rental_tenant(ctx, field)
			case "car":
				return ec.fieldContext_Rental_car(ctx, field)
			case "renter":
				return ec.fieldContext_Rental_renter(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Rental_rentalOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Rental", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_company(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_company,
		func(ctx context.Context) (any, error) {
			return obj.Company(ctx)
		},
		nil,
		ec.marshalOCompany2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompany,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Renter_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "renterID":
				return ec.fieldContext_Company_renterID(ctx, field)
			case "tenantID":
				return ec.fieldContext_Company_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "companySize":
				return ec.fieldContext_Company_companySize(ctx, field)
			case "createdAt":
				return ec.fieldContext_Company_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Company_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Company_tenant(ctx, field)
			case "renter":
				return ec.fieldContext_Company_renter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Renter_individual(ctx context.Context, field graphql.CollectedField, obj *entgen.Renter) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Renter_individual,
		func(ctx context.Context) (any, error) {
			return obj.Individual(ctx)
		},
		nil,
		ec.marshalOIndividual2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividual,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Renter_individual(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Renter",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Individual_id(ctx, field)
			case "renterID":
				return ec.fieldContext_Individual_renterID(ctx, field)
			case "tenantID":
				return ec.fieldContext_Individual_tenantID(ctx, field)
			case "email":
				return ec.fieldContext_Individual_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Individual_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Individual_lastName(ctx, field)
			case "createdAt":
				return ec.fieldContext_Individual_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Individual_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Individual_tenant(ctx, field)
			case "renter":
				return ec.fieldContext_Individual_renter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Individual", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenterConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.RenterConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RenterConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalORenterEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RenterConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenterConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_RenterEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_RenterEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RenterEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenterConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.RenterConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RenterConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RenterConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenterConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenterConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.RenterConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RenterConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RenterConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenterConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenterEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.RenterEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RenterEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalORenter2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenter,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_RenterEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenterEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Renter_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Renter_tenantID(ctx, field)
			case "type":
				return ec.fieldContext_Renter_type(ctx, field)
			case "createdAt":
				return ec.fieldContext_Renter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Renter_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Renter_tenant(ctx, field)
			case "rentals":
				return ec.fieldContext_Renter_rentals(ctx, field)
			case "company":
				return ec.fieldContext_Renter_company(ctx, field)
			case "individual":
				return ec.fieldContext_Renter_individual(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Renter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RenterEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.RenterEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_RenterEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_RenterEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RenterEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_id(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_id,
		func(ctx context.Context) (any, error) {
			return obj.ID, nil
		},
		nil,
		ec.marshalNID2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tenant_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_code(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_code,
		func(ctx context.Context) (any, error) {
			return obj.Code, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_Tenant_code(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_createdAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_createdAt,
		func(ctx context.Context) (any, error) {
			return obj.CreatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_createdAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_updatedAt(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_updatedAt,
		func(ctx context.Context) (any, error) {
			return obj.UpdatedAt, nil
		},
		nil,
		ec.marshalOTime2timeᚐTime,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_updatedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_cars(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_cars,
		func(ctx context.Context) (any, error) {
			return obj.Cars(ctx)
		},
		nil,
		ec.marshalOCar2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_cars(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Car_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Car_tenantID(ctx, field)
			case "model":
				return ec.fieldContext_Car_model(ctx, field)
			case "createdAt":
				return ec.fieldContext_Car_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Car_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Car_tenant(ctx, field)
			case "rentals":
				return ec.fieldContext_Car_rentals(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Car", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_companies(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_companies,
		func(ctx context.Context) (any, error) {
			return obj.Companies(ctx)
		},
		nil,
		ec.marshalOCompany2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_companies(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Company_id(ctx, field)
			case "renterID":
				return ec.fieldContext_Company_renterID(ctx, field)
			case "tenantID":
				return ec.fieldContext_Company_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "companySize":
				return ec.fieldContext_Company_companySize(ctx, field)
			case "createdAt":
				return ec.fieldContext_Company_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Company_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Company_tenant(ctx, field)
			case "renter":
				return ec.fieldContext_Company_renter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_individuals(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_individuals,
		func(ctx context.Context) (any, error) {
			return obj.Individuals(ctx)
		},
		nil,
		ec.marshalOIndividual2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_individuals(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Individual_id(ctx, field)
			case "renterID":
				return ec.fieldContext_Individual_renterID(ctx, field)
			case "tenantID":
				return ec.fieldContext_Individual_tenantID(ctx, field)
			case "email":
				return ec.fieldContext_Individual_email(ctx, field)
			case "firstName":
				return ec.fieldContext_Individual_firstName(ctx, field)
			case "lastName":
				return ec.fieldContext_Individual_lastName(ctx, field)
			case "createdAt":
				return ec.fieldContext_Individual_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Individual_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Individual_tenant(ctx, field)
			case "renter":
				return ec.fieldContext_Individual_renter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Individual", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_options(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_options,
		func(ctx context.Context) (any, error) {
			return obj.Options(ctx)
		},
		nil,
		ec.marshalOCarOption2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_options(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_CarOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_CarOption_tenantID(ctx, field)
			case "name":
				return ec.fieldContext_CarOption_name(ctx, field)
			case "createdAt":
				return ec.fieldContext_CarOption_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_CarOption_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_CarOption_tenant(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_CarOption_rentalOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CarOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_rentalOptions(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_rentalOptions,
		func(ctx context.Context) (any, error) {
			return obj.RentalOptions(ctx)
		},
		nil,
		ec.marshalORentalOption2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_rentalOptions(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RentalOption_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_RentalOption_tenantID(ctx, field)
			case "rentalID":
				return ec.fieldContext_RentalOption_rentalID(ctx, field)
			case "optionID":
				return ec.fieldContext_RentalOption_optionID(ctx, field)
			case "count":
				return ec.fieldContext_RentalOption_count(ctx, field)
			case "createdAt":
				return ec.fieldContext_RentalOption_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_RentalOption_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_RentalOption_tenant(ctx, field)
			case "rental":
				return ec.fieldContext_RentalOption_rental(ctx, field)
			case "option":
				return ec.fieldContext_RentalOption_option(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RentalOption", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_rentals(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_rentals,
		func(ctx context.Context) (any, error) {
			return obj.Rentals(ctx)
		},
		nil,
		ec.marshalORental2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_rentals(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Rental_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Rental_tenantID(ctx, field)
			case "carID":
				return ec.fieldContext_Rental_carID(ctx, field)
			case "renterID":
				return ec.fieldContext_Rental_renterID(ctx, field)
			case "startsAt":
				return ec.fieldContext_Rental_startsAt(ctx, field)
			case "endsAt":
				return ec.fieldContext_Rental_endsAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Rental_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Rental_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Rental_tenant(ctx, field)
			case "car":
				return ec.fieldContext_Rental_car(ctx, field)
			case "renter":
				return ec.fieldContext_Rental_renter(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Rental_rentalOptions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Rental", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tenant_renters(ctx context.Context, field graphql.CollectedField, obj *entgen.Tenant) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_Tenant_renters,
		func(ctx context.Context) (any, error) {
			return obj.Renters(ctx)
		},
		nil,
		ec.marshalORenter2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_Tenant_renters(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tenant",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Renter_id(ctx, field)
			case "tenantID":
				return ec.fieldContext_Renter_tenantID(ctx, field)
			case "type":
				return ec.fieldContext_Renter_type(ctx, field)
			case "createdAt":
				return ec.fieldContext_Renter_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Renter_updatedAt(ctx, field)
			case "tenant":
				return ec.fieldContext_Renter_tenant(ctx, field)
			case "rentals":
				return ec.fieldContext_Renter_rentals(ctx, field)
			case "company":
				return ec.fieldContext_Renter_company(ctx, field)
			case "individual":
				return ec.fieldContext_Renter_individual(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Renter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantConnection_edges(ctx context.Context, field graphql.CollectedField, obj *entgen.TenantConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TenantConnection_edges,
		func(ctx context.Context) (any, error) {
			return obj.Edges, nil
		},
		nil,
		ec.marshalOTenantEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantEdge,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TenantConnection_edges(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_TenantEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_TenantEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type TenantEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *entgen.TenantConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TenantConnection_pageInfo,
		func(ctx context.Context) (any, error) {
			return obj.PageInfo, nil
		},
		nil,
		ec.marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TenantConnection_pageInfo(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *entgen.TenantConnection) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TenantConnection_totalCount,
		func(ctx context.Context) (any, error) {
			return obj.TotalCount, nil
		},
		nil,
		ec.marshalNInt2int,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TenantConnection_totalCount(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantEdge_node(ctx context.Context, field graphql.CollectedField, obj *entgen.TenantEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TenantEdge_node,
		func(ctx context.Context) (any, error) {
			return obj.Node, nil
		},
		nil,
		ec.marshalOTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext_TenantEdge_node(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Tenant_id(ctx, field)
			case "code":
				return ec.fieldContext_Tenant_code(ctx, field)
			case "createdAt":
				return ec.fieldContext_Tenant_createdAt(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Tenant_updatedAt(ctx, field)
			case "cars":
				return ec.fieldContext_Tenant_cars(ctx, field)
			case "companies":
				return ec.fieldContext_Tenant_companies(ctx, field)
			case "individuals":
				return ec.fieldContext_Tenant_individuals(ctx, field)
			case "options":
				return ec.fieldContext_Tenant_options(ctx, field)
			case "rentalOptions":
				return ec.fieldContext_Tenant_rentalOptions(ctx, field)
			case "rentals":
				return ec.fieldContext_Tenant_rentals(ctx, field)
			case "renters":
				return ec.fieldContext_Tenant_renters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Tenant", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _TenantEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *entgen.TenantEdge) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext_TenantEdge_cursor,
		func(ctx context.Context) (any, error) {
			return obj.Cursor, nil
		},
		nil,
		ec.marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext_TenantEdge_cursor(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "TenantEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Directive_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_isRepeatable,
		func(ctx context.Context) (any, error) {
			return obj.IsRepeatable, nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_locations,
		func(ctx context.Context) (any, error) {
			return obj.Locations, nil
		},
		nil,
		ec.marshalN__DirectiveLocation2ᚕstringᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_locations(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Directive_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Directive_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___EnumValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_args,
		func(ctx context.Context) (any, error) {
			return obj.Args, nil
		},
		nil,
		ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Field_args_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Field_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_name,
		func(ctx context.Context) (any, error) {
			return obj.Name, nil
		},
		nil,
		ec.marshalNString2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_type,
		func(ctx context.Context) (any, error) {
			return obj.Type, nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_type(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_defaultValue,
		func(ctx context.Context) (any, error) {
			return obj.DefaultValue, nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_isDeprecated,
		func(ctx context.Context) (any, error) {
			return obj.IsDeprecated(), nil
		},
		nil,
		ec.marshalNBoolean2bool,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___InputValue_isDeprecated(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___InputValue_deprecationReason,
		func(ctx context.Context) (any, error) {
			return obj.DeprecationReason(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___InputValue_deprecationReason(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_types,
		func(ctx context.Context) (any, error) {
			return obj.Types(), nil
		},
		nil,
		ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_types(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_queryType,
		func(ctx context.Context) (any, error) {
			return obj.QueryType(), nil
		},
		nil,
		ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_queryType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_mutationType,
		func(ctx context.Context) (any, error) {
			return obj.MutationType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_mutationType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_subscriptionType,
		func(ctx context.Context) (any, error) {
			return obj.SubscriptionType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Schema_directives,
		func(ctx context.Context) (any, error) {
			return obj.Directives(), nil
		},
		nil,
		ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Schema_directives(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_kind,
		func(ctx context.Context) (any, error) {
			return obj.Kind(), nil
		},
		nil,
		ec.marshalN__TypeKind2string,
		true,
		true,
	)
}

func (ec *executionContext) fieldContext___Type_kind(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_name,
		func(ctx context.Context) (any, error) {
			return obj.Name(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_name(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_description,
		func(ctx context.Context) (any, error) {
			return obj.Description(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_description(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_specifiedByURL,
		func(ctx context.Context) (any, error) {
			return obj.SpecifiedByURL(), nil
		},
		nil,
		ec.marshalOString2ᚖstring,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_fields,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_interfaces,
		func(ctx context.Context) (any, error) {
			return obj.Interfaces(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_interfaces(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_possibleTypes,
		func(ctx context.Context) (any, error) {
			return obj.PossibleTypes(), nil
		},
		nil,
		ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_enumValues,
		func(ctx context.Context) (any, error) {
			fc := graphql.GetFieldContext(ctx)
			return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
		},
		nil,
		ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_inputFields,
		func(ctx context.Context) (any, error) {
			return obj.InputFields(), nil
		},
		nil,
		ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_inputFields(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___InputValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___InputValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_ofType,
		func(ctx context.Context) (any, error) {
			return obj.OfType(), nil
		},
		nil,
		ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_ofType(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "isOneOf":
				return ec.fieldContext___Type_isOneOf(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_isOneOf(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	return graphql.ResolveField(
		ctx,
		ec.OperationContext,
		field,
		ec.fieldContext___Type_isOneOf,
		func(ctx context.Context) (any, error) {
			return obj.IsOneOf(), nil
		},
		nil,
		ec.marshalOBoolean2bool,
		true,
		false,
	)
}

func (ec *executionContext) fieldContext___Type_isOneOf(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCarOptionOrder(ctx context.Context, obj any) (entgen.CarOptionOrder, error) {
	var it entgen.CarOptionOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCarOptionOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCarOrder(ctx context.Context, obj any) (entgen.CarOrder, error) {
	var it entgen.CarOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCarOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCompanyOrder(ctx context.Context, obj any) (entgen.CompanyOrder, error) {
	var it entgen.CompanyOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNCompanyOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCarInput(ctx context.Context, obj any) (entgen.CreateCarInput, error) {
	var it entgen.CreateCarInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"model", "createdAt", "updatedAt", "tenantID", "rentalIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "model":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("model"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Model = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "rentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RentalIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCarOptionInput(ctx context.Context, obj any) (entgen.CreateCarOptionInput, error) {
	var it entgen.CreateCarOptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "createdAt", "updatedAt", "tenantID", "rentalOptionIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "rentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RentalOptionIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateCompanyInput(ctx context.Context, obj any) (entgen.CreateCompanyInput, error) {
	var it entgen.CreateCompanyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "companySize", "createdAt", "updatedAt", "tenantID", "renterID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "companySize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companySize"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanySize = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "renterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renterID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenterID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateIndividualInput(ctx context.Context, obj any) (entgen.CreateIndividualInput, error) {
	var it entgen.CreateIndividualInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "firstName", "lastName", "createdAt", "updatedAt", "tenantID", "renterID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "renterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renterID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenterID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateOutboxInput(ctx context.Context, obj any) (entgen.CreateOutboxInput, error) {
	var it entgen.CreateOutboxInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"aggregateType", "aggregateID", "eventType", "payload", "createdAt", "processedAt", "status", "errorMessage", "version", "lockedAt", "lockedBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "aggregateType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aggregateType"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AggregateType = data
		case "aggregateID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aggregateID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.AggregateID = data
		case "eventType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventType"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventType = data
		case "payload":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payload"))
			data, err := ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Payload = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "processedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessedAt = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "errorMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("errorMessage"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ErrorMessage = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "lockedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedAt = data
		case "lockedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedBy"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedBy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRentalInput(ctx context.Context, obj any) (entgen.CreateRentalInput, error) {
	var it entgen.CreateRentalInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startsAt", "endsAt", "createdAt", "updatedAt", "tenantID", "carID", "renterID", "rentalOptionIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startsAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startsAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartsAt = data
		case "endsAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endsAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndsAt = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "carID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CarID = data
		case "renterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renterID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenterID = data
		case "rentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RentalOptionIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRentalOptionInput(ctx context.Context, obj any) (entgen.CreateRentalOptionInput, error) {
	var it entgen.CreateRentalOptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"count", "createdAt", "updatedAt", "tenantID", "rentalID", "optionID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "count":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			data, err := ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
			it.Count = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "rentalID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentalID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RentalID = data
		case "optionID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optionID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptionID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRenterInput(ctx context.Context, obj any) (entgen.CreateRenterInput, error) {
	var it entgen.CreateRenterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "createdAt", "updatedAt", "tenantID", "rentalIDs", "companyID", "individualID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "rentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RentalIDs = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "individualID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("individualID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndividualID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateTenantInput(ctx context.Context, obj any) (entgen.CreateTenantInput, error) {
	var it entgen.CreateTenantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "createdAt", "updatedAt", "carIDs", "companyIDs", "individualIDs", "optionIDs", "rentalOptionIDs", "rentalIDs", "renterIDs"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "carIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CarIDs = data
		case "companyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyIDs = data
		case "individualIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("individualIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndividualIDs = data
		case "optionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptionIDs = data
		case "rentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RentalOptionIDs = data
		case "rentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RentalIDs = data
		case "renterIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renterIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenterIDs = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIndividualOrder(ctx context.Context, obj any) (entgen.IndividualOrder, error) {
	var it entgen.IndividualOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNIndividualOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOutboxOrder(ctx context.Context, obj any) (entgen.OutboxOrder, error) {
	var it entgen.OutboxOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNOutboxOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRentalOptionOrder(ctx context.Context, obj any) (entgen.RentalOptionOrder, error) {
	var it entgen.RentalOptionOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNRentalOptionOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRentalOrder(ctx context.Context, obj any) (entgen.RentalOrder, error) {
	var it entgen.RentalOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNRentalOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRenterOrder(ctx context.Context, obj any) (entgen.RenterOrder, error) {
	var it entgen.RenterOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNRenterOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTenantOrder(ctx context.Context, obj any) (entgen.TenantOrder, error) {
	var it entgen.TenantOrder
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	fieldsInOrder := [...]string{"direction", "field"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "direction":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			data, err := ec.unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
			it.Direction = data
		case "field":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			data, err := ec.unmarshalNTenantOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantOrderField(ctx, v)
			if err != nil {
				return it, err
			}
			it.Field = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCarInput(ctx context.Context, obj any) (entgen.UpdateCarInput, error) {
	var it entgen.UpdateCarInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"model", "createdAt", "clearCreatedAt", "updatedAt", "clearUpdatedAt", "tenantID", "addRentalIDs", "removeRentalIDs", "clearRentals"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "model":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("model"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Model = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "clearUpdatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "addRentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addRentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddRentalIDs = data
		case "removeRentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeRentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveRentalIDs = data
		case "clearRentals":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRentals"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRentals = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCarOptionInput(ctx context.Context, obj any) (entgen.UpdateCarOptionInput, error) {
	var it entgen.UpdateCarOptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "createdAt", "clearCreatedAt", "updatedAt", "clearUpdatedAt", "tenantID", "addRentalOptionIDs", "removeRentalOptionIDs", "clearRentalOptions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "clearUpdatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "addRentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addRentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddRentalOptionIDs = data
		case "removeRentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeRentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveRentalOptionIDs = data
		case "clearRentalOptions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRentalOptions"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRentalOptions = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateCompanyInput(ctx context.Context, obj any) (entgen.UpdateCompanyInput, error) {
	var it entgen.UpdateCompanyInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "companySize", "createdAt", "clearCreatedAt", "updatedAt", "clearUpdatedAt", "tenantID", "renterID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "companySize":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companySize"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanySize = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "clearUpdatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "renterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renterID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenterID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateIndividualInput(ctx context.Context, obj any) (entgen.UpdateIndividualInput, error) {
	var it entgen.UpdateIndividualInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"email", "firstName", "clearFirstName", "lastName", "clearLastName", "createdAt", "clearCreatedAt", "updatedAt", "clearUpdatedAt", "tenantID", "renterID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "email":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "firstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.FirstName = data
		case "clearFirstName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearFirstName"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearFirstName = data
		case "lastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastName = data
		case "clearLastName":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLastName"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLastName = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "clearUpdatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "renterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renterID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenterID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateOutboxInput(ctx context.Context, obj any) (entgen.UpdateOutboxInput, error) {
	var it entgen.UpdateOutboxInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"aggregateType", "aggregateID", "eventType", "payload", "clearPayload", "createdAt", "clearCreatedAt", "processedAt", "clearProcessedAt", "status", "errorMessage", "clearErrorMessage", "version", "lockedAt", "clearLockedAt", "lockedBy", "clearLockedBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "aggregateType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aggregateType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AggregateType = data
		case "aggregateID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aggregateID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.AggregateID = data
		case "eventType":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eventType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.EventType = data
		case "payload":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payload"))
			data, err := ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
			it.Payload = data
		case "clearPayload":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearPayload"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearPayload = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "processedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProcessedAt = data
		case "clearProcessedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearProcessedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearProcessedAt = data
		case "status":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Status = data
		case "errorMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("errorMessage"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ErrorMessage = data
		case "clearErrorMessage":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearErrorMessage"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearErrorMessage = data
		case "version":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			data, err := ec.unmarshalOInt2ᚖint64(ctx, v)
			if err != nil {
				return it, err
			}
			it.Version = data
		case "lockedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedAt = data
		case "clearLockedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLockedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLockedAt = data
		case "lockedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lockedBy"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LockedBy = data
		case "clearLockedBy":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearLockedBy"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearLockedBy = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRentalInput(ctx context.Context, obj any) (entgen.UpdateRentalInput, error) {
	var it entgen.UpdateRentalInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"startsAt", "clearStartsAt", "endsAt", "clearEndsAt", "createdAt", "clearCreatedAt", "updatedAt", "clearUpdatedAt", "tenantID", "carID", "renterID", "addRentalOptionIDs", "removeRentalOptionIDs", "clearRentalOptions"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "startsAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startsAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.StartsAt = data
		case "clearStartsAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearStartsAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearStartsAt = data
		case "endsAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endsAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.EndsAt = data
		case "clearEndsAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEndsAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearEndsAt = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "clearUpdatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "carID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("carID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CarID = data
		case "renterID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("renterID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RenterID = data
		case "addRentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addRentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddRentalOptionIDs = data
		case "removeRentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeRentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveRentalOptionIDs = data
		case "clearRentalOptions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRentalOptions"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRentalOptions = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRentalOptionInput(ctx context.Context, obj any) (entgen.UpdateRentalOptionInput, error) {
	var it entgen.UpdateRentalOptionInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"count", "createdAt", "clearCreatedAt", "updatedAt", "clearUpdatedAt", "tenantID", "rentalID", "optionID"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "count":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("count"))
			data, err := ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
			it.Count = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "clearUpdatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "rentalID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("rentalID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.RentalID = data
		case "optionID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("optionID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OptionID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateRenterInput(ctx context.Context, obj any) (entgen.UpdateRenterInput, error) {
	var it entgen.UpdateRenterInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"type", "createdAt", "clearCreatedAt", "updatedAt", "clearUpdatedAt", "tenantID", "addRentalIDs", "removeRentalIDs", "clearRentals", "companyID", "clearCompany", "individualID", "clearIndividual"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "type":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Type = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "clearUpdatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedAt = data
		case "tenantID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TenantID = data
		case "addRentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addRentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddRentalIDs = data
		case "removeRentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeRentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveRentalIDs = data
		case "clearRentals":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRentals"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRentals = data
		case "companyID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CompanyID = data
		case "clearCompany":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompany"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompany = data
		case "individualID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("individualID"))
			data, err := ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.IndividualID = data
		case "clearIndividual":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIndividual"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIndividual = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateTenantInput(ctx context.Context, obj any) (entgen.UpdateTenantInput, error) {
	var it entgen.UpdateTenantInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"code", "createdAt", "clearCreatedAt", "updatedAt", "clearUpdatedAt", "addCarIDs", "removeCarIDs", "clearCars", "addCompanyIDs", "removeCompanyIDs", "clearCompanies", "addIndividualIDs", "removeIndividualIDs", "clearIndividuals", "addOptionIDs", "removeOptionIDs", "clearOptions", "addRentalOptionIDs", "removeRentalOptionIDs", "clearRentalOptions", "addRentalIDs", "removeRentalIDs", "clearRentals", "addRenterIDs", "removeRenterIDs", "clearRenters"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "code":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Code = data
		case "createdAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreatedAt = data
		case "clearCreatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCreatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCreatedAt = data
		case "updatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			data, err := ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.UpdatedAt = data
		case "clearUpdatedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearUpdatedAt"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearUpdatedAt = data
		case "addCarIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCarIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCarIDs = data
		case "removeCarIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCarIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCarIDs = data
		case "clearCars":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCars"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCars = data
		case "addCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddCompanyIDs = data
		case "removeCompanyIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeCompanyIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveCompanyIDs = data
		case "clearCompanies":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearCompanies"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearCompanies = data
		case "addIndividualIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addIndividualIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddIndividualIDs = data
		case "removeIndividualIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeIndividualIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveIndividualIDs = data
		case "clearIndividuals":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearIndividuals"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearIndividuals = data
		case "addOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddOptionIDs = data
		case "removeOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveOptionIDs = data
		case "clearOptions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearOptions"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearOptions = data
		case "addRentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addRentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddRentalOptionIDs = data
		case "removeRentalOptionIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeRentalOptionIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveRentalOptionIDs = data
		case "clearRentalOptions":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRentalOptions"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRentalOptions = data
		case "addRentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addRentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddRentalIDs = data
		case "removeRentalIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeRentalIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveRentalIDs = data
		case "clearRentals":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRentals"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRentals = data
		case "addRenterIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addRenterIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.AddRenterIDs = data
		case "removeRenterIDs":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeRenterIDs"))
			data, err := ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.RemoveRenterIDs = data
		case "clearRenters":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearRenters"))
			data, err := ec.unmarshalOBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
			it.ClearRenters = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj entgen.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *entgen.Tenant:
		if obj == nil {
			return graphql.Null
		}
		return ec._Tenant(ctx, sel, obj)
	case *entgen.Renter:
		if obj == nil {
			return graphql.Null
		}
		return ec._Renter(ctx, sel, obj)
	case *entgen.RentalOption:
		if obj == nil {
			return graphql.Null
		}
		return ec._RentalOption(ctx, sel, obj)
	case *entgen.Rental:
		if obj == nil {
			return graphql.Null
		}
		return ec._Rental(ctx, sel, obj)
	case *entgen.Outbox:
		if obj == nil {
			return graphql.Null
		}
		return ec._Outbox(ctx, sel, obj)
	case *entgen.Individual:
		if obj == nil {
			return graphql.Null
		}
		return ec._Individual(ctx, sel, obj)
	case *entgen.Company:
		if obj == nil {
			return graphql.Null
		}
		return ec._Company(ctx, sel, obj)
	case *entgen.CarOption:
		if obj == nil {
			return graphql.Null
		}
		return ec._CarOption(ctx, sel, obj)
	case *entgen.Car:
		if obj == nil {
			return graphql.Null
		}
		return ec._Car(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var carImplementors = []string{"Car", "Node"}

func (ec *executionContext) _Car(ctx context.Context, sel ast.SelectionSet, obj *entgen.Car) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, carImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Car")
		case "id":
			out.Values[i] = ec._Car_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenantID":
			out.Values[i] = ec._Car_tenantID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "model":
			out.Values[i] = ec._Car_model(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Car_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Car_updatedAt(ctx, field, obj)
		case "tenant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Car_tenant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rentals":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Car_rentals(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var carConnectionImplementors = []string{"CarConnection"}

func (ec *executionContext) _CarConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.CarConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, carConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CarConnection")
		case "edges":
			out.Values[i] = ec._CarConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CarConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CarConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var carEdgeImplementors = []string{"CarEdge"}

func (ec *executionContext) _CarEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.CarEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, carEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CarEdge")
		case "node":
			out.Values[i] = ec._CarEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CarEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var carOptionImplementors = []string{"CarOption", "Node"}

func (ec *executionContext) _CarOption(ctx context.Context, sel ast.SelectionSet, obj *entgen.CarOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, carOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CarOption")
		case "id":
			out.Values[i] = ec._CarOption_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenantID":
			out.Values[i] = ec._CarOption_tenantID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._CarOption_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._CarOption_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._CarOption_updatedAt(ctx, field, obj)
		case "tenant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CarOption_tenant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rentalOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CarOption_rentalOptions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var carOptionConnectionImplementors = []string{"CarOptionConnection"}

func (ec *executionContext) _CarOptionConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.CarOptionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, carOptionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CarOptionConnection")
		case "edges":
			out.Values[i] = ec._CarOptionConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CarOptionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CarOptionConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var carOptionEdgeImplementors = []string{"CarOptionEdge"}

func (ec *executionContext) _CarOptionEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.CarOptionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, carOptionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CarOptionEdge")
		case "node":
			out.Values[i] = ec._CarOptionEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CarOptionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyImplementors = []string{"Company", "Node"}

func (ec *executionContext) _Company(ctx context.Context, sel ast.SelectionSet, obj *entgen.Company) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Company")
		case "id":
			out.Values[i] = ec._Company_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "renterID":
			out.Values[i] = ec._Company_renterID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenantID":
			out.Values[i] = ec._Company_tenantID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Company_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "companySize":
			out.Values[i] = ec._Company_companySize(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Company_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Company_updatedAt(ctx, field, obj)
		case "tenant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_tenant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "renter":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Company_renter(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyConnectionImplementors = []string{"CompanyConnection"}

func (ec *executionContext) _CompanyConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.CompanyConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyConnection")
		case "edges":
			out.Values[i] = ec._CompanyConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._CompanyConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._CompanyConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var companyEdgeImplementors = []string{"CompanyEdge"}

func (ec *executionContext) _CompanyEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.CompanyEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyEdge")
		case "node":
			out.Values[i] = ec._CompanyEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._CompanyEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var individualImplementors = []string{"Individual", "Node"}

func (ec *executionContext) _Individual(ctx context.Context, sel ast.SelectionSet, obj *entgen.Individual) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Individual")
		case "id":
			out.Values[i] = ec._Individual_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "renterID":
			out.Values[i] = ec._Individual_renterID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenantID":
			out.Values[i] = ec._Individual_tenantID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Individual_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "firstName":
			out.Values[i] = ec._Individual_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._Individual_lastName(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Individual_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Individual_updatedAt(ctx, field, obj)
		case "tenant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Individual_tenant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "renter":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Individual_renter(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var individualConnectionImplementors = []string{"IndividualConnection"}

func (ec *executionContext) _IndividualConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.IndividualConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualConnection")
		case "edges":
			out.Values[i] = ec._IndividualConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._IndividualConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._IndividualConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var individualEdgeImplementors = []string{"IndividualEdge"}

func (ec *executionContext) _IndividualEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.IndividualEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, individualEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IndividualEdge")
		case "node":
			out.Values[i] = ec._IndividualEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._IndividualEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var outboxImplementors = []string{"Outbox", "Node"}

func (ec *executionContext) _Outbox(ctx context.Context, sel ast.SelectionSet, obj *entgen.Outbox) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, outboxImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Outbox")
		case "id":
			out.Values[i] = ec._Outbox_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "aggregateType":
			out.Values[i] = ec._Outbox_aggregateType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "aggregateID":
			out.Values[i] = ec._Outbox_aggregateID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "eventType":
			out.Values[i] = ec._Outbox_eventType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "payload":
			out.Values[i] = ec._Outbox_payload(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Outbox_createdAt(ctx, field, obj)
		case "processedAt":
			out.Values[i] = ec._Outbox_processedAt(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Outbox_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "errorMessage":
			out.Values[i] = ec._Outbox_errorMessage(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Outbox_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "lockedAt":
			out.Values[i] = ec._Outbox_lockedAt(ctx, field, obj)
		case "lockedBy":
			out.Values[i] = ec._Outbox_lockedBy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var outboxConnectionImplementors = []string{"OutboxConnection"}

func (ec *executionContext) _OutboxConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.OutboxConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, outboxConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OutboxConnection")
		case "edges":
			out.Values[i] = ec._OutboxConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._OutboxConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._OutboxConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var outboxEdgeImplementors = []string{"OutboxEdge"}

func (ec *executionContext) _OutboxEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.OutboxEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, outboxEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OutboxEdge")
		case "node":
			out.Values[i] = ec._OutboxEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._OutboxEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *entgql.PageInfo[string]) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			out.Values[i] = ec._PageInfo_hasNextPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "hasPreviousPage":
			out.Values[i] = ec._PageInfo_hasPreviousPage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "startCursor":
			out.Values[i] = ec._PageInfo_startCursor(ctx, field, obj)
		case "endCursor":
			out.Values[i] = ec._PageInfo_endCursor(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "node":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_node(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "nodes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nodes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "cars":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_cars(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "carOptions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_carOptions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "companies":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_companies(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "individuals":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_individuals(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "outboxes":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_outboxes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rentals":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rentals(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "rentalOptions":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rentalOptions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "renters":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_renters(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "tenants":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_tenants(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rentalImplementors = []string{"Rental", "Node"}

func (ec *executionContext) _Rental(ctx context.Context, sel ast.SelectionSet, obj *entgen.Rental) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentalImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Rental")
		case "id":
			out.Values[i] = ec._Rental_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenantID":
			out.Values[i] = ec._Rental_tenantID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "carID":
			out.Values[i] = ec._Rental_carID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "renterID":
			out.Values[i] = ec._Rental_renterID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "startsAt":
			out.Values[i] = ec._Rental_startsAt(ctx, field, obj)
		case "endsAt":
			out.Values[i] = ec._Rental_endsAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Rental_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Rental_updatedAt(ctx, field, obj)
		case "tenant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Rental_tenant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "car":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Rental_car(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "renter":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Rental_renter(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rentalOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Rental_rentalOptions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rentalConnectionImplementors = []string{"RentalConnection"}

func (ec *executionContext) _RentalConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.RentalConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentalConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentalConnection")
		case "edges":
			out.Values[i] = ec._RentalConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RentalConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._RentalConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rentalEdgeImplementors = []string{"RentalEdge"}

func (ec *executionContext) _RentalEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.RentalEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentalEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentalEdge")
		case "node":
			out.Values[i] = ec._RentalEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._RentalEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rentalOptionImplementors = []string{"RentalOption", "Node"}

func (ec *executionContext) _RentalOption(ctx context.Context, sel ast.SelectionSet, obj *entgen.RentalOption) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentalOptionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentalOption")
		case "id":
			out.Values[i] = ec._RentalOption_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenantID":
			out.Values[i] = ec._RentalOption_tenantID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "rentalID":
			out.Values[i] = ec._RentalOption_rentalID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "optionID":
			out.Values[i] = ec._RentalOption_optionID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "count":
			out.Values[i] = ec._RentalOption_count(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._RentalOption_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RentalOption_updatedAt(ctx, field, obj)
		case "tenant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RentalOption_tenant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rental":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RentalOption_rental(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "option":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RentalOption_option(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rentalOptionConnectionImplementors = []string{"RentalOptionConnection"}

func (ec *executionContext) _RentalOptionConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.RentalOptionConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentalOptionConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentalOptionConnection")
		case "edges":
			out.Values[i] = ec._RentalOptionConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RentalOptionConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._RentalOptionConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var rentalOptionEdgeImplementors = []string{"RentalOptionEdge"}

func (ec *executionContext) _RentalOptionEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.RentalOptionEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rentalOptionEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RentalOptionEdge")
		case "node":
			out.Values[i] = ec._RentalOptionEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._RentalOptionEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var renterImplementors = []string{"Renter", "Node"}

func (ec *executionContext) _Renter(ctx context.Context, sel ast.SelectionSet, obj *entgen.Renter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, renterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Renter")
		case "id":
			out.Values[i] = ec._Renter_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "tenantID":
			out.Values[i] = ec._Renter_tenantID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "type":
			out.Values[i] = ec._Renter_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Renter_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Renter_updatedAt(ctx, field, obj)
		case "tenant":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Renter_tenant(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rentals":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Renter_rentals(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "company":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Renter_company(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "individual":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Renter_individual(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var renterConnectionImplementors = []string{"RenterConnection"}

func (ec *executionContext) _RenterConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.RenterConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, renterConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RenterConnection")
		case "edges":
			out.Values[i] = ec._RenterConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._RenterConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._RenterConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var renterEdgeImplementors = []string{"RenterEdge"}

func (ec *executionContext) _RenterEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.RenterEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, renterEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RenterEdge")
		case "node":
			out.Values[i] = ec._RenterEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._RenterEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenantImplementors = []string{"Tenant", "Node"}

func (ec *executionContext) _Tenant(ctx context.Context, sel ast.SelectionSet, obj *entgen.Tenant) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tenant")
		case "id":
			out.Values[i] = ec._Tenant_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "code":
			out.Values[i] = ec._Tenant_code(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Tenant_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Tenant_updatedAt(ctx, field, obj)
		case "cars":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tenant_cars(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "companies":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tenant_companies(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "individuals":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tenant_individuals(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "options":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tenant_options(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rentalOptions":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tenant_rentalOptions(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "rentals":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tenant_rentals(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "renters":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Tenant_renters(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenantConnectionImplementors = []string{"TenantConnection"}

func (ec *executionContext) _TenantConnection(ctx context.Context, sel ast.SelectionSet, obj *entgen.TenantConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantConnectionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenantConnection")
		case "edges":
			out.Values[i] = ec._TenantConnection_edges(ctx, field, obj)
		case "pageInfo":
			out.Values[i] = ec._TenantConnection_pageInfo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "totalCount":
			out.Values[i] = ec._TenantConnection_totalCount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var tenantEdgeImplementors = []string{"TenantEdge"}

func (ec *executionContext) _TenantEdge(ctx context.Context, sel ast.SelectionSet, obj *entgen.TenantEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tenantEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TenantEdge")
		case "node":
			out.Values[i] = ec._TenantEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._TenantEdge_cursor(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___InputValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___InputValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "isOneOf":
			out.Values[i] = ec.___Type_isOneOf(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCar2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCar(ctx context.Context, sel ast.SelectionSet, v *entgen.Car) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Car(ctx, sel, v)
}

func (ec *executionContext) marshalNCarConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarConnection(ctx context.Context, sel ast.SelectionSet, v entgen.CarConnection) graphql.Marshaler {
	return ec._CarConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCarConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.CarConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CarConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNCarOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOption(ctx context.Context, sel ast.SelectionSet, v *entgen.CarOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CarOption(ctx, sel, v)
}

func (ec *executionContext) marshalNCarOptionConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionConnection(ctx context.Context, sel ast.SelectionSet, v entgen.CarOptionConnection) graphql.Marshaler {
	return ec._CarOptionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCarOptionConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.CarOptionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CarOptionConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCarOptionOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionOrder(ctx context.Context, v any) (*entgen.CarOptionOrder, error) {
	res, err := ec.unmarshalInputCarOptionOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCarOptionOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionOrderField(ctx context.Context, v any) (*entgen.CarOptionOrderField, error) {
	var res = new(entgen.CarOptionOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCarOptionOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.CarOptionOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCarOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOrder(ctx context.Context, v any) (*entgen.CarOrder, error) {
	res, err := ec.unmarshalInputCarOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCarOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOrderField(ctx context.Context, v any) (*entgen.CarOrderField, error) {
	var res = new(entgen.CarOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCarOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.CarOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNCompany2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompany(ctx context.Context, sel ast.SelectionSet, v *entgen.Company) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) marshalNCompanyConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyConnection(ctx context.Context, sel ast.SelectionSet, v entgen.CompanyConnection) graphql.Marshaler {
	return ec._CompanyConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNCompanyConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.CompanyConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CompanyConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCompanyOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyOrder(ctx context.Context, v any) (*entgen.CompanyOrder, error) {
	res, err := ec.unmarshalInputCompanyOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCompanyOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyOrderField(ctx context.Context, v any) (*entgen.CompanyOrderField, error) {
	var res = new(entgen.CompanyOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCompanyOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.CompanyOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v any) (entgql.Cursor[string], error) {
	var res entgql.Cursor[string]
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2entgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v entgql.Cursor[string]) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIndividual2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividual(ctx context.Context, sel ast.SelectionSet, v *entgen.Individual) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Individual(ctx, sel, v)
}

func (ec *executionContext) marshalNIndividualConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualConnection(ctx context.Context, sel ast.SelectionSet, v entgen.IndividualConnection) graphql.Marshaler {
	return ec._IndividualConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNIndividualConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.IndividualConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._IndividualConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNIndividualOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualOrder(ctx context.Context, v any) (*entgen.IndividualOrder, error) {
	res, err := ec.unmarshalInputIndividualOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNIndividualOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualOrderField(ctx context.Context, v any) (*entgen.IndividualOrderField, error) {
	var res = new(entgen.IndividualOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIndividualOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.IndividualOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v any) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v any) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNNode2ᚕgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐNoder(ctx context.Context, sel ast.SelectionSet, v []entgen.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, v any) (entgql.OrderDirection, error) {
	var res entgql.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2entgoᚗioᚋcontribᚋentgqlᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v entgql.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNOutboxConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxConnection(ctx context.Context, sel ast.SelectionSet, v entgen.OutboxConnection) graphql.Marshaler {
	return ec._OutboxConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNOutboxConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.OutboxConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OutboxConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOutboxOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxOrder(ctx context.Context, v any) (*entgen.OutboxOrder, error) {
	res, err := ec.unmarshalInputOutboxOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNOutboxOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxOrderField(ctx context.Context, v any) (*entgen.OutboxOrderField, error) {
	var res = new(entgen.OutboxOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOutboxOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.OutboxOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNPageInfo2entgoᚗioᚋcontribᚋentgqlᚐPageInfo(ctx context.Context, sel ast.SelectionSet, v entgql.PageInfo[string]) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNRental2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRental(ctx context.Context, sel ast.SelectionSet, v *entgen.Rental) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Rental(ctx, sel, v)
}

func (ec *executionContext) marshalNRentalConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalConnection(ctx context.Context, sel ast.SelectionSet, v entgen.RentalConnection) graphql.Marshaler {
	return ec._RentalConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRentalConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.RentalConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RentalConnection(ctx, sel, v)
}

func (ec *executionContext) marshalNRentalOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOption(ctx context.Context, sel ast.SelectionSet, v *entgen.RentalOption) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RentalOption(ctx, sel, v)
}

func (ec *executionContext) marshalNRentalOptionConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionConnection(ctx context.Context, sel ast.SelectionSet, v entgen.RentalOptionConnection) graphql.Marshaler {
	return ec._RentalOptionConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRentalOptionConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.RentalOptionConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RentalOptionConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRentalOptionOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionOrder(ctx context.Context, v any) (*entgen.RentalOptionOrder, error) {
	res, err := ec.unmarshalInputRentalOptionOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRentalOptionOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionOrderField(ctx context.Context, v any) (*entgen.RentalOptionOrderField, error) {
	var res = new(entgen.RentalOptionOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRentalOptionOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.RentalOptionOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNRentalOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOrder(ctx context.Context, v any) (*entgen.RentalOrder, error) {
	res, err := ec.unmarshalInputRentalOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRentalOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOrderField(ctx context.Context, v any) (*entgen.RentalOrderField, error) {
	var res = new(entgen.RentalOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRentalOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.RentalOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalNRenter2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenter(ctx context.Context, sel ast.SelectionSet, v *entgen.Renter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Renter(ctx, sel, v)
}

func (ec *executionContext) marshalNRenterConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterConnection(ctx context.Context, sel ast.SelectionSet, v entgen.RenterConnection) graphql.Marshaler {
	return ec._RenterConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNRenterConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.RenterConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RenterConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRenterOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterOrder(ctx context.Context, v any) (*entgen.RenterOrder, error) {
	res, err := ec.unmarshalInputRenterOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRenterOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterOrderField(ctx context.Context, v any) (*entgen.RenterOrderField, error) {
	var res = new(entgen.RenterOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRenterOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.RenterOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant(ctx context.Context, sel ast.SelectionSet, v *entgen.Tenant) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Tenant(ctx, sel, v)
}

func (ec *executionContext) marshalNTenantConnection2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantConnection(ctx context.Context, sel ast.SelectionSet, v entgen.TenantConnection) graphql.Marshaler {
	return ec._TenantConnection(ctx, sel, &v)
}

func (ec *executionContext) marshalNTenantConnection2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantConnection(ctx context.Context, sel ast.SelectionSet, v *entgen.TenantConnection) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._TenantConnection(ctx, sel, v)
}

func (ec *executionContext) unmarshalNTenantOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantOrder(ctx context.Context, v any) (*entgen.TenantOrder, error) {
	res, err := ec.unmarshalInputTenantOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTenantOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantOrderField(ctx context.Context, v any) (*entgen.TenantOrderField, error) {
	var res = new(entgen.TenantOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTenantOrderField2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantOrderField(ctx context.Context, sel ast.SelectionSet, v *entgen.TenantOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v any) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v any) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCar2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarᚄ(ctx context.Context, sel ast.SelectionSet, v []*entgen.Car) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCar2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCar(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCar2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCar(ctx context.Context, sel ast.SelectionSet, v *entgen.Car) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Car(ctx, sel, v)
}

func (ec *executionContext) marshalOCarEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.CarEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCarEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCarEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.CarEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CarEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOCarOption2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*entgen.CarOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCarOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCarOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOption(ctx context.Context, sel ast.SelectionSet, v *entgen.CarOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CarOption(ctx, sel, v)
}

func (ec *executionContext) marshalOCarOptionEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.CarOptionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCarOptionEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCarOptionEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.CarOptionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CarOptionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCarOptionOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionOrderᚄ(ctx context.Context, v any) ([]*entgen.CarOptionOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.CarOptionOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCarOptionOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOptionOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCarOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOrderᚄ(ctx context.Context, v any) ([]*entgen.CarOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.CarOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCarOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCarOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOCompany2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyᚄ(ctx context.Context, sel ast.SelectionSet, v []*entgen.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCompany2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompany(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOCompany2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompany(ctx context.Context, sel ast.SelectionSet, v *entgen.Company) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Company(ctx, sel, v)
}

func (ec *executionContext) marshalOCompanyEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.CompanyEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCompanyEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCompanyEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.CompanyEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CompanyEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOCompanyOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyOrderᚄ(ctx context.Context, v any) ([]*entgen.CompanyOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.CompanyOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐCompanyOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, v any) (*entgql.Cursor[string], error) {
	if v == nil {
		return nil, nil
	}
	var res = new(entgql.Cursor[string])
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2ᚖentgoᚗioᚋcontribᚋentgqlᚐCursor(ctx context.Context, sel ast.SelectionSet, v *entgql.Cursor[string]) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) marshalOIndividual2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualᚄ(ctx context.Context, sel ast.SelectionSet, v []*entgen.Individual) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIndividual2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividual(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOIndividual2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividual(ctx context.Context, sel ast.SelectionSet, v *entgen.Individual) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Individual(ctx, sel, v)
}

func (ec *executionContext) marshalOIndividualEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.IndividualEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIndividualEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOIndividualEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.IndividualEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IndividualEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOIndividualOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualOrderᚄ(ctx context.Context, v any) ([]*entgen.IndividualOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.IndividualOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNIndividualOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐIndividualOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v any) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint64(ctx context.Context, v any) (*int64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt64(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint64(ctx context.Context, sel ast.SelectionSet, v *int64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalInt64(*v)
	return res
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v any) (map[string]any, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]any) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalMap(v)
	return res
}

func (ec *executionContext) marshalONode2githubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐNoder(ctx context.Context, sel ast.SelectionSet, v entgen.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

func (ec *executionContext) marshalOOutbox2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutbox(ctx context.Context, sel ast.SelectionSet, v *entgen.Outbox) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Outbox(ctx, sel, v)
}

func (ec *executionContext) marshalOOutboxEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.OutboxEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOutboxEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOutboxEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.OutboxEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OutboxEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOutboxOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxOrderᚄ(ctx context.Context, v any) ([]*entgen.OutboxOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.OutboxOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNOutboxOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐOutboxOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORental2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalᚄ(ctx context.Context, sel ast.SelectionSet, v []*entgen.Rental) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRental2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRental(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORental2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRental(ctx context.Context, sel ast.SelectionSet, v *entgen.Rental) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Rental(ctx, sel, v)
}

func (ec *executionContext) marshalORentalEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.RentalEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORentalEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORentalEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.RentalEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RentalEdge(ctx, sel, v)
}

func (ec *executionContext) marshalORentalOption2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionᚄ(ctx context.Context, sel ast.SelectionSet, v []*entgen.RentalOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRentalOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOption(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORentalOption2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOption(ctx context.Context, sel ast.SelectionSet, v *entgen.RentalOption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RentalOption(ctx, sel, v)
}

func (ec *executionContext) marshalORentalOptionEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.RentalOptionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORentalOptionEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORentalOptionEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.RentalOptionEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RentalOptionEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORentalOptionOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionOrderᚄ(ctx context.Context, v any) ([]*entgen.RentalOptionOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.RentalOptionOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRentalOptionOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOptionOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORentalOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOrderᚄ(ctx context.Context, v any) ([]*entgen.RentalOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.RentalOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRentalOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRentalOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalORenter2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterᚄ(ctx context.Context, sel ast.SelectionSet, v []*entgen.Renter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRenter2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalORenter2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenter(ctx context.Context, sel ast.SelectionSet, v *entgen.Renter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Renter(ctx, sel, v)
}

func (ec *executionContext) marshalORenterEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.RenterEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORenterEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORenterEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.RenterEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RenterEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalORenterOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterOrderᚄ(ctx context.Context, v any) ([]*entgen.RenterOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.RenterOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNRenterOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐRenterOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v any) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v any) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v any) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOTenant2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenant(ctx context.Context, sel ast.SelectionSet, v *entgen.Tenant) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Tenant(ctx, sel, v)
}

func (ec *executionContext) marshalOTenantEdge2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantEdge(ctx context.Context, sel ast.SelectionSet, v []*entgen.TenantEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTenantEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTenantEdge2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantEdge(ctx context.Context, sel ast.SelectionSet, v *entgen.TenantEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TenantEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTenantOrder2ᚕᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantOrderᚄ(ctx context.Context, v any) ([]*entgen.TenantOrder, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []any
	vSlice = graphql.CoerceList(v)
	var err error
	res := make([]*entgen.TenantOrder, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTenantOrder2ᚖgithubᚗcomᚋjpᚑryujiᚋgoᚑarchᚑpatternsᚋinternalᚋinfrastructureᚋpostgresᚋentgenᚐTenantOrder(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v any) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	_ = sel
	_ = ctx
	res := graphql.MarshalTime(v)
	return res
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v any) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	_ = sel
	_ = ctx
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
