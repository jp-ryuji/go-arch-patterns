// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/proto/car/v1/car_service.proto

package carv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/jp-ryuji/go-arch-patterns/api/generated/car/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CarServiceName is the fully-qualified name of the CarService service.
	CarServiceName = "car.v1.CarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CarServiceCreateCarProcedure is the fully-qualified name of the CarService's CreateCar RPC.
	CarServiceCreateCarProcedure = "/car.v1.CarService/CreateCar"
	// CarServiceGetCarProcedure is the fully-qualified name of the CarService's GetCar RPC.
	CarServiceGetCarProcedure = "/car.v1.CarService/GetCar"
	// CarServiceListCarsProcedure is the fully-qualified name of the CarService's ListCars RPC.
	CarServiceListCarsProcedure = "/car.v1.CarService/ListCars"
)

// CarServiceClient is a client for the car.v1.CarService service.
type CarServiceClient interface {
	// CreateCar creates a new car
	CreateCar(context.Context, *connect.Request[v1.CreateCarRequest]) (*connect.Response[v1.CreateCarResponse], error)
	// GetCar retrieves a car by ID
	GetCar(context.Context, *connect.Request[v1.GetCarRequest]) (*connect.Response[v1.GetCarResponse], error)
	// ListCars retrieves a list of cars
	ListCars(context.Context, *connect.Request[v1.ListCarsRequest]) (*connect.Response[v1.ListCarsResponse], error)
}

// NewCarServiceClient constructs a client for the car.v1.CarService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCarServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	carServiceMethods := v1.File_api_proto_car_v1_car_service_proto.Services().ByName("CarService").Methods()
	return &carServiceClient{
		createCar: connect.NewClient[v1.CreateCarRequest, v1.CreateCarResponse](
			httpClient,
			baseURL+CarServiceCreateCarProcedure,
			connect.WithSchema(carServiceMethods.ByName("CreateCar")),
			connect.WithClientOptions(opts...),
		),
		getCar: connect.NewClient[v1.GetCarRequest, v1.GetCarResponse](
			httpClient,
			baseURL+CarServiceGetCarProcedure,
			connect.WithSchema(carServiceMethods.ByName("GetCar")),
			connect.WithClientOptions(opts...),
		),
		listCars: connect.NewClient[v1.ListCarsRequest, v1.ListCarsResponse](
			httpClient,
			baseURL+CarServiceListCarsProcedure,
			connect.WithSchema(carServiceMethods.ByName("ListCars")),
			connect.WithClientOptions(opts...),
		),
	}
}

// carServiceClient implements CarServiceClient.
type carServiceClient struct {
	createCar *connect.Client[v1.CreateCarRequest, v1.CreateCarResponse]
	getCar    *connect.Client[v1.GetCarRequest, v1.GetCarResponse]
	listCars  *connect.Client[v1.ListCarsRequest, v1.ListCarsResponse]
}

// CreateCar calls car.v1.CarService.CreateCar.
func (c *carServiceClient) CreateCar(ctx context.Context, req *connect.Request[v1.CreateCarRequest]) (*connect.Response[v1.CreateCarResponse], error) {
	return c.createCar.CallUnary(ctx, req)
}

// GetCar calls car.v1.CarService.GetCar.
func (c *carServiceClient) GetCar(ctx context.Context, req *connect.Request[v1.GetCarRequest]) (*connect.Response[v1.GetCarResponse], error) {
	return c.getCar.CallUnary(ctx, req)
}

// ListCars calls car.v1.CarService.ListCars.
func (c *carServiceClient) ListCars(ctx context.Context, req *connect.Request[v1.ListCarsRequest]) (*connect.Response[v1.ListCarsResponse], error) {
	return c.listCars.CallUnary(ctx, req)
}

// CarServiceHandler is an implementation of the car.v1.CarService service.
type CarServiceHandler interface {
	// CreateCar creates a new car
	CreateCar(context.Context, *connect.Request[v1.CreateCarRequest]) (*connect.Response[v1.CreateCarResponse], error)
	// GetCar retrieves a car by ID
	GetCar(context.Context, *connect.Request[v1.GetCarRequest]) (*connect.Response[v1.GetCarResponse], error)
	// ListCars retrieves a list of cars
	ListCars(context.Context, *connect.Request[v1.ListCarsRequest]) (*connect.Response[v1.ListCarsResponse], error)
}

// NewCarServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCarServiceHandler(svc CarServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	carServiceMethods := v1.File_api_proto_car_v1_car_service_proto.Services().ByName("CarService").Methods()
	carServiceCreateCarHandler := connect.NewUnaryHandler(
		CarServiceCreateCarProcedure,
		svc.CreateCar,
		connect.WithSchema(carServiceMethods.ByName("CreateCar")),
		connect.WithHandlerOptions(opts...),
	)
	carServiceGetCarHandler := connect.NewUnaryHandler(
		CarServiceGetCarProcedure,
		svc.GetCar,
		connect.WithSchema(carServiceMethods.ByName("GetCar")),
		connect.WithHandlerOptions(opts...),
	)
	carServiceListCarsHandler := connect.NewUnaryHandler(
		CarServiceListCarsProcedure,
		svc.ListCars,
		connect.WithSchema(carServiceMethods.ByName("ListCars")),
		connect.WithHandlerOptions(opts...),
	)
	return "/car.v1.CarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CarServiceCreateCarProcedure:
			carServiceCreateCarHandler.ServeHTTP(w, r)
		case CarServiceGetCarProcedure:
			carServiceGetCarHandler.ServeHTTP(w, r)
		case CarServiceListCarsProcedure:
			carServiceListCarsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCarServiceHandler struct{}

func (UnimplementedCarServiceHandler) CreateCar(context.Context, *connect.Request[v1.CreateCarRequest]) (*connect.Response[v1.CreateCarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("car.v1.CarService.CreateCar is not implemented"))
}

func (UnimplementedCarServiceHandler) GetCar(context.Context, *connect.Request[v1.GetCarRequest]) (*connect.Response[v1.GetCarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("car.v1.CarService.GetCar is not implemented"))
}

func (UnimplementedCarServiceHandler) ListCars(context.Context, *connect.Request[v1.ListCarsRequest]) (*connect.Response[v1.ListCarsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("car.v1.CarService.ListCars is not implemented"))
}
